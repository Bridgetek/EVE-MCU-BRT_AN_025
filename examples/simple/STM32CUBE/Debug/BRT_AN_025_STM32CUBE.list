
BRT_AN_025_STM32CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e38  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002ef8  08002ef8  00012ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fa4  08002fa4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002fa4  08002fa4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fa4  08002fa4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa8  08002fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002fb8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002fb8  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000081b7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ed  00000000  00000000  000281eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00029ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002a720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000106c9  00000000  00000000  0002b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a92f  00000000  00000000  0003b939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f927  00000000  00000000  00046268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a5b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ba0  00000000  00000000  000a5be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ee0 	.word	0x08002ee0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ee0 	.word	0x08002ee0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <platform_calib_init>:



//@{
int8_t platform_calib_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    return 1;
 8000234:	2301      	movs	r3, #1
}
 8000236:	0018      	movs	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <platform_calib_write>:

int8_t platform_calib_write(struct touchscreen_calibration *calib)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    return 0;
 8000244:	2300      	movs	r3, #0
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}

0800024e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0

    eve_example();
 8000252:	f001 fd47 	bl	8001ce4 <eve_example>

    /* Infinite loop */
    while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x8>

08000258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b08b      	sub	sp, #44	; 0x2c
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	2414      	movs	r4, #20
 8000262:	193b      	adds	r3, r7, r4
 8000264:	0018      	movs	r0, r3
 8000266:	2314      	movs	r3, #20
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f002 fe22 	bl	8002eb4 <memset>
  if(hspi->Instance==SPI1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <HAL_SPI_MspInit+0x90>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d131      	bne.n	80002de <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <HAL_SPI_MspInit+0x94>)
 8000280:	2180      	movs	r1, #128	; 0x80
 8000282:	0149      	lsls	r1, r1, #5
 8000284:	430a      	orrs	r2, r1
 8000286:	619a      	str	r2, [r3, #24]
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800028a:	699a      	ldr	r2, [r3, #24]
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	015b      	lsls	r3, r3, #5
 8000290:	4013      	ands	r3, r2
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <HAL_SPI_MspInit+0x94>)
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	02c9      	lsls	r1, r1, #11
 80002a0:	430a      	orrs	r2, r1
 80002a2:	615a      	str	r2, [r3, #20]
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <HAL_SPI_MspInit+0x94>)
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	02db      	lsls	r3, r3, #11
 80002ac:	4013      	ands	r3, r2
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80002b2:	0021      	movs	r1, r4
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2238      	movs	r2, #56	; 0x38
 80002b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2203      	movs	r2, #3
 80002ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_SPI_MspInit+0x98>)
 80002d6:	0019      	movs	r1, r3
 80002d8:	0010      	movs	r0, r2
 80002da:	f000 f979 	bl	80005d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b00b      	add	sp, #44	; 0x2c
 80002e4:	bd90      	pop	{r4, r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40013000 	.word	0x40013000
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000400 	.word	0x48000400

080002f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <NMI_Handler+0x4>

080002fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <HardFault_Handler+0x4>

08000300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000318:	f000 f866 	bl	80003e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f7ff fff7 	bl	8000322 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f002 fd87 	bl	8002e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff76 	bl	800024e <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000370:	08002fac 	.word	0x08002fac
  ldr r2, =_sbss
 8000374:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000378:	20000094 	.word	0x20000094

0800037c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_IRQHandler>
	...

08000380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <HAL_InitTick+0x5c>)
 800038a:	681c      	ldr	r4, [r3, #0]
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HAL_InitTick+0x60>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	0019      	movs	r1, r3
 8000392:	23fa      	movs	r3, #250	; 0xfa
 8000394:	0098      	lsls	r0, r3, #2
 8000396:	f7ff febf 	bl	8000118 <__udivsi3>
 800039a:	0003      	movs	r3, r0
 800039c:	0019      	movs	r1, r3
 800039e:	0020      	movs	r0, r4
 80003a0:	f7ff feba 	bl	8000118 <__udivsi3>
 80003a4:	0003      	movs	r3, r0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 f905 	bl	80005b6 <HAL_SYSTICK_Config>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e00f      	b.n	80003d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d80b      	bhi.n	80003d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	2301      	movs	r3, #1
 80003be:	425b      	negs	r3, r3
 80003c0:	2200      	movs	r2, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 f8e2 	bl	800058c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_InitTick+0x64>)
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	e000      	b.n	80003d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b003      	add	sp, #12
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000008 	.word	0x20000008
 80003e4:	20000004 	.word	0x20000004

080003e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <HAL_IncTick+0x1c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	001a      	movs	r2, r3
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <HAL_IncTick+0x20>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	18d2      	adds	r2, r2, r3
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <HAL_IncTick+0x20>)
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000008 	.word	0x20000008
 8000408:	20000028 	.word	0x20000028

0800040c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  return uwTick;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <HAL_GetTick+0x10>)
 8000412:	681b      	ldr	r3, [r3, #0]
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	20000028 	.word	0x20000028

08000420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000428:	f7ff fff0 	bl	800040c <HAL_GetTick>
 800042c:	0003      	movs	r3, r0
 800042e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	d005      	beq.n	8000446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_Delay+0x44>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	001a      	movs	r2, r3
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	189b      	adds	r3, r3, r2
 8000444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	f7ff ffe0 	bl	800040c <HAL_GetTick>
 800044c:	0002      	movs	r2, r0
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	429a      	cmp	r2, r3
 8000456:	d8f7      	bhi.n	8000448 <HAL_Delay+0x28>
  {
  }
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000008 	.word	0x20000008

08000468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	0002      	movs	r2, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b7f      	cmp	r3, #127	; 0x7f
 800047c:	d828      	bhi.n	80004d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047e:	4a2f      	ldr	r2, [pc, #188]	; (800053c <__NVIC_SetPriority+0xd4>)
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	089b      	lsrs	r3, r3, #2
 8000488:	33c0      	adds	r3, #192	; 0xc0
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	589b      	ldr	r3, [r3, r2]
 800048e:	1dfa      	adds	r2, r7, #7
 8000490:	7812      	ldrb	r2, [r2, #0]
 8000492:	0011      	movs	r1, r2
 8000494:	2203      	movs	r2, #3
 8000496:	400a      	ands	r2, r1
 8000498:	00d2      	lsls	r2, r2, #3
 800049a:	21ff      	movs	r1, #255	; 0xff
 800049c:	4091      	lsls	r1, r2
 800049e:	000a      	movs	r2, r1
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	401a      	ands	r2, r3
 80004a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	019b      	lsls	r3, r3, #6
 80004aa:	22ff      	movs	r2, #255	; 0xff
 80004ac:	401a      	ands	r2, r3
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	2303      	movs	r3, #3
 80004b6:	4003      	ands	r3, r0
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004bc:	481f      	ldr	r0, [pc, #124]	; (800053c <__NVIC_SetPriority+0xd4>)
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	089b      	lsrs	r3, r3, #2
 80004c6:	430a      	orrs	r2, r1
 80004c8:	33c0      	adds	r3, #192	; 0xc0
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004ce:	e031      	b.n	8000534 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <__NVIC_SetPriority+0xd8>)
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	0019      	movs	r1, r3
 80004d8:	230f      	movs	r3, #15
 80004da:	400b      	ands	r3, r1
 80004dc:	3b08      	subs	r3, #8
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	3306      	adds	r3, #6
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	3304      	adds	r3, #4
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1dfa      	adds	r2, r7, #7
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	0011      	movs	r1, r2
 80004f0:	2203      	movs	r2, #3
 80004f2:	400a      	ands	r2, r1
 80004f4:	00d2      	lsls	r2, r2, #3
 80004f6:	21ff      	movs	r1, #255	; 0xff
 80004f8:	4091      	lsls	r1, r2
 80004fa:	000a      	movs	r2, r1
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	401a      	ands	r2, r3
 8000500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	019b      	lsls	r3, r3, #6
 8000506:	22ff      	movs	r2, #255	; 0xff
 8000508:	401a      	ands	r2, r3
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	2303      	movs	r3, #3
 8000512:	4003      	ands	r3, r0
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <__NVIC_SetPriority+0xd8>)
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	001c      	movs	r4, r3
 8000520:	230f      	movs	r3, #15
 8000522:	4023      	ands	r3, r4
 8000524:	3b08      	subs	r3, #8
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	430a      	orrs	r2, r1
 800052a:	3306      	adds	r3, #6
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	18c3      	adds	r3, r0, r3
 8000530:	3304      	adds	r3, #4
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b003      	add	sp, #12
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	045b      	lsls	r3, r3, #17
 8000554:	429a      	cmp	r2, r3
 8000556:	d301      	bcc.n	800055c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000558:	2301      	movs	r3, #1
 800055a:	e010      	b.n	800057e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <SysTick_Config+0x44>)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	3a01      	subs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	2103      	movs	r1, #3
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ff7c 	bl	8000468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SysTick_Config+0x44>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <SysTick_Config+0x44>)
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800057c:	2300      	movs	r3, #0
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	e000e010 	.word	0xe000e010

0800058c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	210f      	movs	r1, #15
 8000598:	187b      	adds	r3, r7, r1
 800059a:	1c02      	adds	r2, r0, #0
 800059c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff5d 	bl	8000468 <__NVIC_SetPriority>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffbf 	bl	8000544 <SysTick_Config>
 80005c6:	0003      	movs	r3, r0
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005de:	e14f      	b.n	8000880 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2101      	movs	r1, #1
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	4091      	lsls	r1, r2
 80005ea:	000a      	movs	r2, r1
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d100      	bne.n	80005f8 <HAL_GPIO_Init+0x28>
 80005f6:	e140      	b.n	800087a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2203      	movs	r2, #3
 80005fe:	4013      	ands	r3, r2
 8000600:	2b01      	cmp	r3, #1
 8000602:	d005      	beq.n	8000610 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800060c:	2b02      	cmp	r3, #2
 800060e:	d130      	bne.n	8000672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	2203      	movs	r2, #3
 800061c:	409a      	lsls	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	43da      	mvns	r2, r3
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	409a      	lsls	r2, r3
 8000632:	0013      	movs	r3, r2
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4313      	orrs	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000646:	2201      	movs	r2, #1
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	409a      	lsls	r2, r3
 800064c:	0013      	movs	r3, r2
 800064e:	43da      	mvns	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	4013      	ands	r3, r2
 8000654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	2201      	movs	r2, #1
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
 8000664:	0013      	movs	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4313      	orrs	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2203      	movs	r2, #3
 8000678:	4013      	ands	r3, r2
 800067a:	2b03      	cmp	r3, #3
 800067c:	d017      	beq.n	80006ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2203      	movs	r2, #3
 800068a:	409a      	lsls	r2, r3
 800068c:	0013      	movs	r3, r2
 800068e:	43da      	mvns	r2, r3
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	4013      	ands	r3, r2
 8000694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	0013      	movs	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2203      	movs	r2, #3
 80006b4:	4013      	ands	r3, r2
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d123      	bne.n	8000702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	08da      	lsrs	r2, r3, #3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3208      	adds	r2, #8
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	58d3      	ldr	r3, [r2, r3]
 80006c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2207      	movs	r2, #7
 80006cc:	4013      	ands	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	220f      	movs	r2, #15
 80006d2:	409a      	lsls	r2, r3
 80006d4:	0013      	movs	r3, r2
 80006d6:	43da      	mvns	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	4013      	ands	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2107      	movs	r1, #7
 80006e6:	400b      	ands	r3, r1
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	409a      	lsls	r2, r3
 80006ec:	0013      	movs	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	08da      	lsrs	r2, r3, #3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3208      	adds	r2, #8
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	6939      	ldr	r1, [r7, #16]
 8000700:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2203      	movs	r2, #3
 800070e:	409a      	lsls	r2, r3
 8000710:	0013      	movs	r3, r2
 8000712:	43da      	mvns	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4013      	ands	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2203      	movs	r2, #3
 8000720:	401a      	ands	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	409a      	lsls	r2, r3
 8000728:	0013      	movs	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4313      	orrs	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	23c0      	movs	r3, #192	; 0xc0
 800073c:	029b      	lsls	r3, r3, #10
 800073e:	4013      	ands	r3, r2
 8000740:	d100      	bne.n	8000744 <HAL_GPIO_Init+0x174>
 8000742:	e09a      	b.n	800087a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	4b54      	ldr	r3, [pc, #336]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 8000746:	699a      	ldr	r2, [r3, #24]
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 800074a:	2101      	movs	r1, #1
 800074c:	430a      	orrs	r2, r1
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	4b51      	ldr	r3, [pc, #324]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	2201      	movs	r2, #1
 8000756:	4013      	ands	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800075c:	4a4f      	ldr	r2, [pc, #316]	; (800089c <HAL_GPIO_Init+0x2cc>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	3302      	adds	r3, #2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	589b      	ldr	r3, [r3, r2]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2203      	movs	r2, #3
 800076e:	4013      	ands	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	220f      	movs	r2, #15
 8000774:	409a      	lsls	r2, r3
 8000776:	0013      	movs	r3, r2
 8000778:	43da      	mvns	r2, r3
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	2390      	movs	r3, #144	; 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	429a      	cmp	r2, r3
 8000788:	d013      	beq.n	80007b2 <HAL_GPIO_Init+0x1e2>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d00d      	beq.n	80007ae <HAL_GPIO_Init+0x1de>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <HAL_GPIO_Init+0x2d4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d007      	beq.n	80007aa <HAL_GPIO_Init+0x1da>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a42      	ldr	r2, [pc, #264]	; (80008a8 <HAL_GPIO_Init+0x2d8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_GPIO_Init+0x1d6>
 80007a2:	2303      	movs	r3, #3
 80007a4:	e006      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007a6:	2305      	movs	r3, #5
 80007a8:	e004      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007aa:	2302      	movs	r3, #2
 80007ac:	e002      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007b2:	2300      	movs	r3, #0
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	2103      	movs	r1, #3
 80007b8:	400a      	ands	r2, r1
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	4093      	lsls	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007c4:	4935      	ldr	r1, [pc, #212]	; (800089c <HAL_GPIO_Init+0x2cc>)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	089b      	lsrs	r3, r3, #2
 80007ca:	3302      	adds	r3, #2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	43da      	mvns	r2, r3
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	035b      	lsls	r3, r3, #13
 80007ea:	4013      	ands	r3, r2
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	43da      	mvns	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	039b      	lsls	r3, r3, #14
 8000814:	4013      	ands	r3, r2
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	43da      	mvns	r2, r3
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	029b      	lsls	r3, r3, #10
 800083e:	4013      	ands	r3, r2
 8000840:	d003      	beq.n	800084a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	43da      	mvns	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	025b      	lsls	r3, r3, #9
 8000868:	4013      	ands	r3, r2
 800086a:	d003      	beq.n	8000874 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	40da      	lsrs	r2, r3
 8000888:	1e13      	subs	r3, r2, #0
 800088a:	d000      	beq.n	800088e <HAL_GPIO_Init+0x2be>
 800088c:	e6a8      	b.n	80005e0 <HAL_GPIO_Init+0x10>
  } 
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b006      	add	sp, #24
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	48000800 	.word	0x48000800
 80008a8:	48000c00 	.word	0x48000c00
 80008ac:	40010400 	.word	0x40010400

080008b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	0008      	movs	r0, r1
 80008ba:	0011      	movs	r1, r2
 80008bc:	1cbb      	adds	r3, r7, #2
 80008be:	1c02      	adds	r2, r0, #0
 80008c0:	801a      	strh	r2, [r3, #0]
 80008c2:	1c7b      	adds	r3, r7, #1
 80008c4:	1c0a      	adds	r2, r1, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008d0:	1cbb      	adds	r3, r7, #2
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008d8:	e003      	b.n	80008e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008da:	1cbb      	adds	r3, r7, #2
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e301      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	d100      	bne.n	800090a <HAL_RCC_OscConfig+0x1e>
 8000908:	e08d      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800090a:	4bc3      	ldr	r3, [pc, #780]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	220c      	movs	r2, #12
 8000910:	4013      	ands	r3, r2
 8000912:	2b04      	cmp	r3, #4
 8000914:	d00e      	beq.n	8000934 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000916:	4bc0      	ldr	r3, [pc, #768]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	220c      	movs	r2, #12
 800091c:	4013      	ands	r3, r2
 800091e:	2b08      	cmp	r3, #8
 8000920:	d116      	bne.n	8000950 <HAL_RCC_OscConfig+0x64>
 8000922:	4bbd      	ldr	r3, [pc, #756]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	025b      	lsls	r3, r3, #9
 800092a:	401a      	ands	r2, r3
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	025b      	lsls	r3, r3, #9
 8000930:	429a      	cmp	r2, r3
 8000932:	d10d      	bne.n	8000950 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	4bb8      	ldr	r3, [pc, #736]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	d100      	bne.n	8000942 <HAL_RCC_OscConfig+0x56>
 8000940:	e070      	b.n	8000a24 <HAL_RCC_OscConfig+0x138>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d000      	beq.n	800094c <HAL_RCC_OscConfig+0x60>
 800094a:	e06b      	b.n	8000a24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e2d8      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d107      	bne.n	8000968 <HAL_RCC_OscConfig+0x7c>
 8000958:	4baf      	ldr	r3, [pc, #700]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4bae      	ldr	r3, [pc, #696]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	0249      	lsls	r1, r1, #9
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e02f      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10c      	bne.n	800098a <HAL_RCC_OscConfig+0x9e>
 8000970:	4ba9      	ldr	r3, [pc, #676]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4ba8      	ldr	r3, [pc, #672]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000976:	49a9      	ldr	r1, [pc, #676]	; (8000c1c <HAL_RCC_OscConfig+0x330>)
 8000978:	400a      	ands	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4ba6      	ldr	r3, [pc, #664]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4ba5      	ldr	r3, [pc, #660]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000982:	49a7      	ldr	r1, [pc, #668]	; (8000c20 <HAL_RCC_OscConfig+0x334>)
 8000984:	400a      	ands	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e01e      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b05      	cmp	r3, #5
 8000990:	d10e      	bne.n	80009b0 <HAL_RCC_OscConfig+0xc4>
 8000992:	4ba1      	ldr	r3, [pc, #644]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4ba0      	ldr	r3, [pc, #640]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	02c9      	lsls	r1, r1, #11
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	4b9d      	ldr	r3, [pc, #628]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b9c      	ldr	r3, [pc, #624]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0249      	lsls	r1, r1, #9
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e00b      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 80009b0:	4b99      	ldr	r3, [pc, #612]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b98      	ldr	r3, [pc, #608]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009b6:	4999      	ldr	r1, [pc, #612]	; (8000c1c <HAL_RCC_OscConfig+0x330>)
 80009b8:	400a      	ands	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	4b96      	ldr	r3, [pc, #600]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b95      	ldr	r3, [pc, #596]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009c2:	4997      	ldr	r1, [pc, #604]	; (8000c20 <HAL_RCC_OscConfig+0x334>)
 80009c4:	400a      	ands	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d014      	beq.n	80009fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d0:	f7ff fd1c 	bl	800040c <HAL_GetTick>
 80009d4:	0003      	movs	r3, r0
 80009d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d8:	e008      	b.n	80009ec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009da:	f7ff fd17 	bl	800040c <HAL_GetTick>
 80009de:	0002      	movs	r2, r0
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b64      	cmp	r3, #100	; 0x64
 80009e6:	d901      	bls.n	80009ec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80009e8:	2303      	movs	r3, #3
 80009ea:	e28a      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ec:	4b8a      	ldr	r3, [pc, #552]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	d0f0      	beq.n	80009da <HAL_RCC_OscConfig+0xee>
 80009f8:	e015      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fa:	f7ff fd07 	bl	800040c <HAL_GetTick>
 80009fe:	0003      	movs	r3, r0
 8000a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a02:	e008      	b.n	8000a16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fd02 	bl	800040c <HAL_GetTick>
 8000a08:	0002      	movs	r2, r0
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b64      	cmp	r3, #100	; 0x64
 8000a10:	d901      	bls.n	8000a16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000a12:	2303      	movs	r3, #3
 8000a14:	e275      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	4b80      	ldr	r3, [pc, #512]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	029b      	lsls	r3, r3, #10
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d1f0      	bne.n	8000a04 <HAL_RCC_OscConfig+0x118>
 8000a22:	e000      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	d100      	bne.n	8000a32 <HAL_RCC_OscConfig+0x146>
 8000a30:	e069      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a32:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	220c      	movs	r2, #12
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d00b      	beq.n	8000a54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a3c:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	220c      	movs	r2, #12
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d11c      	bne.n	8000a82 <HAL_RCC_OscConfig+0x196>
 8000a48:	4b73      	ldr	r3, [pc, #460]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	025b      	lsls	r3, r3, #9
 8000a50:	4013      	ands	r3, r2
 8000a52:	d116      	bne.n	8000a82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a54:	4b70      	ldr	r3, [pc, #448]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d005      	beq.n	8000a6a <HAL_RCC_OscConfig+0x17e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e24b      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a6a:	4b6b      	ldr	r3, [pc, #428]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	22f8      	movs	r2, #248	; 0xf8
 8000a70:	4393      	bics	r3, r2
 8000a72:	0019      	movs	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	00da      	lsls	r2, r3, #3
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a80:	e041      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d024      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a8a:	4b63      	ldr	r3, [pc, #396]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a96:	f7ff fcb9 	bl	800040c <HAL_GetTick>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fcb4 	bl	800040c <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e227      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab2:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d0f1      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000abc:	4b56      	ldr	r3, [pc, #344]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	22f8      	movs	r2, #248	; 0xf8
 8000ac2:	4393      	bics	r3, r2
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	00da      	lsls	r2, r3, #3
 8000acc:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e018      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ad4:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	438a      	bics	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fc94 	bl	800040c <HAL_GetTick>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae8:	e008      	b.n	8000afc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aea:	f7ff fc8f 	bl	800040c <HAL_GetTick>
 8000aee:	0002      	movs	r2, r0
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d901      	bls.n	8000afc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e202      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afc:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2202      	movs	r2, #2
 8000b02:	4013      	ands	r3, r2
 8000b04:	d1f1      	bne.n	8000aea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d036      	beq.n	8000b7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d019      	beq.n	8000b4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b18:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b24:	f7ff fc72 	bl	800040c <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fc6d 	bl	800040c <HAL_GetTick>
 8000b32:	0002      	movs	r2, r0
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e1e0      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	2202      	movs	r2, #2
 8000b46:	4013      	ands	r3, r2
 8000b48:	d0f1      	beq.n	8000b2e <HAL_RCC_OscConfig+0x242>
 8000b4a:	e018      	b.n	8000b7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b50:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	438a      	bics	r2, r1
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b58:	f7ff fc58 	bl	800040c <HAL_GetTick>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b62:	f7ff fc53 	bl	800040c <HAL_GetTick>
 8000b66:	0002      	movs	r2, r0
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e1c6      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	2202      	movs	r2, #2
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d1f1      	bne.n	8000b62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
 8000b86:	d100      	bne.n	8000b8a <HAL_RCC_OscConfig+0x29e>
 8000b88:	e0b4      	b.n	8000cf4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b8a:	201f      	movs	r0, #31
 8000b8c:	183b      	adds	r3, r7, r0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	055b      	lsls	r3, r3, #21
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d110      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0549      	lsls	r1, r1, #21
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	61da      	str	r2, [r3, #28]
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000bae:	69da      	ldr	r2, [r3, #28]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	055b      	lsls	r3, r3, #21
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000bba:	183b      	adds	r3, r7, r0
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d11a      	bne.n	8000c02 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0049      	lsls	r1, r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bda:	f7ff fc17 	bl	800040c <HAL_GetTick>
 8000bde:	0003      	movs	r3, r0
 8000be0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be4:	f7ff fc12 	bl	800040c <HAL_GetTick>
 8000be8:	0002      	movs	r2, r0
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e185      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10e      	bne.n	8000c28 <HAL_RCC_OscConfig+0x33c>
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	621a      	str	r2, [r3, #32]
 8000c16:	e035      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	fffeffff 	.word	0xfffeffff
 8000c20:	fffbffff 	.word	0xfffbffff
 8000c24:	40007000 	.word	0x40007000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10c      	bne.n	8000c4a <HAL_RCC_OscConfig+0x35e>
 8000c30:	4bb6      	ldr	r3, [pc, #728]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	4bb5      	ldr	r3, [pc, #724]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	438a      	bics	r2, r1
 8000c3a:	621a      	str	r2, [r3, #32]
 8000c3c:	4bb3      	ldr	r3, [pc, #716]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	4bb2      	ldr	r3, [pc, #712]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c42:	2104      	movs	r1, #4
 8000c44:	438a      	bics	r2, r1
 8000c46:	621a      	str	r2, [r3, #32]
 8000c48:	e01c      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x380>
 8000c52:	4bae      	ldr	r3, [pc, #696]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	4bad      	ldr	r3, [pc, #692]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c58:	2104      	movs	r1, #4
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	4bab      	ldr	r3, [pc, #684]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c60:	6a1a      	ldr	r2, [r3, #32]
 8000c62:	4baa      	ldr	r3, [pc, #680]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	621a      	str	r2, [r3, #32]
 8000c6a:	e00b      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c6c:	4ba7      	ldr	r3, [pc, #668]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c6e:	6a1a      	ldr	r2, [r3, #32]
 8000c70:	4ba6      	ldr	r3, [pc, #664]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c72:	2101      	movs	r1, #1
 8000c74:	438a      	bics	r2, r1
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	4ba4      	ldr	r3, [pc, #656]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c7a:	6a1a      	ldr	r2, [r3, #32]
 8000c7c:	4ba3      	ldr	r3, [pc, #652]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	438a      	bics	r2, r1
 8000c82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d014      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8c:	f7ff fbbe 	bl	800040c <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c94:	e009      	b.n	8000caa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c96:	f7ff fbb9 	bl	800040c <HAL_GetTick>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	4a9b      	ldr	r2, [pc, #620]	; (8000f10 <HAL_RCC_OscConfig+0x624>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e12b      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000caa:	4b98      	ldr	r3, [pc, #608]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d0f0      	beq.n	8000c96 <HAL_RCC_OscConfig+0x3aa>
 8000cb4:	e013      	b.n	8000cde <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fba9 	bl	800040c <HAL_GetTick>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cbe:	e009      	b.n	8000cd4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fba4 	bl	800040c <HAL_GetTick>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a91      	ldr	r2, [pc, #580]	; (8000f10 <HAL_RCC_OscConfig+0x624>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e116      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd4:	4b8d      	ldr	r3, [pc, #564]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cde:	231f      	movs	r3, #31
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d105      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce8:	4b88      	ldr	r3, [pc, #544]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cea:	69da      	ldr	r2, [r3, #28]
 8000cec:	4b87      	ldr	r3, [pc, #540]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cee:	4989      	ldr	r1, [pc, #548]	; (8000f14 <HAL_RCC_OscConfig+0x628>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d12a      	bne.n	8000d5c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d06:	4b81      	ldr	r3, [pc, #516]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0a:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000d12:	4b7e      	ldr	r3, [pc, #504]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d16:	4b7d      	ldr	r3, [pc, #500]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fb75 	bl	800040c <HAL_GetTick>
 8000d22:	0003      	movs	r3, r0
 8000d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d28:	f7ff fb70 	bl	800040c <HAL_GetTick>
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e3      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d3a:	4b74      	ldr	r3, [pc, #464]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4013      	ands	r3, r2
 8000d42:	d0f1      	beq.n	8000d28 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d44:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d48:	22f8      	movs	r2, #248	; 0xf8
 8000d4a:	4393      	bics	r3, r2
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	00da      	lsls	r2, r3, #3
 8000d54:	4b6d      	ldr	r3, [pc, #436]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d56:	430a      	orrs	r2, r1
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5a:	e034      	b.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	3305      	adds	r3, #5
 8000d62:	d111      	bne.n	8000d88 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d64:	4b69      	ldr	r3, [pc, #420]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	22f8      	movs	r2, #248	; 0xf8
 8000d76:	4393      	bics	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	00da      	lsls	r2, r3, #3
 8000d80:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	e01e      	b.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d88:	4b60      	ldr	r3, [pc, #384]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d8e:	2104      	movs	r1, #4
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d94:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d98:	4b5c      	ldr	r3, [pc, #368]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fb34 	bl	800040c <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000daa:	f7ff fb2f 	bl	800040c <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e0a2      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1f1      	bne.n	8000daa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x4e4>
 8000dce:	e097      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x4f2>
 8000ddc:	e06b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d14c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dec:	494a      	ldr	r1, [pc, #296]	; (8000f18 <HAL_RCC_OscConfig+0x62c>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fb0b 	bl	800040c <HAL_GetTick>
 8000df6:	0003      	movs	r3, r0
 8000df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dfc:	f7ff fb06 	bl	800040c <HAL_GetTick>
 8000e00:	0002      	movs	r2, r0
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e079      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	049b      	lsls	r3, r3, #18
 8000e16:	4013      	ands	r3, r2
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	220f      	movs	r2, #15
 8000e20:	4393      	bics	r3, r2
 8000e22:	0019      	movs	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <HAL_RCC_OscConfig+0x630>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0449      	lsls	r1, r1, #17
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fad9 	bl	800040c <HAL_GetTick>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fad4 	bl	800040c <HAL_GetTick>
 8000e64:	0002      	movs	r2, r0
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e047      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	049b      	lsls	r3, r3, #18
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0x574>
 8000e7e:	e03f      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <HAL_RCC_OscConfig+0x62c>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fabe 	bl	800040c <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fab9 	bl	800040c <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e02c      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	049b      	lsls	r3, r3, #18
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5aa>
 8000eb4:	e024      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e01f      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d10e      	bne.n	8000efc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d107      	bne.n	8000efc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	039b      	lsls	r3, r3, #14
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d001      	beq.n	8000f00 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b008      	add	sp, #32
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	00001388 	.word	0x00001388
 8000f14:	efffffff 	.word	0xefffffff
 8000f18:	feffffff 	.word	0xfeffffff
 8000f1c:	ffc2ffff 	.word	0xffc2ffff

08000f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0b3      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f34:	4b5b      	ldr	r3, [pc, #364]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d911      	bls.n	8000f66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4393      	bics	r3, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f54:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d001      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e09a      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d015      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2204      	movs	r2, #4
 8000f76:	4013      	ands	r3, r2
 8000f78:	d006      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f80:	21e0      	movs	r1, #224	; 0xe0
 8000f82:	00c9      	lsls	r1, r1, #3
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	22f0      	movs	r2, #240	; 0xf0
 8000f8e:	4393      	bics	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d040      	beq.n	8001028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d107      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d114      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e06e      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	049b      	lsls	r3, r3, #18
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d108      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e062      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e05b      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4393      	bics	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff8:	f7ff fa08 	bl	800040c <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001000:	e009      	b.n	8001016 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001002:	f7ff fa03 	bl	800040c <HAL_GetTick>
 8001006:	0002      	movs	r2, r0
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_RCC_ClockConfig+0x18c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e042      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	220c      	movs	r2, #12
 800101c:	401a      	ands	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	429a      	cmp	r2, r3
 8001026:	d1ec      	bne.n	8001002 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d211      	bcs.n	800105a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	4393      	bics	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d001      	beq.n	800105a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e020      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d009      	beq.n	8001078 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 800106a:	4013      	ands	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001074:	430a      	orrs	r2, r1
 8001076:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001078:	f000 f820 	bl	80010bc <HAL_RCC_GetSysClockFreq>
 800107c:	0001      	movs	r1, r0
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	220f      	movs	r2, #15
 8001086:	4013      	ands	r3, r2
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	000a      	movs	r2, r1
 800108e:	40da      	lsrs	r2, r3
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x198>)
 8001092:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff f973 	bl	8000380 <HAL_InitTick>
  
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40022000 	.word	0x40022000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	00001388 	.word	0x00001388
 80010b0:	fffff8ff 	.word	0xfffff8ff
 80010b4:	08002f74 	.word	0x08002f74
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	220c      	movs	r2, #12
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d002      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x30>
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0x36>
 80010ea:	e02c      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 80010ee:	613b      	str	r3, [r7, #16]
      break;
 80010f0:	e02c      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	220f      	movs	r2, #15
 80010f8:	4013      	ands	r3, r2
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_RCC_GetSysClockFreq+0xa4>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	220f      	movs	r2, #15
 8001106:	4013      	ands	r3, r2
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_RCC_GetSysClockFreq+0xa8>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	4013      	ands	r3, r2
 8001116:	d009      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 800111c:	f7fe fffc 	bl	8000118 <__udivsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	001a      	movs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4353      	muls	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e009      	b.n	8001140 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	000a      	movs	r2, r1
 8001130:	0152      	lsls	r2, r2, #5
 8001132:	1a52      	subs	r2, r2, r1
 8001134:	0193      	lsls	r3, r2, #6
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	185b      	adds	r3, r3, r1
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
      break;
 8001144:	e002      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001148:	613b      	str	r3, [r7, #16]
      break;
 800114a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800114c:	693b      	ldr	r3, [r7, #16]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b006      	add	sp, #24
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40021000 	.word	0x40021000
 800115c:	007a1200 	.word	0x007a1200
 8001160:	08002f84 	.word	0x08002f84
 8001164:	08002f94 	.word	0x08002f94

08001168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0a8      	b.n	80012cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	2382      	movs	r3, #130	; 0x82
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	429a      	cmp	r2, r3
 800118c:	d009      	beq.n	80011a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
 8001194:	e005      	b.n	80011a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	225d      	movs	r2, #93	; 0x5d
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	225c      	movs	r2, #92	; 0x5c
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff f84a 	bl	8000258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	225d      	movs	r2, #93	; 0x5d
 80011c8:	2102      	movs	r1, #2
 80011ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	23e0      	movs	r3, #224	; 0xe0
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d902      	bls.n	80011ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e002      	b.n	80011f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	23f0      	movs	r3, #240	; 0xf0
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d008      	beq.n	8001212 <HAL_SPI_Init+0xaa>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	23e0      	movs	r3, #224	; 0xe0
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	429a      	cmp	r2, r3
 800120a:	d002      	beq.n	8001212 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2382      	movs	r3, #130	; 0x82
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	2384      	movs	r3, #132	; 0x84
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	400b      	ands	r3, r1
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2102      	movs	r1, #2
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	2101      	movs	r1, #1
 8001238:	400b      	ands	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6999      	ldr	r1, [r3, #24]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	400b      	ands	r3, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2138      	movs	r1, #56	; 0x38
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	400b      	ands	r3, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	0011      	movs	r1, r2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	401a      	ands	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	0c1b      	lsrs	r3, r3, #16
 8001276:	2204      	movs	r2, #4
 8001278:	401a      	ands	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2110      	movs	r1, #16
 8001280:	400b      	ands	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	2108      	movs	r1, #8
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	23f0      	movs	r3, #240	; 0xf0
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	0011      	movs	r1, r2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	015b      	lsls	r3, r3, #5
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69da      	ldr	r2, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4907      	ldr	r1, [pc, #28]	; (80012d4 <HAL_SPI_Init+0x16c>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	225d      	movs	r2, #93	; 0x5d
 80012c6:	2101      	movs	r1, #1
 80012c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	fffff7ff 	.word	0xfffff7ff

080012d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	001a      	movs	r2, r3
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012ee:	2323      	movs	r3, #35	; 0x23
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	225c      	movs	r2, #92	; 0x5c
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_SPI_TransmitReceive+0x2c>
 8001300:	2302      	movs	r3, #2
 8001302:	e1c4      	b.n	800168e <HAL_SPI_TransmitReceive+0x3b6>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	225c      	movs	r2, #92	; 0x5c
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800130c:	f7ff f87e 	bl	800040c <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001314:	201b      	movs	r0, #27
 8001316:	183b      	adds	r3, r7, r0
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	215d      	movs	r1, #93	; 0x5d
 800131c:	5c52      	ldrb	r2, [r2, r1]
 800131e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001326:	2312      	movs	r3, #18
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	1cba      	adds	r2, r7, #2
 800132c:	8812      	ldrh	r2, [r2, #0]
 800132e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001330:	183b      	adds	r3, r7, r0
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d011      	beq.n	800135c <HAL_SPI_TransmitReceive+0x84>
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	2382      	movs	r3, #130	; 0x82
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	429a      	cmp	r2, r3
 8001340:	d107      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x7a>
 800134a:	183b      	adds	r3, r7, r0
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d004      	beq.n	800135c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001352:	2323      	movs	r3, #35	; 0x23
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2202      	movs	r2, #2
 8001358:	701a      	strb	r2, [r3, #0]
    goto error;
 800135a:	e191      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x98>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x98>
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001370:	2323      	movs	r3, #35	; 0x23
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
    goto error;
 8001378:	e182      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	225d      	movs	r2, #93	; 0x5d
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b04      	cmp	r3, #4
 8001384:	d003      	beq.n	800138e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	225d      	movs	r2, #93	; 0x5d
 800138a:	2105      	movs	r1, #5
 800138c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1cba      	adds	r2, r7, #2
 800139e:	2146      	movs	r1, #70	; 0x46
 80013a0:	8812      	ldrh	r2, [r2, #0]
 80013a2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1cba      	adds	r2, r7, #2
 80013a8:	2144      	movs	r1, #68	; 0x44
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1cba      	adds	r2, r7, #2
 80013b8:	8812      	ldrh	r2, [r2, #0]
 80013ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1cba      	adds	r2, r7, #2
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	23e0      	movs	r3, #224	; 0xe0
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	429a      	cmp	r2, r3
 80013da:	d908      	bls.n	80013ee <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	49ac      	ldr	r1, [pc, #688]	; (8001698 <HAL_SPI_TransmitReceive+0x3c0>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	e008      	b.n	8001400 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0149      	lsls	r1, r1, #5
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	4013      	ands	r3, r2
 800140a:	2b40      	cmp	r3, #64	; 0x40
 800140c:	d007      	beq.n	800141e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	23e0      	movs	r3, #224	; 0xe0
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	429a      	cmp	r2, r3
 8001428:	d800      	bhi.n	800142c <HAL_SPI_TransmitReceive+0x154>
 800142a:	e083      	b.n	8001534 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_SPI_TransmitReceive+0x168>
 8001434:	2312      	movs	r3, #18
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d000      	beq.n	8001440 <HAL_SPI_TransmitReceive+0x168>
 800143e:	e06d      	b.n	800151c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	1c9a      	adds	r2, r3, #2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001464:	e05a      	b.n	800151c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d11b      	bne.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	2b01      	cmp	r3, #1
 8001482:	d113      	bne.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	1c9a      	adds	r2, r3, #2
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d11c      	bne.n	80014f4 <HAL_SPI_TransmitReceive+0x21c>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2246      	movs	r2, #70	; 0x46
 80014be:	5a9b      	ldrh	r3, [r3, r2]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	b292      	uxth	r2, r2
 80014d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	1c9a      	adds	r2, r3, #2
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2246      	movs	r2, #70	; 0x46
 80014e2:	5a9b      	ldrh	r3, [r3, r2]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b299      	uxth	r1, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2246      	movs	r2, #70	; 0x46
 80014ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80014f0:	2301      	movs	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80014f4:	f7fe ff8a 	bl	800040c <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001500:	429a      	cmp	r2, r3
 8001502:	d80b      	bhi.n	800151c <HAL_SPI_TransmitReceive+0x244>
 8001504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001506:	3301      	adds	r3, #1
 8001508:	d008      	beq.n	800151c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800150a:	2323      	movs	r3, #35	; 0x23
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2203      	movs	r2, #3
 8001510:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	225d      	movs	r2, #93	; 0x5d
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]
        goto error;
 800151a:	e0b1      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d19f      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x18e>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2246      	movs	r2, #70	; 0x46
 800152a:	5a9b      	ldrh	r3, [r3, r2]
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d199      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x18e>
 8001532:	e089      	b.n	8001648 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_SPI_TransmitReceive+0x270>
 800153c:	2312      	movs	r3, #18
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d000      	beq.n	8001548 <HAL_SPI_TransmitReceive+0x270>
 8001546:	e074      	b.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	330c      	adds	r3, #12
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800156e:	e060      	b.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d11c      	bne.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	2b01      	cmp	r3, #1
 800158c:	d114      	bne.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	330c      	adds	r3, #12
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d11e      	bne.n	8001604 <HAL_SPI_TransmitReceive+0x32c>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2246      	movs	r2, #70	; 0x46
 80015ca:	5a9b      	ldrh	r3, [r3, r2]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d018      	beq.n	8001604 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	330c      	adds	r3, #12
 80015d8:	001a      	movs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2246      	movs	r2, #70	; 0x46
 80015f2:	5a9b      	ldrh	r3, [r3, r2]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b299      	uxth	r1, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2246      	movs	r2, #70	; 0x46
 80015fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001600:	2301      	movs	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001604:	f7fe ff02 	bl	800040c <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001610:	429a      	cmp	r2, r3
 8001612:	d802      	bhi.n	800161a <HAL_SPI_TransmitReceive+0x342>
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	3301      	adds	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_SPI_TransmitReceive+0x348>
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001620:	2323      	movs	r3, #35	; 0x23
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2203      	movs	r2, #3
 8001626:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	225d      	movs	r2, #93	; 0x5d
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]
        goto error;
 8001630:	e026      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d199      	bne.n	8001570 <HAL_SPI_TransmitReceive+0x298>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2246      	movs	r2, #70	; 0x46
 8001640:	5a9b      	ldrh	r3, [r3, r2]
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d193      	bne.n	8001570 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	0018      	movs	r0, r3
 8001650:	f000 f954 	bl	80018fc <SPI_EndRxTxTransaction>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d006      	beq.n	8001666 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001658:	2323      	movs	r3, #35	; 0x23
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2220      	movs	r2, #32
 8001664:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800166e:	2323      	movs	r3, #35	; 0x23
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e003      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	225d      	movs	r2, #93	; 0x5d
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	225c      	movs	r2, #92	; 0x5c
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001688:	2323      	movs	r3, #35	; 0x23
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b00a      	add	sp, #40	; 0x28
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	ffffefff 	.word	0xffffefff

0800169c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016ac:	f7fe feae 	bl	800040c <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	18d3      	adds	r3, r2, r3
 80016ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80016bc:	f7fe fea6 	bl	800040c <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	0d1b      	lsrs	r3, r3, #20
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	4353      	muls	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016d2:	e058      	b.n	8001786 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	d055      	beq.n	8001786 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80016da:	f7fe fe97 	bl	800040c <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d902      	bls.n	80016f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d142      	bne.n	8001776 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	21e0      	movs	r1, #224	; 0xe0
 80016fc:	438a      	bics	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2382      	movs	r3, #130	; 0x82
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	429a      	cmp	r2, r3
 800170a:	d113      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x98>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	429a      	cmp	r2, r3
 8001716:	d005      	beq.n	8001724 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	019b      	lsls	r3, r3, #6
 800173c:	429a      	cmp	r2, r3
 800173e:	d110      	bne.n	8001762 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	491a      	ldr	r1, [pc, #104]	; (80017b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0189      	lsls	r1, r1, #6
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	225d      	movs	r2, #93	; 0x5d
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	225c      	movs	r2, #92	; 0x5c
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e017      	b.n	80017a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3b01      	subs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	4013      	ands	r3, r2
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	425a      	negs	r2, r3
 8001796:	4153      	adcs	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	001a      	movs	r2, r3
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d197      	bne.n	80016d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b008      	add	sp, #32
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	20000000 	.word	0x20000000
 80017b4:	ffffdfff 	.word	0xffffdfff

080017b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80017ce:	f7fe fe1d 	bl	800040c <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80017de:	f7fe fe15 	bl	800040c <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	330c      	adds	r3, #12
 80017ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	0013      	movs	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	00da      	lsls	r2, r3, #3
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	0d1b      	lsrs	r3, r3, #20
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	4353      	muls	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001804:	e068      	b.n	80018d8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	23c0      	movs	r3, #192	; 0xc0
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	429a      	cmp	r2, r3
 800180e:	d10a      	bne.n	8001826 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d107      	bne.n	8001826 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	2117      	movs	r1, #23
 800181e:	187b      	adds	r3, r7, r1
 8001820:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001822:	187b      	adds	r3, r7, r1
 8001824:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	d055      	beq.n	80018d8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800182c:	f7fe fdee 	bl	800040c <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001838:	429a      	cmp	r2, r3
 800183a:	d902      	bls.n	8001842 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d142      	bne.n	80018c8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	21e0      	movs	r1, #224	; 0xe0
 800184e:	438a      	bics	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	2382      	movs	r3, #130	; 0x82
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	429a      	cmp	r2, r3
 800185c:	d113      	bne.n	8001886 <SPI_WaitFifoStateUntilTimeout+0xce>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	429a      	cmp	r2, r3
 8001868:	d005      	beq.n	8001876 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	429a      	cmp	r2, r3
 8001874:	d107      	bne.n	8001886 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	429a      	cmp	r2, r3
 8001890:	d110      	bne.n	80018b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0189      	lsls	r1, r1, #6
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	225d      	movs	r2, #93	; 0x5d
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	225c      	movs	r2, #92	; 0x5c
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e010      	b.n	80018ea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d18e      	bne.n	8001806 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b00a      	add	sp, #40	; 0x28
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000000 	.word	0x20000000
 80018f8:	ffffdfff 	.word	0xffffdfff

080018fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	0159      	lsls	r1, r3, #5
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	0013      	movs	r3, r2
 8001916:	2200      	movs	r2, #0
 8001918:	f7ff ff4e 	bl	80017b8 <SPI_WaitFifoStateUntilTimeout>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d007      	beq.n	8001930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	2220      	movs	r2, #32
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e027      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	0013      	movs	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	f7ff fead 	bl	800169c <SPI_WaitFlagStateUntilTimeout>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d007      	beq.n	8001956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	2220      	movs	r2, #32
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e014      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	23c0      	movs	r3, #192	; 0xc0
 800195a:	00d9      	lsls	r1, r3, #3
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	0013      	movs	r3, r2
 8001964:	2200      	movs	r2, #0
 8001966:	f7ff ff27 	bl	80017b8 <SPI_WaitFifoStateUntilTimeout>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d007      	beq.n	800197e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	2220      	movs	r2, #32
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e000      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <eve_calibrate>:


/* FUNCTIONS ***********************************************************************/

void eve_calibrate(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af02      	add	r7, sp, #8
	struct touchscreen_calibration calib;
	uint8_t dummy;

	platform_calib_init();
 800198e:	f7fe fc4f 	bl	8000230 <platform_calib_init>

	// If no store of calibration or current screen touch.
//	if ((platform_calib_read(&calib) != 0) || (eve_read_tag(&dummy)))
//	{
		// Wait for end of touch.
		while (eve_read_tag(&dummy));
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	0018      	movs	r0, r3
 8001998:	f000 f9b0 	bl	8001cfc <eve_read_tag>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d1f9      	bne.n	8001994 <eve_calibrate+0xc>

		EVE_LIB_BeginCoProList();
 80019a0:	f000 fdf0 	bl	8002584 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 80019a4:	f000 ff00 	bl	80027a8 <EVE_CMD_DLSTART>
		EVE_CLEAR_COLOR_RGB(0, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2000      	movs	r0, #0
 80019ae:	f000 fe3f 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
		EVE_CLEAR(1,1,1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f000 fe60 	bl	800267c <EVE_CLEAR>
		EVE_COLOR_RGB(255, 255, 255);
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	21ff      	movs	r1, #255	; 0xff
 80019c0:	20ff      	movs	r0, #255	; 0xff
 80019c2:	f000 fe87 	bl	80026d4 <EVE_COLOR_RGB>
		EVE_CMD_TEXT(EVE_DISP_WIDTH/2, EVE_DISP_HEIGHT/2,
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	00da      	lsls	r2, r3, #3
 80019ca:	23c8      	movs	r3, #200	; 0xc8
 80019cc:	0058      	lsls	r0, r3, #1
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <eve_calibrate+0xc8>)
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	0013      	movs	r3, r2
 80019d4:	221c      	movs	r2, #28
 80019d6:	21f0      	movs	r1, #240	; 0xf0
 80019d8:	f000 ff22 	bl	8002820 <EVE_CMD_TEXT>
				28, EVE_OPT_CENTERX | EVE_OPT_CENTERY,"Please tap on the dots");
		EVE_CMD_CALIBRATE(0);
 80019dc:	2000      	movs	r0, #0
 80019de:	f000 fece 	bl	800277e <EVE_CMD_CALIBRATE>
		EVE_LIB_EndCoProList();
 80019e2:	f000 fde3 	bl	80025ac <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 80019e6:	f000 fdeb 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

		calib.transform[0] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_A);
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <eve_calibrate+0xcc>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 f979 	bl	8002ce4 <HAL_MemRead32>
 80019f2:	0002      	movs	r2, r0
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	605a      	str	r2, [r3, #4]
		calib.transform[1] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_B);
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <eve_calibrate+0xd0>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f001 f972 	bl	8002ce4 <HAL_MemRead32>
 8001a00:	0002      	movs	r2, r0
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	609a      	str	r2, [r3, #8]
		calib.transform[2] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_C);
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <eve_calibrate+0xd4>)
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 f96b 	bl	8002ce4 <HAL_MemRead32>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	60da      	str	r2, [r3, #12]
		calib.transform[3] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_D);
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <eve_calibrate+0xd8>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f001 f964 	bl	8002ce4 <HAL_MemRead32>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	611a      	str	r2, [r3, #16]
		calib.transform[4] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_E);
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <eve_calibrate+0xdc>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f001 f95d 	bl	8002ce4 <HAL_MemRead32>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	615a      	str	r2, [r3, #20]
		calib.transform[5] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_F);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <eve_calibrate+0xe0>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 f956 	bl	8002ce4 <HAL_MemRead32>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	619a      	str	r2, [r3, #24]
		platform_calib_write(&calib);
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe fbfb 	bl	800023c <platform_calib_write>
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_C, calib.transform[2]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_D, calib.transform[3]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_E, calib.transform[4]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_F, calib.transform[5]);
	//}
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b008      	add	sp, #32
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	08002ef8 	.word	0x08002ef8
 8001a54:	00302150 	.word	0x00302150
 8001a58:	00302154 	.word	0x00302154
 8001a5c:	00302158 	.word	0x00302158
 8001a60:	0030215c 	.word	0x0030215c
 8001a64:	00302160 	.word	0x00302160
 8001a68:	00302164 	.word	0x00302164

08001a6c <Flash_Full_Speed>:
// #######################################################                     Code to set flash to fast mode                         ###################################################################
// ######################################################################################################################################################################################################


void Flash_Full_Speed(void)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af02      	add	r7, sp, #8
	uint8_t Flash_Status = 0;
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

	// Detach Flash
	EVE_LIB_BeginCoProList();
 8001a78:	f000 fd84 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_FLASHDETATCH();
 8001a7c:	f000 ff9d 	bl	80029ba <EVE_CMD_FLASHDETATCH>
	EVE_LIB_EndCoProList();
 8001a80:	f000 fd94 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001a84:	f000 fd9c 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

	Flash_Status = HAL_MemRead8(EVE_REG_FLASH_STATUS);
 8001a88:	1dfc      	adds	r4, r7, #7
 8001a8a:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <Flash_Full_Speed+0x1b0>)
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f001 f95a 	bl	8002d46 <HAL_MemRead8>
 8001a92:	0003      	movs	r3, r0
 8001a94:	7023      	strb	r3, [r4, #0]

	if (EVE_FLASH_STATUS_DETACHED != Flash_Status)
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d030      	beq.n	8001b00 <Flash_Full_Speed+0x94>
	{
		EVE_LIB_BeginCoProList();
 8001a9e:	f000 fd71 	bl	8002584 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 8001aa2:	f000 fe81 	bl	80027a8 <EVE_CMD_DLSTART>
		EVE_CLEAR_COLOR_RGB(255, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	20ff      	movs	r0, #255	; 0xff
 8001aac:	f000 fdc0 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
		EVE_CLEAR(1,1,1);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f000 fde1 	bl	800267c <EVE_CLEAR>
		EVE_COLOR_RGB(255,255,255);
 8001aba:	22ff      	movs	r2, #255	; 0xff
 8001abc:	21ff      	movs	r1, #255	; 0xff
 8001abe:	20ff      	movs	r0, #255	; 0xff
 8001ac0:	f000 fe08 	bl	80026d4 <EVE_COLOR_RGB>
		EVE_CMD_TEXT(100, 50, 28, 0, "Error detaching flash");
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <Flash_Full_Speed+0x1b4>)
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	221c      	movs	r2, #28
 8001acc:	2132      	movs	r1, #50	; 0x32
 8001ace:	2064      	movs	r0, #100	; 0x64
 8001ad0:	f000 fea6 	bl	8002820 <EVE_CMD_TEXT>
		EVE_CMD_TEXT(100,100, 28, EVE_OPT_FORMAT, "Mode is %d ", Flash_Status);
 8001ad4:	1dfb      	adds	r3, r7, #7
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	0152      	lsls	r2, r2, #5
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <Flash_Full_Speed+0x1b8>)
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	0013      	movs	r3, r2
 8001ae4:	221c      	movs	r2, #28
 8001ae6:	2164      	movs	r1, #100	; 0x64
 8001ae8:	2064      	movs	r0, #100	; 0x64
 8001aea:	f000 fe99 	bl	8002820 <EVE_CMD_TEXT>
		EVE_DISPLAY();
 8001aee:	f000 fe2e 	bl	800274e <EVE_DISPLAY>
		EVE_CMD_SWAP();
 8001af2:	f000 fe37 	bl	8002764 <EVE_CMD_SWAP>
		EVE_LIB_EndCoProList();
 8001af6:	f000 fd59 	bl	80025ac <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 8001afa:	f000 fd61 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>
		while(1)
 8001afe:	e7fe      	b.n	8001afe <Flash_Full_Speed+0x92>
		{
		}
	}

	// Attach
	EVE_LIB_BeginCoProList();
 8001b00:	f000 fd40 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_FLASHATTACH();
 8001b04:	f000 ff4c 	bl	80029a0 <EVE_CMD_FLASHATTACH>
	EVE_LIB_EndCoProList();
 8001b08:	f000 fd50 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001b0c:	f000 fd58 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

	Flash_Status = HAL_MemRead8(EVE_REG_FLASH_STATUS);
 8001b10:	1dfc      	adds	r4, r7, #7
 8001b12:	4b42      	ldr	r3, [pc, #264]	; (8001c1c <Flash_Full_Speed+0x1b0>)
 8001b14:	0018      	movs	r0, r3
 8001b16:	f001 f916 	bl	8002d46 <HAL_MemRead8>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	7023      	strb	r3, [r4, #0]

	if (EVE_FLASH_STATUS_BASIC != Flash_Status)
 8001b1e:	1dfb      	adds	r3, r7, #7
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d030      	beq.n	8001b88 <Flash_Full_Speed+0x11c>
	{
		EVE_LIB_BeginCoProList();
 8001b26:	f000 fd2d 	bl	8002584 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 8001b2a:	f000 fe3d 	bl	80027a8 <EVE_CMD_DLSTART>
		EVE_CLEAR_COLOR_RGB(0, 255, 0);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	21ff      	movs	r1, #255	; 0xff
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 fd7c 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
		EVE_CLEAR(1,1,1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	f000 fd9d 	bl	800267c <EVE_CLEAR>
		EVE_COLOR_RGB(255,255,255);
 8001b42:	22ff      	movs	r2, #255	; 0xff
 8001b44:	21ff      	movs	r1, #255	; 0xff
 8001b46:	20ff      	movs	r0, #255	; 0xff
 8001b48:	f000 fdc4 	bl	80026d4 <EVE_COLOR_RGB>
		EVE_CMD_TEXT(100, 50, 28, 0, "Error attaching flash");
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <Flash_Full_Speed+0x1bc>)
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2300      	movs	r3, #0
 8001b52:	221c      	movs	r2, #28
 8001b54:	2132      	movs	r1, #50	; 0x32
 8001b56:	2064      	movs	r0, #100	; 0x64
 8001b58:	f000 fe62 	bl	8002820 <EVE_CMD_TEXT>
		EVE_CMD_TEXT(100,100, 28, EVE_OPT_FORMAT, "Mode is %d ", Flash_Status);
 8001b5c:	1dfb      	adds	r3, r7, #7
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	0152      	lsls	r2, r2, #5
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <Flash_Full_Speed+0x1b8>)
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	221c      	movs	r2, #28
 8001b6e:	2164      	movs	r1, #100	; 0x64
 8001b70:	2064      	movs	r0, #100	; 0x64
 8001b72:	f000 fe55 	bl	8002820 <EVE_CMD_TEXT>
		EVE_DISPLAY();
 8001b76:	f000 fdea 	bl	800274e <EVE_DISPLAY>
		EVE_CMD_SWAP();
 8001b7a:	f000 fdf3 	bl	8002764 <EVE_CMD_SWAP>
		EVE_LIB_EndCoProList();
 8001b7e:	f000 fd15 	bl	80025ac <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 8001b82:	f000 fd1d 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>
		while(1)
 8001b86:	e7fe      	b.n	8001b86 <Flash_Full_Speed+0x11a>
		{
		}
	}

	// Fast mode
	EVE_LIB_BeginCoProList();
 8001b88:	f000 fcfc 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_FLASHFAST(0);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f000 fef3 	bl	8002978 <EVE_CMD_FLASHFAST>
	EVE_LIB_EndCoProList();
 8001b92:	f000 fd0b 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001b96:	f000 fd13 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

	Flash_Status = HAL_MemRead8(EVE_REG_FLASH_STATUS);
 8001b9a:	1dfc      	adds	r4, r7, #7
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <Flash_Full_Speed+0x1b0>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f001 f8d1 	bl	8002d46 <HAL_MemRead8>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	7023      	strb	r3, [r4, #0]

	if (EVE_FLASH_STATUS_FULL != Flash_Status)
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	d030      	beq.n	8001c12 <Flash_Full_Speed+0x1a6>
	{

		EVE_LIB_BeginCoProList();
 8001bb0:	f000 fce8 	bl	8002584 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 8001bb4:	f000 fdf8 	bl	80027a8 <EVE_CMD_DLSTART>
		EVE_CLEAR(1,1,1);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2101      	movs	r1, #1
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	f000 fd5d 	bl	800267c <EVE_CLEAR>
		EVE_CLEAR_COLOR_RGB(0, 0, 255);
 8001bc2:	22ff      	movs	r2, #255	; 0xff
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 fd32 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
		EVE_COLOR_RGB(255,255,255);
 8001bcc:	22ff      	movs	r2, #255	; 0xff
 8001bce:	21ff      	movs	r1, #255	; 0xff
 8001bd0:	20ff      	movs	r0, #255	; 0xff
 8001bd2:	f000 fd7f 	bl	80026d4 <EVE_COLOR_RGB>
		EVE_CMD_TEXT(100, 50, 28, 0, "Error going to full mode");
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <Flash_Full_Speed+0x1c0>)
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	221c      	movs	r2, #28
 8001bde:	2132      	movs	r1, #50	; 0x32
 8001be0:	2064      	movs	r0, #100	; 0x64
 8001be2:	f000 fe1d 	bl	8002820 <EVE_CMD_TEXT>
		EVE_CMD_TEXT(100,100, 28, EVE_OPT_FORMAT, "Mode is %d ", Flash_Status);
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2280      	movs	r2, #128	; 0x80
 8001bec:	0152      	lsls	r2, r2, #5
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <Flash_Full_Speed+0x1b8>)
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	0013      	movs	r3, r2
 8001bf6:	221c      	movs	r2, #28
 8001bf8:	2164      	movs	r1, #100	; 0x64
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	f000 fe10 	bl	8002820 <EVE_CMD_TEXT>
		EVE_DISPLAY();
 8001c00:	f000 fda5 	bl	800274e <EVE_DISPLAY>
		EVE_CMD_SWAP();
 8001c04:	f000 fdae 	bl	8002764 <EVE_CMD_SWAP>
		EVE_LIB_EndCoProList();
 8001c08:	f000 fcd0 	bl	80025ac <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 8001c0c:	f000 fcd8 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>
		while(1)
 8001c10:	e7fe      	b.n	8001c10 <Flash_Full_Speed+0x1a4>
		{
		}
	}
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b003      	add	sp, #12
 8001c18:	bd90      	pop	{r4, r7, pc}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	003025f0 	.word	0x003025f0
 8001c20:	08002f10 	.word	0x08002f10
 8001c24:	08002f28 	.word	0x08002f28
 8001c28:	08002f34 	.word	0x08002f34
 8001c2c:	08002f4c 	.word	0x08002f4c

08001c30 <eve_display_anim>:


#ifdef __ANIM__

void eve_display_anim(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af02      	add	r7, sp, #8
	Flash_Full_Speed();
 8001c36:	f7ff ff19 	bl	8001a6c <Flash_Full_Speed>
	//object   8609600   384

	#define ANIM_OBJ_ADDR     (8609600) // address of "abstract.anim.object" from *.map after generating Flash
	#define FRAME_COUNT       (40)

	EVE_LIB_BeginCoProList();														// Begin new screen
 8001c3a:	f000 fca3 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();																// Tell co-processor to create new Display List
 8001c3e:	f000 fdb3 	bl	80027a8 <EVE_CMD_DLSTART>
	EVE_CLEAR_COLOR_RGB(0x00, 0x00, 0x00);											// Specify color to clear screen
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	2000      	movs	r0, #0
 8001c48:	f000 fcf2 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
	EVE_CLEAR(1, 1, 1);																// Clear color, stencil, and tag buffer
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 fd13 	bl	800267c <EVE_CLEAR>
	EVE_COLOR_RGB(255, 255, 255);
 8001c56:	22ff      	movs	r2, #255	; 0xff
 8001c58:	21ff      	movs	r1, #255	; 0xff
 8001c5a:	20ff      	movs	r0, #255	; 0xff
 8001c5c:	f000 fd3a 	bl	80026d4 <EVE_COLOR_RGB>
	EVE_CMD_TEXT(400, 240, 30, EVE_OPT_CENTER, "Animation");
 8001c60:	23c0      	movs	r3, #192	; 0xc0
 8001c62:	00da      	lsls	r2, r3, #3
 8001c64:	23c8      	movs	r3, #200	; 0xc8
 8001c66:	0058      	lsls	r0, r3, #1
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <eve_display_anim+0xac>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	221e      	movs	r2, #30
 8001c70:	21f0      	movs	r1, #240	; 0xf0
 8001c72:	f000 fdd5 	bl	8002820 <EVE_CMD_TEXT>
	EVE_DISPLAY();																	// Tell EVE that this is end of list
 8001c76:	f000 fd6a 	bl	800274e <EVE_DISPLAY>
	EVE_CMD_SWAP();																	// Swap buffers in EVE to make this list active
 8001c7a:	f000 fd73 	bl	8002764 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();															// Finish the co-processor list burst write
 8001c7e:	f000 fc95 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();														// Wait until co-processor has consumed all commands
 8001c82:	f000 fc9d 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

	MCU_Delay_500ms();
 8001c86:	f000 fa62 	bl	800214e <MCU_Delay_500ms>

	while(1)
	{
		for (int frame = 0; frame < FRAME_COUNT; frame++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	e020      	b.n	8001cd2 <eve_display_anim+0xa2>
		{
			EVE_LIB_BeginCoProList();														// Begin new screen
 8001c90:	f000 fc78 	bl	8002584 <EVE_LIB_BeginCoProList>
			EVE_CMD_DLSTART();																// Tell co-processor to create new Display List
 8001c94:	f000 fd88 	bl	80027a8 <EVE_CMD_DLSTART>

			// -------- Clear the screen --------
			EVE_CLEAR_COLOR_RGB(0x00, 0x00, 0x00);											// Specify color to clear screen to (blue)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 fcc7 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
			EVE_CLEAR(1, 1, 1);																// Clear color, stencil, and tag buffer
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 fce8 	bl	800267c <EVE_CLEAR>

			EVE_CMD_ANIMFRAME(400, 240, ANIM_OBJ_ADDR, frame);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <eve_display_anim+0xb0>)
 8001cb0:	22c8      	movs	r2, #200	; 0xc8
 8001cb2:	0050      	lsls	r0, r2, #1
 8001cb4:	000a      	movs	r2, r1
 8001cb6:	21f0      	movs	r1, #240	; 0xf0
 8001cb8:	f000 fe8c 	bl	80029d4 <EVE_CMD_ANIMFRAME>

			// -------- Finish the display list with the DISPLAY command and then swap to make it active on the screen --------

			EVE_DISPLAY();																	// Tell EVE that this is end of list
 8001cbc:	f000 fd47 	bl	800274e <EVE_DISPLAY>
			EVE_CMD_SWAP();																	// Swap buffers in EVE to make this list active
 8001cc0:	f000 fd50 	bl	8002764 <EVE_CMD_SWAP>

			EVE_LIB_EndCoProList();															// Finish the co-processor list burst write
 8001cc4:	f000 fc72 	bl	80025ac <EVE_LIB_EndCoProList>
			EVE_LIB_AwaitCoProEmpty();														// Wait until co-processor has consumed all commands
 8001cc8:	f000 fc7a 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>
		for (int frame = 0; frame < FRAME_COUNT; frame++)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b27      	cmp	r3, #39	; 0x27
 8001cd6:	dddb      	ble.n	8001c90 <eve_display_anim+0x60>
 8001cd8:	e7d7      	b.n	8001c8a <eve_display_anim+0x5a>
 8001cda:	46c0      	nop			; (mov r8, r8)
 8001cdc:	08002f68 	.word	0x08002f68
 8001ce0:	00835f40 	.word	0x00835f40

08001ce4 <eve_example>:
#endif



void eve_example(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	// Initialise the display
	EVE_Init();
 8001ce8:	f000 fb32 	bl	8002350 <EVE_Init>

	// Calibrate the display
	eve_calibrate();
 8001cec:	f7ff fe4c 	bl	8001988 <eve_calibrate>

	// Start example code
#if defined __CHART__
	eve_display();
#elif defined __ANIM__
	eve_display_anim();
 8001cf0:	f7ff ff9e 	bl	8001c30 <eve_display_anim>
#elif defined __VID__
	eve_display_vid();
#endif

}
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <eve_read_tag>:
#include "HAL.h"

#include "eve_example.h"

uint8_t eve_read_tag(uint8_t *key)
{
 8001cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	uint8_t Read_tag;
	uint8_t key_detect = 0;
 8001d04:	250f      	movs	r5, #15
 8001d06:	197b      	adds	r3, r7, r5
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

	Read_tag = HAL_MemRead8(EVE_REG_TOUCH_TAG);
 8001d0c:	260e      	movs	r6, #14
 8001d0e:	19bc      	adds	r4, r7, r6
 8001d10:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <eve_read_tag+0x4c>)
 8001d12:	0018      	movs	r0, r3
 8001d14:	f001 f817 	bl	8002d46 <HAL_MemRead8>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	7023      	strb	r3, [r4, #0]

	if (!(HAL_MemRead16(EVE_REG_TOUCH_RAW_XY) & 0x8000))
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <eve_read_tag+0x50>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 fff7 	bl	8002d12 <HAL_MemRead16>
 8001d24:	0003      	movs	r3, r0
 8001d26:	b21b      	sxth	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db06      	blt.n	8001d3a <eve_read_tag+0x3e>
	{
		key_detect = 1;
 8001d2c:	197b      	adds	r3, r7, r5
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
		*key = Read_tag;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	19ba      	adds	r2, r7, r6
 8001d36:	7812      	ldrb	r2, [r2, #0]
 8001d38:	701a      	strb	r2, [r3, #0]
	}

	return key_detect;
 8001d3a:	230f      	movs	r3, #15
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	781b      	ldrb	r3, [r3, #0]
}
 8001d40:	0018      	movs	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	b005      	add	sp, #20
 8001d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d48:	0030212c 	.word	0x0030212c
 8001d4c:	0030211c 	.word	0x0030211c

08001d50 <MCU_Init>:




void MCU_Init(void)
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b098      	sub	sp, #96	; 0x60
 8001d54:	af00      	add	r7, sp, #0
	  * @brief System Clock Configuration
	  * @retval None
	  */
//	void SystemClock_Config(void)
//	{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d56:	2430      	movs	r4, #48	; 0x30
 8001d58:	193b      	adds	r3, r7, r4
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	2330      	movs	r3, #48	; 0x30
 8001d5e:	001a      	movs	r2, r3
 8001d60:	2100      	movs	r1, #0
 8001d62:	f001 f8a7 	bl	8002eb4 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d66:	2520      	movs	r5, #32
 8001d68:	197b      	adds	r3, r7, r5
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	2310      	movs	r3, #16
 8001d6e:	001a      	movs	r2, r3
 8001d70:	2100      	movs	r1, #0
 8001d72:	f001 f89f 	bl	8002eb4 <memset>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d76:	0021      	movs	r1, r4
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	2201      	movs	r2, #1
 8001d82:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	2210      	movs	r2, #16
 8001d88:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	621a      	str	r2, [r3, #32]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2200      	movs	r2, #0
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	22a0      	movs	r2, #160	; 0xa0
 8001d9a:	0392      	lsls	r2, r2, #14
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7fe fda0 	bl	80008ec <HAL_RCC_OscConfig>
//	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dac:	0029      	movs	r1, r5
 8001dae:	187b      	adds	r3, r7, r1
 8001db0:	2207      	movs	r2, #7
 8001db2:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	2202      	movs	r2, #2
 8001db8:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dc0:	187b      	adds	r3, r7, r1
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	60da      	str	r2, [r3, #12]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001dc6:	187b      	adds	r3, r7, r1
 8001dc8:	2101      	movs	r1, #1
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f7ff f8a8 	bl	8000f20 <HAL_RCC_ClockConfig>
	    * @param None
	    * @retval None
	    */
//	  static void MX_GPIO_Init(void)
//	  {
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	240c      	movs	r4, #12
 8001dd2:	193b      	adds	r3, r7, r4
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	2314      	movs	r3, #20
 8001dd8:	001a      	movs	r2, r3
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f001 f86a 	bl	8002eb4 <memset>
	  /* USER CODE BEGIN MX_GPIO_Init_1 */
	  /* USER CODE END MX_GPIO_Init_1 */

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de0:	4b52      	ldr	r3, [pc, #328]	; (8001f2c <MCU_Init+0x1dc>)
 8001de2:	695a      	ldr	r2, [r3, #20]
 8001de4:	4b51      	ldr	r3, [pc, #324]	; (8001f2c <MCU_Init+0x1dc>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	0289      	lsls	r1, r1, #10
 8001dea:	430a      	orrs	r2, r1
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	4b4f      	ldr	r3, [pc, #316]	; (8001f2c <MCU_Init+0x1dc>)
 8001df0:	695a      	ldr	r2, [r3, #20]
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	029b      	lsls	r3, r3, #10
 8001df6:	4013      	ands	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <MCU_Init+0x1dc>)
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <MCU_Init+0x1dc>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0309      	lsls	r1, r1, #12
 8001e06:	430a      	orrs	r2, r1
 8001e08:	615a      	str	r2, [r3, #20]
 8001e0a:	4b48      	ldr	r3, [pc, #288]	; (8001f2c <MCU_Init+0x1dc>)
 8001e0c:	695a      	ldr	r2, [r3, #20]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	031b      	lsls	r3, r3, #12
 8001e12:	4013      	ands	r3, r2
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e18:	4b44      	ldr	r3, [pc, #272]	; (8001f2c <MCU_Init+0x1dc>)
 8001e1a:	695a      	ldr	r2, [r3, #20]
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <MCU_Init+0x1dc>)
 8001e1e:	2180      	movs	r1, #128	; 0x80
 8001e20:	02c9      	lsls	r1, r1, #11
 8001e22:	430a      	orrs	r2, r1
 8001e24:	615a      	str	r2, [r3, #20]
 8001e26:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <MCU_Init+0x1dc>)
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	02db      	lsls	r3, r3, #11
 8001e2e:	4013      	ands	r3, r2
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	683b      	ldr	r3, [r7, #0]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	483d      	ldr	r0, [pc, #244]	; (8001f30 <MCU_Init+0x1e0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	f7fe fd37 	bl	80008b0 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e42:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <MCU_Init+0x1e4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	21c0      	movs	r1, #192	; 0xc0
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f7fe fd31 	bl	80008b0 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : B1_Pin */
	    GPIO_InitStruct.Pin = B1_Pin;
 8001e4e:	193b      	adds	r3, r7, r4
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e54:	193b      	adds	r3, r7, r4
 8001e56:	2290      	movs	r2, #144	; 0x90
 8001e58:	0352      	lsls	r2, r2, #13
 8001e5a:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	193b      	adds	r3, r7, r4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
	    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e62:	193a      	adds	r2, r7, r4
 8001e64:	2390      	movs	r3, #144	; 0x90
 8001e66:	05db      	lsls	r3, r3, #23
 8001e68:	0011      	movs	r1, r2
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f7fe fbb0 	bl	80005d0 <HAL_GPIO_Init>

	    /*Configure GPIO pins : LD4_Pin LD3_Pin */
	    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8001e70:	0021      	movs	r1, r4
 8001e72:	187b      	adds	r3, r7, r1
 8001e74:	22c0      	movs	r2, #192	; 0xc0
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	000c      	movs	r4, r1
 8001e7c:	193b      	adds	r3, r7, r4
 8001e7e:	2201      	movs	r2, #1
 8001e80:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e88:	193b      	adds	r3, r7, r4
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	4a27      	ldr	r2, [pc, #156]	; (8001f30 <MCU_Init+0x1e0>)
 8001e92:	0019      	movs	r1, r3
 8001e94:	0010      	movs	r0, r2
 8001e96:	f7fe fb9b 	bl	80005d0 <HAL_GPIO_Init>

	    /*Configure GPIO pins : PB6 PB7 */
	    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e9a:	0021      	movs	r1, r4
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	22c0      	movs	r2, #192	; 0xc0
 8001ea0:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	187b      	adds	r3, r7, r1
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	187b      	adds	r3, r7, r1
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <MCU_Init+0x1e4>)
 8001eb8:	0019      	movs	r1, r3
 8001eba:	0010      	movs	r0, r2
 8001ebc:	f7fe fb88 	bl	80005d0 <HAL_GPIO_Init>



	    /* USER CODE END SPI1_Init 1 */
	    /* SPI1 parameter configuration*/
	    SpiHandle.Instance = SPI1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <MCU_Init+0x1e8>)
 8001ec2:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <MCU_Init+0x1ec>)
 8001ec4:	601a      	str	r2, [r3, #0]
	    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <MCU_Init+0x1e8>)
 8001ec8:	2282      	movs	r2, #130	; 0x82
 8001eca:	0052      	lsls	r2, r2, #1
 8001ecc:	605a      	str	r2, [r3, #4]
	    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MCU_Init+0x1e8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
	    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ed4:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MCU_Init+0x1e8>)
 8001ed6:	22e0      	movs	r2, #224	; 0xe0
 8001ed8:	00d2      	lsls	r2, r2, #3
 8001eda:	60da      	str	r2, [r3, #12]
	    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MCU_Init+0x1e8>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
	    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <MCU_Init+0x1e8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	615a      	str	r2, [r3, #20]
	    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <MCU_Init+0x1e8>)
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	0092      	lsls	r2, r2, #2
 8001eee:	619a      	str	r2, [r3, #24]
	    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;//8;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MCU_Init+0x1e8>)
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	61da      	str	r2, [r3, #28]
	    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MCU_Init+0x1e8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
	    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MCU_Init+0x1e8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
	    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MCU_Init+0x1e8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
	    SpiHandle.Init.CRCPolynomial = 7;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MCU_Init+0x1e8>)
 8001f0a:	2207      	movs	r2, #7
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
	    SpiHandle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MCU_Init+0x1e8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
	    SpiHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MCU_Init+0x1e8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
	    if (HAL_SPI_Init(&SpiHandle) != HAL_OK)
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MCU_Init+0x1e8>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff f923 	bl	8001168 <HAL_SPI_Init>





}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b018      	add	sp, #96	; 0x60
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000400 	.word	0x48000400
 8001f38:	2000002c 	.word	0x2000002c
 8001f3c:	40013000 	.word	0x40013000

08001f40 <MCU_Setup>:

void MCU_Setup(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
#ifdef FT81X_ENABLE
#endif // FT81X_ENABLE
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <MCU_CSlow>:

// ########################### GPIO CONTROL ####################################

// --------------------- Chip Select line low ----------------------------------
inline void MCU_CSlow(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //lo
 8001f50:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <MCU_CSlow+0x18>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	2140      	movs	r1, #64	; 0x40
 8001f56:	0018      	movs	r0, r3
 8001f58:	f7fe fcaa 	bl	80008b0 <HAL_GPIO_WritePin>
  //Nop();
}
 8001f5c:	46c0      	nop			; (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	48000400 	.word	0x48000400

08001f68 <MCU_CShigh>:


// --------------------- Chip Select line high ---------------------------------
inline void MCU_CShigh(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //hi
 8001f6c:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <MCU_CShigh+0x18>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2140      	movs	r1, #64	; 0x40
 8001f72:	0018      	movs	r0, r3
 8001f74:	f7fe fc9c 	bl	80008b0 <HAL_GPIO_WritePin>
  //Nop();
}
 8001f78:	46c0      	nop			; (mov r8, r8)
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	48000400 	.word	0x48000400

08001f84 <MCU_PDlow>:

// -------------------------- PD line low --------------------------------------
inline void MCU_PDlow(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //lo                                                     // PD# line low
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <MCU_PDlow+0x18>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f7fe fc8e 	bl	80008b0 <HAL_GPIO_WritePin>
}
 8001f94:	46c0      	nop			; (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	48000400 	.word	0x48000400

08001fa0 <MCU_PDhigh>:

// ------------------------- PD line high --------------------------------------
inline void MCU_PDhigh(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //hi                                                      // PD# line high
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <MCU_PDhigh+0x18>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	2180      	movs	r1, #128	; 0x80
 8001faa:	0018      	movs	r0, r3
 8001fac:	f7fe fc80 	bl	80008b0 <HAL_GPIO_WritePin>
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	48000400 	.word	0x48000400

08001fbc <MCU_SPIReadWrite8>:

// --------------------- SPI Send and Receive ----------------------------------
uint8_t MCU_SPIReadWrite8(uint8_t DataToWrite)
{
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af02      	add	r7, sp, #8
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
    
	uint8_t DataRead[4];
	uint8_t TxBuffer[4];
	
	 TxBuffer[0] = DataToWrite;
 8001fc8:	2108      	movs	r1, #8
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	1dfa      	adds	r2, r7, #7
 8001fce:	7812      	ldrb	r2, [r2, #0]
 8001fd0:	701a      	strb	r2, [r3, #0]
		
	HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*)TxBuffer, (uint8_t *)DataRead, 1, 5000);
 8001fd2:	240c      	movs	r4, #12
 8001fd4:	193a      	adds	r2, r7, r4
 8001fd6:	1879      	adds	r1, r7, r1
 8001fd8:	4805      	ldr	r0, [pc, #20]	; (8001ff0 <MCU_SPIReadWrite8+0x34>)
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MCU_SPIReadWrite8+0x38>)
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f7ff f97a 	bl	80012d8 <HAL_SPI_TransmitReceive>
    //default:
      //break;
//  }
	   

    return DataRead[0];
 8001fe4:	193b      	adds	r3, r7, r4
 8001fe6:	781b      	ldrb	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b005      	add	sp, #20
 8001fee:	bd90      	pop	{r4, r7, pc}
 8001ff0:	2000002c 	.word	0x2000002c
 8001ff4:	00001388 	.word	0x00001388

08001ff8 <MCU_SPIReadWrite16>:

uint16_t MCU_SPIReadWrite16(uint16_t DataToWrite)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	0002      	movs	r2, r0
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	801a      	strh	r2, [r3, #0]
    uint16_t DataRead = 0;
 8002004:	240e      	movs	r4, #14
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2200      	movs	r2, #0
 800200a:	801a      	strh	r2, [r3, #0]
    DataRead = MCU_SPIReadWrite8((DataToWrite) >> 8) << 8;
 800200c:	1dbb      	adds	r3, r7, #6
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	0018      	movs	r0, r3
 8002018:	f7ff ffd0 	bl	8001fbc <MCU_SPIReadWrite8>
 800201c:	0003      	movs	r3, r0
 800201e:	b29a      	uxth	r2, r3
 8002020:	193b      	adds	r3, r7, r4
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	801a      	strh	r2, [r3, #0]
    DataRead |= MCU_SPIReadWrite8((DataToWrite) & 0xff);
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	0018      	movs	r0, r3
 800202e:	f7ff ffc5 	bl	8001fbc <MCU_SPIReadWrite8>
 8002032:	0003      	movs	r3, r0
 8002034:	b299      	uxth	r1, r3
 8002036:	193b      	adds	r3, r7, r4
 8002038:	193a      	adds	r2, r7, r4
 800203a:	8812      	ldrh	r2, [r2, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	801a      	strh	r2, [r3, #0]
    return MCU_be16toh(DataRead);
 8002040:	193b      	adds	r3, r7, r4
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	0018      	movs	r0, r3
 8002046:	f000 f93e 	bl	80022c6 <MCU_be16toh>
 800204a:	0003      	movs	r3, r0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b005      	add	sp, #20
 8002052:	bd90      	pop	{r4, r7, pc}

08002054 <MCU_SPIReadWrite24>:



uint32_t MCU_SPIReadWrite24(uint32_t DataToWrite)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
    uint32_t DataRead = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
    uint32_t temp;
    

     temp = (MCU_SPIReadWrite8((DataToWrite) >> 24)); //****
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	0e1b      	lsrs	r3, r3, #24
 8002064:	b2db      	uxtb	r3, r3
 8002066:	0018      	movs	r0, r3
 8002068:	f7ff ffa8 	bl	8001fbc <MCU_SPIReadWrite8>
 800206c:	0003      	movs	r3, r0
 800206e:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<24);
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	061b      	lsls	r3, r3, #24
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

     temp = (MCU_SPIReadWrite8((DataToWrite) >> 16));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	b2db      	uxtb	r3, r3
 8002080:	0018      	movs	r0, r3
 8002082:	f7ff ff9b 	bl	8001fbc <MCU_SPIReadWrite8>
 8002086:	0003      	movs	r3, r0
 8002088:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<16);
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	4313      	orrs	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]
     temp = (MCU_SPIReadWrite8((DataToWrite) >> 8));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	b2db      	uxtb	r3, r3
 800209a:	0018      	movs	r0, r3
 800209c:	f7ff ff8e 	bl	8001fbc <MCU_SPIReadWrite8>
 80020a0:	0003      	movs	r3, r0
 80020a2:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<8);
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]

    return MCU_be32toh(DataRead);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f000 f914 	bl	80022de <MCU_be32toh>
 80020b6:	0003      	movs	r3, r0
}
 80020b8:	0018      	movs	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	b004      	add	sp, #16
 80020be:	bd80      	pop	{r7, pc}

080020c0 <MCU_SPIReadWrite32>:


uint32_t MCU_SPIReadWrite32(uint32_t DataToWrite)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    uint32_t DataRead = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
    uint32_t temp;

	temp = (MCU_SPIReadWrite8((DataToWrite) >> 24)); 
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0e1b      	lsrs	r3, r3, #24
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7ff ff72 	bl	8001fbc <MCU_SPIReadWrite8>
 80020d8:	0003      	movs	r3, r0
 80020da:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp << 24);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	061b      	lsls	r3, r3, #24
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
     temp = (MCU_SPIReadWrite8((DataToWrite) >> 16)); 
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0c1b      	lsrs	r3, r3, #16
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ff65 	bl	8001fbc <MCU_SPIReadWrite8>
 80020f2:	0003      	movs	r3, r0
 80020f4:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp << 16);      
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	041b      	lsls	r3, r3, #16
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    DataRead |= (MCU_SPIReadWrite8((DataToWrite) >> 8) << 8);      
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	b2db      	uxtb	r3, r3
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff ff58 	bl	8001fbc <MCU_SPIReadWrite8>
 800210c:	0003      	movs	r3, r0
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	001a      	movs	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4313      	orrs	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
    DataRead |= (MCU_SPIReadWrite8(DataToWrite) & 0xff); 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	b2db      	uxtb	r3, r3
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff ff4d 	bl	8001fbc <MCU_SPIReadWrite8>
 8002122:	0003      	movs	r3, r0
 8002124:	001a      	movs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4313      	orrs	r3, r2
 800212a:	60fb      	str	r3, [r7, #12]
 
    return MCU_be32toh(DataRead);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f8d5 	bl	80022de <MCU_be32toh>
 8002134:	0003      	movs	r3, r0
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}

0800213e <MCU_Delay_20ms>:

void MCU_Delay_20ms(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	af00      	add	r7, sp, #0
    HAL_Delay(20);
 8002142:	2014      	movs	r0, #20
 8002144:	f7fe f96c 	bl	8000420 <HAL_Delay>
	}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <MCU_Delay_500ms>:

void MCU_Delay_500ms(void)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
    uint8_t dly = 0;
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

    for(dly =0; dly < 100; dly++)
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	e007      	b.n	8002172 <MCU_Delay_500ms+0x24>
    {
        HAL_Delay(20);
 8002162:	2014      	movs	r0, #20
 8002164:	f7fe f95c 	bl	8000420 <HAL_Delay>
    for(dly =0; dly < 100; dly++)
 8002168:	1dfb      	adds	r3, r7, #7
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	3201      	adds	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
 8002172:	1dfb      	adds	r3, r7, #7
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b63      	cmp	r3, #99	; 0x63
 8002178:	d9f3      	bls.n	8002162 <MCU_Delay_500ms+0x14>
    }
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b002      	add	sp, #8
 8002182:	bd80      	pop	{r7, pc}

08002184 <MCU_SPIRead8>:


// --------------------- SPI Send and Receive ----------------------------------

uint8_t MCU_SPIRead8(void)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
	uint8_t DataRead = 0;
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	2200      	movs	r2, #0
 800218e:	701a      	strb	r2, [r3, #0]

	DataRead = MCU_SPIReadWrite8(0);
 8002190:	1dfc      	adds	r4, r7, #7
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff ff12 	bl	8001fbc <MCU_SPIReadWrite8>
 8002198:	0003      	movs	r3, r0
 800219a:	7023      	strb	r3, [r4, #0]
    
	return DataRead;
 800219c:	1dfb      	adds	r3, r7, #7
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b003      	add	sp, #12
 80021a6:	bd90      	pop	{r4, r7, pc}

080021a8 <MCU_SPIWrite8>:

void MCU_SPIWrite8(uint8_t DataToWrite)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	0002      	movs	r2, r0
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	701a      	strb	r2, [r3, #0]
	MCU_SPIReadWrite8(DataToWrite);
 80021b4:	1dfb      	adds	r3, r7, #7
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	0018      	movs	r0, r3
 80021ba:	f7ff feff 	bl	8001fbc <MCU_SPIReadWrite8>
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <MCU_SPIRead16>:

uint16_t MCU_SPIRead16(void)
{
 80021c6:	b590      	push	{r4, r7, lr}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
	uint16_t DataRead = 0;
 80021cc:	1dbb      	adds	r3, r7, #6
 80021ce:	2200      	movs	r2, #0
 80021d0:	801a      	strh	r2, [r3, #0]

	DataRead = MCU_SPIReadWrite16(0);
 80021d2:	1dbc      	adds	r4, r7, #6
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff ff0f 	bl	8001ff8 <MCU_SPIReadWrite16>
 80021da:	0003      	movs	r3, r0
 80021dc:	8023      	strh	r3, [r4, #0]

	return DataRead;
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881b      	ldrh	r3, [r3, #0]
}
 80021e2:	0018      	movs	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b003      	add	sp, #12
 80021e8:	bd90      	pop	{r4, r7, pc}

080021ea <MCU_SPIWrite16>:

void MCU_SPIWrite16(uint16_t DataToWrite)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	0002      	movs	r2, r0
 80021f2:	1dbb      	adds	r3, r7, #6
 80021f4:	801a      	strh	r2, [r3, #0]
	MCU_SPIReadWrite16(DataToWrite);
 80021f6:	1dbb      	adds	r3, r7, #6
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	0018      	movs	r0, r3
 80021fc:	f7ff fefc 	bl	8001ff8 <MCU_SPIReadWrite16>
}
 8002200:	46c0      	nop			; (mov r8, r8)
 8002202:	46bd      	mov	sp, r7
 8002204:	b002      	add	sp, #8
 8002206:	bd80      	pop	{r7, pc}

08002208 <MCU_SPIWrite24>:

	return DataRead;
}

void MCU_SPIWrite24(uint32_t DataToWrite)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	MCU_SPIReadWrite24(DataToWrite);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff ff1e 	bl	8002054 <MCU_SPIReadWrite24>
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}

08002220 <MCU_SPIRead32>:

uint32_t MCU_SPIRead32(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
	uint32_t DataRead = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]

	DataRead = MCU_SPIReadWrite32(0);
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff ff48 	bl	80020c0 <MCU_SPIReadWrite32>
 8002230:	0003      	movs	r3, r0
 8002232:	607b      	str	r3, [r7, #4]

	return DataRead;
 8002234:	687b      	ldr	r3, [r7, #4]
}
 8002236:	0018      	movs	r0, r3
 8002238:	46bd      	mov	sp, r7
 800223a:	b002      	add	sp, #8
 800223c:	bd80      	pop	{r7, pc}

0800223e <MCU_SPIWrite32>:

void MCU_SPIWrite32(uint32_t DataToWrite)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b082      	sub	sp, #8
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
	MCU_SPIReadWrite32(DataToWrite);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff ff39 	bl	80020c0 <MCU_SPIReadWrite32>
}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	46bd      	mov	sp, r7
 8002252:	b002      	add	sp, #8
 8002254:	bd80      	pop	{r7, pc}

08002256 <MCU_htobe32>:
{
    return h;
}

uint32_t MCU_htobe32 (uint32_t h)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
    return h;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <MCU_htole16>:

uint16_t MCU_htole16 (uint16_t h)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	0002      	movs	r2, r0
 8002270:	1dbb      	adds	r3, r7, #6
 8002272:	801a      	strh	r2, [r3, #0]

        return bswap16(h); 
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b29b      	uxth	r3, r3
 800227c:	b21a      	sxth	r2, r3
 800227e:	1dbb      	adds	r3, r7, #6
 8002280:	881b      	ldrh	r3, [r3, #0]
 8002282:	021b      	lsls	r3, r3, #8
 8002284:	b21b      	sxth	r3, r3
 8002286:	4313      	orrs	r3, r2
 8002288:	b21b      	sxth	r3, r3
 800228a:	b29b      	uxth	r3, r3
}
 800228c:	0018      	movs	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	b002      	add	sp, #8
 8002292:	bd80      	pop	{r7, pc}

08002294 <MCU_htole32>:

uint32_t MCU_htole32 (uint32_t h)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]

        return bswap32(h);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0e1a      	lsrs	r2, r3, #24
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	0a19      	lsrs	r1, r3, #8
 80022a4:	23ff      	movs	r3, #255	; 0xff
 80022a6:	021b      	lsls	r3, r3, #8
 80022a8:	400b      	ands	r3, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	0219      	lsls	r1, r3, #8
 80022b0:	23ff      	movs	r3, #255	; 0xff
 80022b2:	041b      	lsls	r3, r3, #16
 80022b4:	400b      	ands	r3, r1
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	061b      	lsls	r3, r3, #24
 80022bc:	4313      	orrs	r3, r2
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <MCU_be16toh>:

uint16_t MCU_be16toh (uint16_t h)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	0002      	movs	r2, r0
 80022ce:	1dbb      	adds	r3, r7, #6
 80022d0:	801a      	strh	r2, [r3, #0]
    return h;
 80022d2:	1dbb      	adds	r3, r7, #6
 80022d4:	881b      	ldrh	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b002      	add	sp, #8
 80022dc:	bd80      	pop	{r7, pc}

080022de <MCU_be32toh>:
uint32_t MCU_be32toh (uint32_t h)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
     return h;
 80022e6:	687b      	ldr	r3, [r7, #4]
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <MCU_le16toh>:

uint16_t MCU_le16toh (uint16_t h)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	0002      	movs	r2, r0
 80022f8:	1dbb      	adds	r3, r7, #6
 80022fa:	801a      	strh	r2, [r3, #0]

        return bswap16(h); 
 80022fc:	1dbb      	adds	r3, r7, #6
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	b29b      	uxth	r3, r3
 8002304:	b21a      	sxth	r2, r3
 8002306:	1dbb      	adds	r3, r7, #6
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	b21b      	sxth	r3, r3
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	b29b      	uxth	r3, r3
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}

0800231c <MCU_le32toh>:

uint32_t MCU_le32toh (uint32_t h)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
        return bswap32(h);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0e1a      	lsrs	r2, r3, #24
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0a19      	lsrs	r1, r3, #8
 800232c:	23ff      	movs	r3, #255	; 0xff
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	400b      	ands	r3, r1
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	0219      	lsls	r1, r3, #8
 8002338:	23ff      	movs	r3, #255	; 0xff
 800233a:	041b      	lsls	r3, r3, #16
 800233c:	400b      	ands	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	061b      	lsls	r3, r3, #24
 8002344:	4313      	orrs	r3, r2

}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b002      	add	sp, #8
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <EVE_Init>:
//##############################################################################
// Library functions
//##############################################################################

void EVE_Init(void)
{
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
	uint8_t regGpio;
	int i;

	HAL_EVE_Init();
 8002356:	f000 fb6b 	bl	8002a30 <HAL_EVE_Init>

	// ------------------------- Display settings ------------------------------

	// LCD display parameters
	// Active width of LCD display
	HAL_MemWrite16(EVE_REG_HSIZE,   EVE_DISP_WIDTH);
 800235a:	23c8      	movs	r3, #200	; 0xc8
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4a6f      	ldr	r2, [pc, #444]	; (800251c <EVE_Init+0x1cc>)
 8002360:	0019      	movs	r1, r3
 8002362:	0010      	movs	r0, r2
 8002364:	f000 fc8a 	bl	8002c7c <HAL_MemWrite16>
	// Total number of clocks per line
	HAL_MemWrite16(EVE_REG_HCYCLE,  EVE_DISP_HCYCLE);
 8002368:	23e8      	movs	r3, #232	; 0xe8
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <EVE_Init+0x1d0>)
 800236e:	0019      	movs	r1, r3
 8002370:	0010      	movs	r0, r2
 8002372:	f000 fc83 	bl	8002c7c <HAL_MemWrite16>
	// Start of active line
	HAL_MemWrite16(EVE_REG_HOFFSET, EVE_DISP_HOFFSET);
 8002376:	4b6b      	ldr	r3, [pc, #428]	; (8002524 <EVE_Init+0x1d4>)
 8002378:	2158      	movs	r1, #88	; 0x58
 800237a:	0018      	movs	r0, r3
 800237c:	f000 fc7e 	bl	8002c7c <HAL_MemWrite16>
	// Start of horizontal sync pulse
	HAL_MemWrite16(EVE_REG_HSYNC0,  EVE_DISP_HSYNC0);
 8002380:	4b69      	ldr	r3, [pc, #420]	; (8002528 <EVE_Init+0x1d8>)
 8002382:	2100      	movs	r1, #0
 8002384:	0018      	movs	r0, r3
 8002386:	f000 fc79 	bl	8002c7c <HAL_MemWrite16>
	// End of horizontal sync pulse
	HAL_MemWrite16(EVE_REG_HSYNC1,  EVE_DISP_HSYNC1);
 800238a:	4b68      	ldr	r3, [pc, #416]	; (800252c <EVE_Init+0x1dc>)
 800238c:	2130      	movs	r1, #48	; 0x30
 800238e:	0018      	movs	r0, r3
 8002390:	f000 fc74 	bl	8002c7c <HAL_MemWrite16>
	// Active height of LCD display
	HAL_MemWrite16(EVE_REG_VSIZE,   EVE_DISP_HEIGHT);
 8002394:	23f0      	movs	r3, #240	; 0xf0
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4a65      	ldr	r2, [pc, #404]	; (8002530 <EVE_Init+0x1e0>)
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f000 fc6d 	bl	8002c7c <HAL_MemWrite16>
	// Total number of lines per screen
	HAL_MemWrite16(EVE_REG_VCYCLE,  EVE_DISP_VCYCLE);
 80023a2:	4a64      	ldr	r2, [pc, #400]	; (8002534 <EVE_Init+0x1e4>)
 80023a4:	4b64      	ldr	r3, [pc, #400]	; (8002538 <EVE_Init+0x1e8>)
 80023a6:	0011      	movs	r1, r2
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 fc67 	bl	8002c7c <HAL_MemWrite16>
	// Start of active screen
	HAL_MemWrite16(EVE_REG_VOFFSET, EVE_DISP_VOFFSET);
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <EVE_Init+0x1ec>)
 80023b0:	2120      	movs	r1, #32
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fc62 	bl	8002c7c <HAL_MemWrite16>
	// Start of vertical sync pulse
	HAL_MemWrite16(EVE_REG_VSYNC0,  EVE_DISP_VSYNC0);
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <EVE_Init+0x1f0>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 fc5d 	bl	8002c7c <HAL_MemWrite16>
	// End of vertical sync pulse
	HAL_MemWrite16(EVE_REG_VSYNC1,  EVE_DISP_VSYNC1);
 80023c2:	4b60      	ldr	r3, [pc, #384]	; (8002544 <EVE_Init+0x1f4>)
 80023c4:	2103      	movs	r1, #3
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 fc58 	bl	8002c7c <HAL_MemWrite16>
	// Define RGB output pins
	HAL_MemWrite8(EVE_REG_SWIZZLE,  EVE_DISP_SWIZZLE);
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <EVE_Init+0x1f8>)
 80023ce:	2100      	movs	r1, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 fc6d 	bl	8002cb0 <HAL_MemWrite8>
	// Define active edge of PCLK
	HAL_MemWrite8(EVE_REG_PCLK_POL, EVE_DISP_PCLKPOL);
 80023d6:	4b5d      	ldr	r3, [pc, #372]	; (800254c <EVE_Init+0x1fc>)
 80023d8:	2101      	movs	r1, #1
 80023da:	0018      	movs	r0, r3
 80023dc:	f000 fc68 	bl	8002cb0 <HAL_MemWrite8>
	// Turn on or off CSpread
	HAL_MemWrite8(EVE_REG_CSPREAD,  EVE_DISP_CSPREAD);
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <EVE_Init+0x200>)
 80023e2:	2100      	movs	r1, #0
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 fc63 	bl	8002cb0 <HAL_MemWrite8>
	// Turn on or off Dither
	HAL_MemWrite8(EVE_REG_DITHER,  EVE_DISP_DITHER);
 80023ea:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <EVE_Init+0x204>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fc5e 	bl	8002cb0 <HAL_MemWrite8>

	// Write first display list
	HAL_MemWrite32((EVE_RAM_DL + 0), EVE_ENC_CLEAR_COLOR_RGB(0,0,0));
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	049a      	lsls	r2, r3, #18
 80023f8:	23c0      	movs	r3, #192	; 0xc0
 80023fa:	039b      	lsls	r3, r3, #14
 80023fc:	0011      	movs	r1, r2
 80023fe:	0018      	movs	r0, r3
 8002400:	f000 fc25 	bl	8002c4e <HAL_MemWrite32>
	HAL_MemWrite32((EVE_RAM_DL + 4), EVE_ENC_CLEAR(1,1,1));
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <EVE_Init+0x208>)
 8002406:	4b55      	ldr	r3, [pc, #340]	; (800255c <EVE_Init+0x20c>)
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f000 fc1f 	bl	8002c4e <HAL_MemWrite32>
	HAL_MemWrite32((EVE_RAM_DL + 8), EVE_ENC_DISPLAY());
 8002410:	4b53      	ldr	r3, [pc, #332]	; (8002560 <EVE_Init+0x210>)
 8002412:	2100      	movs	r1, #0
 8002414:	0018      	movs	r0, r3
 8002416:	f000 fc1a 	bl	8002c4e <HAL_MemWrite32>
	HAL_MemWrite8(EVE_REG_DLSWAP, EVE_DLSWAP_FRAME);
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <EVE_Init+0x214>)
 800241c:	2102      	movs	r1, #2
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fc46 	bl	8002cb0 <HAL_MemWrite8>

	// Read the  GPIO register for a read/modify/write operation
	regGpio = HAL_MemRead8(EVE_REG_GPIO);
 8002424:	1cfc      	adds	r4, r7, #3
 8002426:	4b50      	ldr	r3, [pc, #320]	; (8002568 <EVE_Init+0x218>)
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fc8c 	bl	8002d46 <HAL_MemRead8>
 800242e:	0003      	movs	r3, r0
 8002430:	7023      	strb	r3, [r4, #0]
	// set bit 7 of  GPIO register (DISP) - others are inputs
	regGpio = regGpio | 0x80;
 8002432:	1cfb      	adds	r3, r7, #3
 8002434:	1cfa      	adds	r2, r7, #3
 8002436:	7812      	ldrb	r2, [r2, #0]
 8002438:	2180      	movs	r1, #128	; 0x80
 800243a:	4249      	negs	r1, r1
 800243c:	430a      	orrs	r2, r1
 800243e:	701a      	strb	r2, [r3, #0]
	// Enable the DISP signal to the LCD panel
	HAL_MemWrite8(EVE_REG_GPIO, regGpio);
 8002440:	1cfb      	adds	r3, r7, #3
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <EVE_Init+0x218>)
 8002446:	0019      	movs	r1, r3
 8002448:	0010      	movs	r0, r2
 800244a:	f000 fc31 	bl	8002cb0 <HAL_MemWrite8>
	#if (defined EVE4_ENABLE) && (defined SET_PCLK_FREQ)
	HAL_MemWrite16(EVE_REG_PCLK_FREQ,  EVE_DISP_PCLK_FREQ);
	HAL_MemWrite8(EVE_REG_PCLK, 1);
	# else
	// Now start clocking data to the LCD panel
	HAL_MemWrite8(EVE_REG_PCLK, EVE_DISP_PCLK);
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <EVE_Init+0x21c>)
 8002450:	2102      	movs	r1, #2
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fc2c 	bl	8002cb0 <HAL_MemWrite8>
	#endif

	HAL_MemWrite8(EVE_REG_PWM_DUTY, 127);
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <EVE_Init+0x220>)
 800245a:	217f      	movs	r1, #127	; 0x7f
 800245c:	0018      	movs	r0, r3
 800245e:	f000 fc27 	bl	8002cb0 <HAL_MemWrite8>

	// ---------------------- Touch and Audio settings -------------------------
	// Eliminate any false touches
	HAL_MemWrite16(EVE_REG_TOUCH_RZTHRESH, 1200);
 8002462:	2396      	movs	r3, #150	; 0x96
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4a43      	ldr	r2, [pc, #268]	; (8002574 <EVE_Init+0x224>)
 8002468:	0019      	movs	r1, r3
 800246a:	0010      	movs	r0, r2
 800246c:	f000 fc06 	bl	8002c7c <HAL_MemWrite16>

	// turn recorded audio volume down
	HAL_MemWrite8(EVE_REG_VOL_PB, EVE_VOL_ZERO);
 8002470:	4b41      	ldr	r3, [pc, #260]	; (8002578 <EVE_Init+0x228>)
 8002472:	2100      	movs	r1, #0
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fc1b 	bl	8002cb0 <HAL_MemWrite8>
	// turn synthesizer volume down
	HAL_MemWrite8(EVE_REG_VOL_SOUND, EVE_VOL_ZERO);
 800247a:	4b40      	ldr	r3, [pc, #256]	; (800257c <EVE_Init+0x22c>)
 800247c:	2100      	movs	r1, #0
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fc16 	bl	8002cb0 <HAL_MemWrite8>
	// set synthesizer to mute
	HAL_MemWrite16(EVE_REG_SOUND, 0x6000);
 8002484:	23c0      	movs	r3, #192	; 0xc0
 8002486:	01db      	lsls	r3, r3, #7
 8002488:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <EVE_Init+0x230>)
 800248a:	0019      	movs	r1, r3
 800248c:	0010      	movs	r0, r2
 800248e:	f000 fbf5 	bl	8002c7c <HAL_MemWrite16>

	// --------------------- Clear screen ready to start -----------------------
	EVE_LIB_BeginCoProList();
 8002492:	f000 f877 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 8002496:	f000 f987 	bl	80027a8 <EVE_CMD_DLSTART>
	EVE_CLEAR_COLOR_RGB(0, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f8c6 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
	EVE_CLEAR(1,1,1);
 80024a4:	2201      	movs	r2, #1
 80024a6:	2101      	movs	r1, #1
 80024a8:	2001      	movs	r0, #1
 80024aa:	f000 f8e7 	bl	800267c <EVE_CLEAR>
	EVE_DISPLAY();
 80024ae:	f000 f94e 	bl	800274e <EVE_DISPLAY>
	EVE_CMD_SWAP();
 80024b2:	f000 f957 	bl	8002764 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 80024b6:	f000 f879 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 80024ba:	f000 f881 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>


#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)

	// ---------------------- Reset all bitmap properties ------------------------
	EVE_LIB_BeginCoProList();
 80024be:	f000 f861 	bl	8002584 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 80024c2:	f000 f971 	bl	80027a8 <EVE_CMD_DLSTART>
	EVE_CLEAR_COLOR_RGB(0, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	2000      	movs	r0, #0
 80024cc:	f000 f8b0 	bl	8002630 <EVE_CLEAR_COLOR_RGB>
	EVE_CLEAR(1,1,1);
 80024d0:	2201      	movs	r2, #1
 80024d2:	2101      	movs	r1, #1
 80024d4:	2001      	movs	r0, #1
 80024d6:	f000 f8d1 	bl	800267c <EVE_CLEAR>
	for (i = 0; i < 16; i++)
 80024da:	2300      	movs	r3, #0
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	e00d      	b.n	80024fc <EVE_Init+0x1ac>
	{
		EVE_BITMAP_HANDLE(i);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 f91b 	bl	8002720 <EVE_BITMAP_HANDLE>
		EVE_CMD_SETBITMAP(0,0,0,0);
 80024ea:	2300      	movs	r3, #0
 80024ec:	2200      	movs	r2, #0
 80024ee:	2100      	movs	r1, #0
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 fa11 	bl	8002918 <EVE_CMD_SETBITMAP>
	for (i = 0; i < 16; i++)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	3301      	adds	r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	ddee      	ble.n	80024e0 <EVE_Init+0x190>
	}
	EVE_DISPLAY();
 8002502:	f000 f924 	bl	800274e <EVE_DISPLAY>
	EVE_CMD_SWAP();
 8002506:	f000 f92d 	bl	8002764 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 800250a:	f000 f84f 	bl	80025ac <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 800250e:	f000 f857 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>
	EVE_DISPLAY();
	EVE_CMD_SWAP();
	EVE_LIB_EndCoProList();
	EVE_LIB_AwaitCoProEmpty();
#endif
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b003      	add	sp, #12
 8002518:	bd90      	pop	{r4, r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	00302034 	.word	0x00302034
 8002520:	0030202c 	.word	0x0030202c
 8002524:	00302030 	.word	0x00302030
 8002528:	00302038 	.word	0x00302038
 800252c:	0030203c 	.word	0x0030203c
 8002530:	00302048 	.word	0x00302048
 8002534:	0000020d 	.word	0x0000020d
 8002538:	00302040 	.word	0x00302040
 800253c:	00302044 	.word	0x00302044
 8002540:	0030204c 	.word	0x0030204c
 8002544:	00302050 	.word	0x00302050
 8002548:	00302064 	.word	0x00302064
 800254c:	0030206c 	.word	0x0030206c
 8002550:	00302068 	.word	0x00302068
 8002554:	00302060 	.word	0x00302060
 8002558:	26000007 	.word	0x26000007
 800255c:	00300004 	.word	0x00300004
 8002560:	00300008 	.word	0x00300008
 8002564:	00302054 	.word	0x00302054
 8002568:	00302094 	.word	0x00302094
 800256c:	00302070 	.word	0x00302070
 8002570:	003020d4 	.word	0x003020d4
 8002574:	00302118 	.word	0x00302118
 8002578:	00302080 	.word	0x00302080
 800257c:	00302084 	.word	0x00302084
 8002580:	00302088 	.word	0x00302088

08002584 <EVE_LIB_BeginCoProList>:

// Begins co-pro list for display creation
void EVE_LIB_BeginCoProList(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	// Wait for command FIFO to be empty and record current position in FIFO
	EVE_LIB_AwaitCoProEmpty();
 8002588:	f000 f81a 	bl	80025c0 <EVE_LIB_AwaitCoProEmpty>

	// Begins SPI transaction
	HAL_ChipSelect(1);
 800258c:	2001      	movs	r0, #1
 800258e:	f000 faaf 	bl	8002af0 <HAL_ChipSelect>
	// Send address for writing as the next free location in the co-pro buffer
	HAL_SetWriteAddress(EVE_RAM_CMD + HAL_GetCmdPointer());
 8002592:	f000 fc2b 	bl	8002dec <HAL_GetCmdPointer>
 8002596:	0003      	movs	r3, r0
 8002598:	22c2      	movs	r2, #194	; 0xc2
 800259a:	0392      	lsls	r2, r2, #14
 800259c:	4694      	mov	ip, r2
 800259e:	4463      	add	r3, ip
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 facd 	bl	8002b40 <HAL_SetWriteAddress>
}
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <EVE_LIB_EndCoProList>:

// Ends co-pro list for display creation
void EVE_LIB_EndCoProList(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	// End SPI transaction
	HAL_ChipSelect(0);
 80025b0:	2000      	movs	r0, #0
 80025b2:	f000 fa9d 	bl	8002af0 <HAL_ChipSelect>
	// Update the ring buffer pointer to start decode
	HAL_WriteCmdPointer();
 80025b6:	f000 fc23 	bl	8002e00 <HAL_WriteCmdPointer>
}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <EVE_LIB_AwaitCoProEmpty>:

// Waits for the read and write pointers to become equal
void EVE_LIB_AwaitCoProEmpty(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	// Await completion of processing
	HAL_WaitCmdFifoEmpty();
 80025c4:	f000 fc2e 	bl	8002e24 <HAL_WaitCmdFifoEmpty>
}
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <EVE_LIB_SendString>:
	}
}

// Writes a string over SPI
uint16_t EVE_LIB_SendString(const char* string)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	uint16_t length;
	uint16_t CommandSize;

	// Include the terminating null character in the string length.
	// Pad string length to a multiple of 4.
	length = ((strlen(string) + 1) + 3) & (~3);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7fd fd95 	bl	8000108 <strlen>
 80025de:	0003      	movs	r3, r0
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3304      	adds	r3, #4
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	200e      	movs	r0, #14
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	2103      	movs	r1, #3
 80025ec:	438a      	bics	r2, r1
 80025ee:	801a      	strh	r2, [r3, #0]
	// Store command length to return.
	CommandSize = length;
 80025f0:	230c      	movs	r3, #12
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	183a      	adds	r2, r7, r0
 80025f6:	8812      	ldrh	r2, [r2, #0]
 80025f8:	801a      	strh	r2, [r3, #0]

	// Send string as 32 bit data.
	while (length)
 80025fa:	e00d      	b.n	8002618 <EVE_LIB_SendString+0x4a>
	{
		HAL_Write32(*(uint32_t *)string);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 fac2 	bl	8002b8a <HAL_Write32>
		string += 4;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3304      	adds	r3, #4
 800260a:	607b      	str	r3, [r7, #4]
		length -= 4;
 800260c:	220e      	movs	r2, #14
 800260e:	18bb      	adds	r3, r7, r2
 8002610:	18ba      	adds	r2, r7, r2
 8002612:	8812      	ldrh	r2, [r2, #0]
 8002614:	3a04      	subs	r2, #4
 8002616:	801a      	strh	r2, [r3, #0]
	while (length)
 8002618:	230e      	movs	r3, #14
 800261a:	18fb      	adds	r3, r7, r3
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1ec      	bne.n	80025fc <EVE_LIB_SendString+0x2e>
	}

	return CommandSize;
 8002622:	230c      	movs	r3, #12
 8002624:	18fb      	adds	r3, r7, r3
 8002626:	881b      	ldrh	r3, [r3, #0]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b004      	add	sp, #16
 800262e:	bd80      	pop	{r7, pc}

08002630 <EVE_CLEAR_COLOR_RGB>:
	HAL_Write32(c);
	HAL_IncCmdPointer(4);
}

void EVE_CLEAR_COLOR_RGB(uint8_t R, uint8_t G, uint8_t B)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	0004      	movs	r4, r0
 8002638:	0008      	movs	r0, r1
 800263a:	0011      	movs	r1, r2
 800263c:	1dfb      	adds	r3, r7, #7
 800263e:	1c22      	adds	r2, r4, #0
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	1dbb      	adds	r3, r7, #6
 8002644:	1c02      	adds	r2, r0, #0
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	1d7b      	adds	r3, r7, #5
 800264a:	1c0a      	adds	r2, r1, #0
 800264c:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CLEAR_COLOR_RGB(R, G, B));
 800264e:	1dfb      	adds	r3, r7, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	041a      	lsls	r2, r3, #16
 8002654:	1dbb      	adds	r3, r7, #6
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	431a      	orrs	r2, r3
 800265c:	1d7b      	adds	r3, r7, #5
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	2280      	movs	r2, #128	; 0x80
 8002664:	0492      	lsls	r2, r2, #18
 8002666:	4313      	orrs	r3, r2
 8002668:	0018      	movs	r0, r3
 800266a:	f000 fa8e 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 800266e:	2004      	movs	r0, #4
 8002670:	f000 fba4 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002674:	46c0      	nop			; (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b003      	add	sp, #12
 800267a:	bd90      	pop	{r4, r7, pc}

0800267c <EVE_CLEAR>:
	HAL_Write32(EVE_ENC_CLEAR_COLOR(c));
	HAL_IncCmdPointer(4);
}

void EVE_CLEAR(uint8_t C, uint8_t S, uint8_t T)
{
 800267c:	b590      	push	{r4, r7, lr}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	0004      	movs	r4, r0
 8002684:	0008      	movs	r0, r1
 8002686:	0011      	movs	r1, r2
 8002688:	1dfb      	adds	r3, r7, #7
 800268a:	1c22      	adds	r2, r4, #0
 800268c:	701a      	strb	r2, [r3, #0]
 800268e:	1dbb      	adds	r3, r7, #6
 8002690:	1c02      	adds	r2, r0, #0
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	1d7b      	adds	r3, r7, #5
 8002696:	1c0a      	adds	r2, r1, #0
 8002698:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CLEAR((C & 0x01),(S & 0x01),(T & 0x01)));
 800269a:	1dfb      	adds	r3, r7, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	2204      	movs	r2, #4
 80026a2:	401a      	ands	r2, r3
 80026a4:	1dbb      	adds	r3, r7, #6
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	2102      	movs	r1, #2
 80026ac:	400b      	ands	r3, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	1d7b      	adds	r3, r7, #5
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2101      	movs	r1, #1
 80026b6:	400b      	ands	r3, r1
 80026b8:	4313      	orrs	r3, r2
 80026ba:	2298      	movs	r2, #152	; 0x98
 80026bc:	0592      	lsls	r2, r2, #22
 80026be:	4313      	orrs	r3, r2
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 fa62 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 80026c6:	2004      	movs	r0, #4
 80026c8:	f000 fb78 	bl	8002dbc <HAL_IncCmdPointer>
}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b003      	add	sp, #12
 80026d2:	bd90      	pop	{r4, r7, pc}

080026d4 <EVE_COLOR_RGB>:

void EVE_COLOR_RGB(uint8_t R, uint8_t G, uint8_t B)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	0004      	movs	r4, r0
 80026dc:	0008      	movs	r0, r1
 80026de:	0011      	movs	r1, r2
 80026e0:	1dfb      	adds	r3, r7, #7
 80026e2:	1c22      	adds	r2, r4, #0
 80026e4:	701a      	strb	r2, [r3, #0]
 80026e6:	1dbb      	adds	r3, r7, #6
 80026e8:	1c02      	adds	r2, r0, #0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	1d7b      	adds	r3, r7, #5
 80026ee:	1c0a      	adds	r2, r1, #0
 80026f0:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_COLOR_RGB(R, G, B));
 80026f2:	1dfb      	adds	r3, r7, #7
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	041a      	lsls	r2, r3, #16
 80026f8:	1dbb      	adds	r3, r7, #6
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	021b      	lsls	r3, r3, #8
 80026fe:	431a      	orrs	r2, r3
 8002700:	1d7b      	adds	r3, r7, #5
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4313      	orrs	r3, r2
 8002706:	2280      	movs	r2, #128	; 0x80
 8002708:	04d2      	lsls	r2, r2, #19
 800270a:	4313      	orrs	r3, r2
 800270c:	0018      	movs	r0, r3
 800270e:	f000 fa3c 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002712:	2004      	movs	r0, #4
 8002714:	f000 fb52 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b003      	add	sp, #12
 800271e:	bd90      	pop	{r4, r7, pc}

08002720 <EVE_BITMAP_HANDLE>:
	HAL_Write32(EVE_ENC_VERTEX2II(x, y, handle, cell));
	HAL_IncCmdPointer(4);
}

void EVE_BITMAP_HANDLE(uint8_t handle)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	0002      	movs	r2, r0
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_HANDLE(handle));
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	221f      	movs	r2, #31
 8002732:	4013      	ands	r3, r2
 8002734:	22a0      	movs	r2, #160	; 0xa0
 8002736:	04d2      	lsls	r2, r2, #19
 8002738:	4313      	orrs	r3, r2
 800273a:	0018      	movs	r0, r3
 800273c:	f000 fa25 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002740:	2004      	movs	r0, #4
 8002742:	f000 fb3b 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b002      	add	sp, #8
 800274c:	bd80      	pop	{r7, pc}

0800274e <EVE_DISPLAY>:
	HAL_Write32(EVE_ENC_MACRO(m));
	HAL_IncCmdPointer(4);
}

void EVE_DISPLAY(void)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_DISPLAY());
 8002752:	2000      	movs	r0, #0
 8002754:	f000 fa19 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002758:	2004      	movs	r0, #4
 800275a:	f000 fb2f 	bl	8002dbc <HAL_IncCmdPointer>
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <EVE_CMD_SWAP>:
	HAL_Write32(c);
	HAL_IncCmdPointer(8);
}

void EVE_CMD_SWAP(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_CMD_SWAP);
 8002768:	23ff      	movs	r3, #255	; 0xff
 800276a:	425b      	negs	r3, r3
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fa0c 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002772:	2004      	movs	r0, #4
 8002774:	f000 fb22 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <EVE_CMD_CALIBRATE>:
	HAL_Write32(result);
	HAL_IncCmdPointer(56);
}

void EVE_CMD_CALIBRATE(uint32_t result)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	HAL_Write32(EVE_ENC_CMD_CALIBRATE);
 8002786:	23eb      	movs	r3, #235	; 0xeb
 8002788:	425b      	negs	r3, r3
 800278a:	0018      	movs	r0, r3
 800278c:	f000 f9fd 	bl	8002b8a <HAL_Write32>
	HAL_Write32(result);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 f9f9 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(8);
 8002798:	2008      	movs	r0, #8
 800279a:	f000 fb0f 	bl	8002dbc <HAL_IncCmdPointer>
}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b002      	add	sp, #8
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <EVE_CMD_DLSTART>:
	HAL_Write32(options);
	HAL_IncCmdPointer(12);
}

void EVE_CMD_DLSTART(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_CMD_DLSTART);
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <EVE_CMD_DLSTART+0x18>)
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 f9eb 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(4);
 80027b4:	2004      	movs	r0, #4
 80027b6:	f000 fb01 	bl	8002dbc <HAL_IncCmdPointer>
}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	ffffff00 	.word	0xffffff00

080027c4 <COUNT_ARGS>:
}



uint8_t COUNT_ARGS(const char* string)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
	const char *tmp = string;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60bb      	str	r3, [r7, #8]

	while ((tmp = strstr(tmp, "%")))
 80027d8:	e011      	b.n	80027fe <COUNT_ARGS+0x3a>
	{
		if (*(tmp + 1) == '%') {
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	3301      	adds	r3, #1
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b25      	cmp	r3, #37	; 0x25
 80027e2:	d103      	bne.n	80027ec <COUNT_ARGS+0x28>
			tmp += 2;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	3302      	adds	r3, #2
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	e008      	b.n	80027fe <COUNT_ARGS+0x3a>
		}
		else {
			count++;
 80027ec:	210f      	movs	r1, #15
 80027ee:	187b      	adds	r3, r7, r1
 80027f0:	781a      	ldrb	r2, [r3, #0]
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	3201      	adds	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
			tmp++;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	3301      	adds	r3, #1
 80027fc:	60bb      	str	r3, [r7, #8]
	while ((tmp = strstr(tmp, "%")))
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2125      	movs	r1, #37	; 0x25
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fb5e 	bl	8002ec4 <strchr>
 8002808:	0003      	movs	r3, r0
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e3      	bne.n	80027da <COUNT_ARGS+0x16>
		}
	}
	return count;
 8002812:	230f      	movs	r3, #15
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	781b      	ldrb	r3, [r3, #0]
}
 8002818:	0018      	movs	r0, r3
 800281a:	46bd      	mov	sp, r7
 800281c:	b004      	add	sp, #16
 800281e:	bd80      	pop	{r7, pc}

08002820 <EVE_CMD_TEXT>:


void EVE_CMD_TEXT(int16_t x, int16_t y, int16_t font, uint16_t options, const char* string, ...)
{
 8002820:	b5b0      	push	{r4, r5, r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	0005      	movs	r5, r0
 8002828:	000c      	movs	r4, r1
 800282a:	0010      	movs	r0, r2
 800282c:	0019      	movs	r1, r3
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	1c2a      	adds	r2, r5, #0
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	1c22      	adds	r2, r4, #0
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	1cbb      	adds	r3, r7, #2
 800283c:	1c02      	adds	r2, r0, #0
 800283e:	801a      	strh	r2, [r3, #0]
 8002840:	003b      	movs	r3, r7
 8002842:	1c0a      	adds	r2, r1, #0
 8002844:	801a      	strh	r2, [r3, #0]
	va_list args;
	uint32_t CommandSize;
	uint32_t StringLength;
	uint8_t i, num=0;
 8002846:	2316      	movs	r3, #22
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]

	va_start(args, string);
 800284e:	232c      	movs	r3, #44	; 0x2c
 8002850:	18fb      	adds	r3, r7, r3
 8002852:	60bb      	str	r3, [r7, #8]

	#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	//#if defined (BT81X_ENABLE) /* OPT_FORMAT not defined in FT8xx chip */
	num = (options & EVE_OPT_FORMAT) ? (COUNT_ARGS(string)) : (0); //Only check % characters if option OPT_FORMAT is set
 8002854:	003b      	movs	r3, r7
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	015b      	lsls	r3, r3, #5
 800285c:	4013      	ands	r3, r2
 800285e:	d006      	beq.n	800286e <EVE_CMD_TEXT+0x4e>
 8002860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ffae 	bl	80027c4 <COUNT_ARGS>
 8002868:	0003      	movs	r3, r0
 800286a:	001a      	movs	r2, r3
 800286c:	e000      	b.n	8002870 <EVE_CMD_TEXT+0x50>
 800286e:	2200      	movs	r2, #0
 8002870:	2316      	movs	r3, #22
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	701a      	strb	r2, [r3, #0]
	#endif

	HAL_Write32(EVE_ENC_CMD_TEXT);
 8002876:	23f4      	movs	r3, #244	; 0xf4
 8002878:	425b      	negs	r3, r3
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f985 	bl	8002b8a <HAL_Write32>
	HAL_Write32(((uint32_t)y << 16) | (x & 0xffff));
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	2200      	movs	r2, #0
 8002884:	5e9b      	ldrsh	r3, [r3, r2]
 8002886:	041a      	lsls	r2, r3, #16
 8002888:	1dbb      	adds	r3, r7, #6
 800288a:	2100      	movs	r1, #0
 800288c:	5e5b      	ldrsh	r3, [r3, r1]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	4313      	orrs	r3, r2
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f978 	bl	8002b8a <HAL_Write32>
	HAL_Write32(((uint32_t)options << 16) | (font & 0xffff));
 800289a:	003b      	movs	r3, r7
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	041a      	lsls	r2, r3, #16
 80028a0:	1cbb      	adds	r3, r7, #2
 80028a2:	2100      	movs	r1, #0
 80028a4:	5e5b      	ldrsh	r3, [r3, r1]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	4313      	orrs	r3, r2
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 f96c 	bl	8002b8a <HAL_Write32>
	CommandSize = 12;
 80028b2:	230c      	movs	r3, #12
 80028b4:	613b      	str	r3, [r7, #16]

	StringLength = EVE_LIB_SendString(string);
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff fe88 	bl	80025ce <EVE_LIB_SendString>
 80028be:	0003      	movs	r3, r0
 80028c0:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < num; i++)
 80028c2:	2317      	movs	r3, #23
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	e00c      	b.n	80028e6 <EVE_CMD_TEXT+0xc6>
	{
		HAL_Write32((uint32_t)va_arg(args, uint32_t));
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 f958 	bl	8002b8a <HAL_Write32>
	for (i = 0; i < num; i++)
 80028da:	2117      	movs	r1, #23
 80028dc:	187b      	adds	r3, r7, r1
 80028de:	781a      	ldrb	r2, [r3, #0]
 80028e0:	187b      	adds	r3, r7, r1
 80028e2:	3201      	adds	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]
 80028e6:	2317      	movs	r3, #23
 80028e8:	18fa      	adds	r2, r7, r3
 80028ea:	2116      	movs	r1, #22
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3ea      	bcc.n	80028cc <EVE_CMD_TEXT+0xac>
	}

	CommandSize = CommandSize + StringLength + (num*4);
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	18d3      	adds	r3, r2, r3
 80028fc:	187a      	adds	r2, r7, r1
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	189b      	adds	r3, r3, r2
 8002904:	613b      	str	r3, [r7, #16]
//	Gpu_CoCmd_EndFunc(phost, CMD_SIZE * (3+ num) + ((len + 1 + 3) & ~3));

	HAL_IncCmdPointer(CommandSize);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	b29b      	uxth	r3, r3
 800290a:	0018      	movs	r0, r3
 800290c:	f000 fa56 	bl	8002dbc <HAL_IncCmdPointer>

	va_end(args);
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	b006      	add	sp, #24
 8002916:	bdb0      	pop	{r4, r5, r7, pc}

08002918 <EVE_CMD_SETBITMAP>:
	HAL_Write32(eve_base);
	HAL_IncCmdPointer(8);
}

void EVE_CMD_SETBITMAP(uint32_t source, uint16_t fmt, uint16_t w, uint16_t h)
{
 8002918:	b5b0      	push	{r4, r5, r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	000c      	movs	r4, r1
 8002922:	0010      	movs	r0, r2
 8002924:	0019      	movs	r1, r3
 8002926:	250a      	movs	r5, #10
 8002928:	197b      	adds	r3, r7, r5
 800292a:	1c22      	adds	r2, r4, #0
 800292c:	801a      	strh	r2, [r3, #0]
 800292e:	2408      	movs	r4, #8
 8002930:	193b      	adds	r3, r7, r4
 8002932:	1c02      	adds	r2, r0, #0
 8002934:	801a      	strh	r2, [r3, #0]
 8002936:	1dbb      	adds	r3, r7, #6
 8002938:	1c0a      	adds	r2, r1, #0
 800293a:	801a      	strh	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CMD_SETBITMAP);
 800293c:	23bd      	movs	r3, #189	; 0xbd
 800293e:	425b      	negs	r3, r3
 8002940:	0018      	movs	r0, r3
 8002942:	f000 f922 	bl	8002b8a <HAL_Write32>
	HAL_Write32(source);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f91e 	bl	8002b8a <HAL_Write32>
	HAL_Write32(((uint32_t)w << 16) | (fmt & 0xffff));
 800294e:	193b      	adds	r3, r7, r4
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	041a      	lsls	r2, r3, #16
 8002954:	197b      	adds	r3, r7, r5
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	4313      	orrs	r3, r2
 800295a:	0018      	movs	r0, r3
 800295c:	f000 f915 	bl	8002b8a <HAL_Write32>
	HAL_Write32(h);
 8002960:	1dbb      	adds	r3, r7, #6
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 f910 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(16);
 800296a:	2010      	movs	r0, #16
 800296c:	f000 fa26 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bdb0      	pop	{r4, r5, r7, pc}

08002978 <EVE_CMD_FLASHFAST>:
  HAL_Write32(num);
  HAL_IncCmdPointer(8);
}

void EVE_CMD_FLASHFAST(uint32_t result)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_Write32(EVE_ENC_CMD_FLASHFAST);
 8002980:	23b6      	movs	r3, #182	; 0xb6
 8002982:	425b      	negs	r3, r3
 8002984:	0018      	movs	r0, r3
 8002986:	f000 f900 	bl	8002b8a <HAL_Write32>
  HAL_Write32(result);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f000 f8fc 	bl	8002b8a <HAL_Write32>
  HAL_IncCmdPointer(8);
 8002992:	2008      	movs	r0, #8
 8002994:	f000 fa12 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}

080029a0 <EVE_CMD_FLASHATTACH>:
  HAL_Write32(num);
  HAL_IncCmdPointer(12);
}

void EVE_CMD_FLASHATTACH()
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  HAL_Write32(EVE_ENC_CMD_FLASHATTACH);
 80029a4:	23b7      	movs	r3, #183	; 0xb7
 80029a6:	425b      	negs	r3, r3
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f8ee 	bl	8002b8a <HAL_Write32>
  HAL_IncCmdPointer(4);
 80029ae:	2004      	movs	r0, #4
 80029b0:	f000 fa04 	bl	8002dbc <HAL_IncCmdPointer>
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <EVE_CMD_FLASHDETATCH>:

void EVE_CMD_FLASHDETATCH()
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	af00      	add	r7, sp, #0
  HAL_Write32(EVE_ENC_CMD_FLASHDETACH);
 80029be:	23b8      	movs	r3, #184	; 0xb8
 80029c0:	425b      	negs	r3, r3
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f8e1 	bl	8002b8a <HAL_Write32>
  HAL_IncCmdPointer(4);
 80029c8:	2004      	movs	r0, #4
 80029ca:	f000 f9f7 	bl	8002dbc <HAL_IncCmdPointer>
}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <EVE_CMD_ANIMFRAME>:
	HAL_Write32(ch);
	HAL_IncCmdPointer(8);
}

void EVE_CMD_ANIMFRAME(int16_t x, int16_t y, uint32_t aoptr, uint32_t frame)
{
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60ba      	str	r2, [r7, #8]
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	240e      	movs	r4, #14
 80029e0:	193b      	adds	r3, r7, r4
 80029e2:	1c02      	adds	r2, r0, #0
 80029e4:	801a      	strh	r2, [r3, #0]
 80029e6:	250c      	movs	r5, #12
 80029e8:	197b      	adds	r3, r7, r5
 80029ea:	1c0a      	adds	r2, r1, #0
 80029ec:	801a      	strh	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CMD_ANIMFRAME);
 80029ee:	23a6      	movs	r3, #166	; 0xa6
 80029f0:	425b      	negs	r3, r3
 80029f2:	0018      	movs	r0, r3
 80029f4:	f000 f8c9 	bl	8002b8a <HAL_Write32>
	HAL_Write32(((uint32_t)y << 16) | (x & 0xFFFF));
 80029f8:	197b      	adds	r3, r7, r5
 80029fa:	2200      	movs	r2, #0
 80029fc:	5e9b      	ldrsh	r3, [r3, r2]
 80029fe:	041a      	lsls	r2, r3, #16
 8002a00:	193b      	adds	r3, r7, r4
 8002a02:	2100      	movs	r1, #0
 8002a04:	5e5b      	ldrsh	r3, [r3, r1]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 f8bc 	bl	8002b8a <HAL_Write32>
	HAL_Write32(aoptr);
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f8b8 	bl	8002b8a <HAL_Write32>
	HAL_Write32(frame);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f000 f8b4 	bl	8002b8a <HAL_Write32>
	HAL_IncCmdPointer(16);
 8002a22:	2010      	movs	r0, #16
 8002a24:	f000 f9ca 	bl	8002dbc <HAL_IncCmdPointer>
}
 8002a28:	46c0      	nop			; (mov r8, r8)
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b004      	add	sp, #16
 8002a2e:	bdb0      	pop	{r4, r5, r7, pc}

08002a30 <HAL_EVE_Init>:
// Used to navigate command ring buffer
static uint16_t writeCmdPointer = 0x0000;


void HAL_EVE_Init(void)
{
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
	uint8_t val;

	MCU_Init();
 8002a36:	f7ff f98b 	bl	8001d50 <MCU_Init>

	// Set Chip Select OFF
	HAL_ChipSelect(0);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f000 f858 	bl	8002af0 <HAL_ChipSelect>

	// Reset the display
	MCU_Delay_20ms();
 8002a40:	f7ff fb7d 	bl	800213e <MCU_Delay_20ms>
	HAL_PowerDown(1);
 8002a44:	2001      	movs	r0, #1
 8002a46:	f000 f867 	bl	8002b18 <HAL_PowerDown>
	MCU_Delay_20ms();
 8002a4a:	f7ff fb78 	bl	800213e <MCU_Delay_20ms>
	HAL_PowerDown(0);
 8002a4e:	2000      	movs	r0, #0
 8002a50:	f000 f862 	bl	8002b18 <HAL_PowerDown>
	MCU_Delay_20ms();
 8002a54:	f7ff fb73 	bl	800213e <MCU_Delay_20ms>
#endif

#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	// can optionally set to 72MHz system clock here
	// In this case also adjust REG_FREQUENCY a few lines down from here in this file
	HAL_HostCmdWrite(0x44, 0x00); // 0x44 = HostCMD_CLKEXT
 8002a58:	2100      	movs	r1, #0
 8002a5a:	2044      	movs	r0, #68	; 0x44
 8002a5c:	f000 f98d 	bl	8002d7a <HAL_HostCmdWrite>
	HAL_HostCmdWrite(0x61, 0x46);
 8002a60:	2146      	movs	r1, #70	; 0x46
 8002a62:	2061      	movs	r0, #97	; 0x61
 8002a64:	f000 f989 	bl	8002d7a <HAL_HostCmdWrite>
#endif

#if defined (EVE2_ENABLE) || defined (EVE3_ENABLE)|| defined (EVE4_ENABLE)
	HAL_HostCmdWrite(0x68, 0x00); // Reset
 8002a68:	2100      	movs	r1, #0
 8002a6a:	2068      	movs	r0, #104	; 0x68
 8002a6c:	f000 f985 	bl	8002d7a <HAL_HostCmdWrite>
#endif

	// Set active
	HAL_HostCmdWrite(0, 0x00);
 8002a70:	2100      	movs	r1, #0
 8002a72:	2000      	movs	r0, #0
 8002a74:	f000 f981 	bl	8002d7a <HAL_HostCmdWrite>
	
//	MCU_Delay_500ms();		// Optional delay can be commented so long as we check the REG_ID and REG_CPURESET

	// Read REG_ID register (0x302000) until reads 0x7C
	while ((val = HAL_MemRead8(EVE_REG_ID)) != 0x7C)
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	1dfc      	adds	r4, r7, #7
 8002a7c:	4b17      	ldr	r3, [pc, #92]	; (8002adc <HAL_EVE_Init+0xac>)
 8002a7e:	0018      	movs	r0, r3
 8002a80:	f000 f961 	bl	8002d46 <HAL_MemRead8>
 8002a84:	0003      	movs	r3, r0
 8002a86:	7023      	strb	r3, [r4, #0]
 8002a88:	1dfb      	adds	r3, r7, #7
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b7c      	cmp	r3, #124	; 0x7c
 8002a8e:	d1f4      	bne.n	8002a7a <HAL_EVE_Init+0x4a>
	{
	}

	// Ensure CPUreset register reads 0 and so FT8xx is ready
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <HAL_EVE_Init+0xb0>)
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 f956 	bl	8002d46 <HAL_MemRead8>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d1f9      	bne.n	8002a92 <HAL_EVE_Init+0x62>
	}




	HAL_MemWrite8(EVE_REG_CPURESET, 0x00);
 8002a9e:	4b10      	ldr	r3, [pc, #64]	; (8002ae0 <HAL_EVE_Init+0xb0>)
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 f904 	bl	8002cb0 <HAL_MemWrite8>
	HAL_MemWrite16(EVE_REG_TOUCH_CONFIG, 0x05D0); //Setting for Goodix touch controller
 8002aa8:	23ba      	movs	r3, #186	; 0xba
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4a0d      	ldr	r2, [pc, #52]	; (8002ae4 <HAL_EVE_Init+0xb4>)
 8002aae:	0019      	movs	r1, r3
 8002ab0:	0010      	movs	r0, r2
 8002ab2:	f000 f8e3 	bl	8002c7c <HAL_MemWrite16>
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 8002ab6:	e005      	b.n	8002ac4 <HAL_EVE_Init+0x94>




#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	HAL_MemWrite32(EVE_REG_FREQUENCY, 72000000);
 8002ab8:	4a0b      	ldr	r2, [pc, #44]	; (8002ae8 <HAL_EVE_Init+0xb8>)
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_EVE_Init+0xbc>)
 8002abc:	0011      	movs	r1, r2
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 f8c5 	bl	8002c4e <HAL_MemWrite32>
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 8002ac4:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_EVE_Init+0xb0>)
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 f93d 	bl	8002d46 <HAL_MemRead8>
 8002acc:	1e03      	subs	r3, r0, #0
 8002ace:	d1f3      	bne.n	8002ab8 <HAL_EVE_Init+0x88>
#endif

	// This function will not return unless an EVE device is present.
	MCU_Setup();
 8002ad0:	f7ff fa36 	bl	8001f40 <MCU_Setup>
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b003      	add	sp, #12
 8002ada:	bd90      	pop	{r4, r7, pc}
 8002adc:	00302000 	.word	0x00302000
 8002ae0:	00302020 	.word	0x00302020
 8002ae4:	00302168 	.word	0x00302168
 8002ae8:	044aa200 	.word	0x044aa200
 8002aec:	0030200c 	.word	0x0030200c

08002af0 <HAL_ChipSelect>:

// --------------------- Chip Select line ----------------------------------
void HAL_ChipSelect(int8_t enable)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	0002      	movs	r2, r0
 8002af8:	1dfb      	adds	r3, r7, #7
 8002afa:	701a      	strb	r2, [r3, #0]
	if (enable)
 8002afc:	1dfb      	adds	r3, r7, #7
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d002      	beq.n	8002b0c <HAL_ChipSelect+0x1c>
		MCU_CSlow();
 8002b06:	f7ff fa21 	bl	8001f4c <MCU_CSlow>
	else
		MCU_CShigh();
}
 8002b0a:	e001      	b.n	8002b10 <HAL_ChipSelect+0x20>
		MCU_CShigh();
 8002b0c:	f7ff fa2c 	bl	8001f68 <MCU_CShigh>
}
 8002b10:	46c0      	nop			; (mov r8, r8)
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PowerDown>:

// -------------------------- Power Down line --------------------------------------
void HAL_PowerDown(int8_t enable)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	0002      	movs	r2, r0
 8002b20:	1dfb      	adds	r3, r7, #7
 8002b22:	701a      	strb	r2, [r3, #0]
	if (enable)
 8002b24:	1dfb      	adds	r3, r7, #7
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_PowerDown+0x1c>
		MCU_PDlow();
 8002b2e:	f7ff fa29 	bl	8001f84 <MCU_PDlow>
	else
		MCU_PDhigh();
}
 8002b32:	e001      	b.n	8002b38 <HAL_PowerDown+0x20>
		MCU_PDhigh();
 8002b34:	f7ff fa34 	bl	8001fa0 <MCU_PDhigh>
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b002      	add	sp, #8
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_SetWriteAddress>:

// ------------------ Send FT81x register address for writing ------------------
void HAL_SetWriteAddress(uint32_t address)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	// Send three bytes of a register address which has to be subsequently
	// written. Ignore return values as this is an SPI write only.
	// Send high byte of address with 'write' bits set.
	MCU_SPIWrite24(MCU_htobe32((address << 8) | (1UL << 31)));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	021b      	lsls	r3, r3, #8
 8002b4c:	2280      	movs	r2, #128	; 0x80
 8002b4e:	0612      	lsls	r2, r2, #24
 8002b50:	4313      	orrs	r3, r2
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff fb7f 	bl	8002256 <MCU_htobe32>
 8002b58:	0003      	movs	r3, r0
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7ff fb54 	bl	8002208 <MCU_SPIWrite24>
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_SetReadAddress>:

// ------------------ Send FT81x register address for reading ------------------
void HAL_SetReadAddress(uint32_t address)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	// Send three bytes of a register address which has to be subsequently read.
	// Ignore return values as this is an SPI write only.
	// Send high byte of address with 'read' bits set.
	MCU_SPIWrite32(MCU_htobe32((address << 8) | (0UL << 31)));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	0018      	movs	r0, r3
 8002b76:	f7ff fb6e 	bl	8002256 <MCU_htobe32>
 8002b7a:	0003      	movs	r3, r0
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f7ff fb5e 	bl	800223e <MCU_SPIWrite32>
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_Write32>:
	MCU_SPIWrite(buffer, length);
}

// ------------------------ Send a 32-bit data value --------------------------
void HAL_Write32(uint32_t val32)
{    
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
	// Send four bytes of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite32(MCU_htole32(val32));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f7ff fb7d 	bl	8002294 <MCU_htole32>
 8002b9a:	0003      	movs	r3, r0
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7ff fb4e 	bl	800223e <MCU_SPIWrite32>
}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_Write16>:

// ------------------------ Send a 16-bit data value --------------------------
void HAL_Write16(uint16_t val16)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	801a      	strh	r2, [r3, #0]
	// Send two bytes of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite16(MCU_htole16(val16));
 8002bb6:	1dbb      	adds	r3, r7, #6
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff fb54 	bl	8002268 <MCU_htole16>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f7ff fb11 	bl	80021ea <MCU_SPIWrite16>
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_Write8>:

// ------------------------ Send an 8-bit data value ---------------------------
void HAL_Write8(uint8_t val8)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	1dfb      	adds	r3, r7, #7
 8002bda:	701a      	strb	r2, [r3, #0]
	// Send one byte of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite8(val8);
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	0018      	movs	r0, r3
 8002be2:	f7ff fae1 	bl	80021a8 <MCU_SPIWrite8>
}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b002      	add	sp, #8
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_Read32>:

// ------------------------ Read a 32-bit data value --------------------------
uint32_t HAL_Read32(void)
{    
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
	// Read 4 bytes from a register has been previously addressed. Send dummy
	// 00 bytes as only the incoming value is important.
	uint32_t val32;

	// Read low byte of data first.
	val32 = MCU_SPIRead32();
 8002bf4:	f7ff fb14 	bl	8002220 <MCU_SPIRead32>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	607b      	str	r3, [r7, #4]

	// Return combined 32-bit value
	return MCU_le32toh(val32);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f7ff fb8c 	bl	800231c <MCU_le32toh>
 8002c04:	0003      	movs	r3, r0
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b002      	add	sp, #8
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_Read16>:

// ------------------------ Read a 16-bit data value ---------------------------
uint16_t HAL_Read16(void)
{
 8002c0e:	b590      	push	{r4, r7, lr}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
	// Read 2 bytes from a register has been previously addressed. Send dummy
	// 00 bytes as only the incoming value is important.
	uint16_t val16;

	// Read low byte of data first.
	val16 = MCU_SPIRead16();
 8002c14:	1dbc      	adds	r4, r7, #6
 8002c16:	f7ff fad6 	bl	80021c6 <MCU_SPIRead16>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	8023      	strh	r3, [r4, #0]

	// Return combined 16-bit value
	return MCU_le16toh(val16);
 8002c1e:	1dbb      	adds	r3, r7, #6
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7ff fb64 	bl	80022f0 <MCU_le16toh>
 8002c28:	0003      	movs	r3, r0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b003      	add	sp, #12
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <HAL_Read8>:

// ------------------------ Read an 8-bit data value ---------------------------
uint8_t HAL_Read8(void)
{
 8002c32:	b590      	push	{r4, r7, lr}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
	// Read 1 byte from a register has been previously addressed. Send dummy
	// 00 byte as only the incoming value is important.
	uint8_t val8;

	val8 = MCU_SPIRead8();
 8002c38:	1dfc      	adds	r4, r7, #7
 8002c3a:	f7ff faa3 	bl	8002184 <MCU_SPIRead8>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	7023      	strb	r3, [r4, #0]

	// Return 8-bit value read
	return val8;
 8002c42:	1dfb      	adds	r3, r7, #7
 8002c44:	781b      	ldrb	r3, [r3, #0]
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b003      	add	sp, #12
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <HAL_MemWrite32>:
// including chip select, address, and data transfer.
// This would often be used for register writes and reads. 

// -------------- Write a 32-bit value to specified address --------------------
void HAL_MemWrite32(uint32_t address, uint32_t val32)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff ff49 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff ff6d 	bl	8002b40 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write32(val32);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f7ff ff8e 	bl	8002b8a <HAL_Write32>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7ff ff3e 	bl	8002af0 <HAL_ChipSelect>
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_MemWrite16>:

// -------------- Write a 16-bit value to specified address --------------------
void HAL_MemWrite16(uint32_t address, uint16_t val16)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	000a      	movs	r2, r1
 8002c86:	1cbb      	adds	r3, r7, #2
 8002c88:	801a      	strh	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f7ff ff30 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff ff54 	bl	8002b40 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write16(val16);
 8002c98:	1cbb      	adds	r3, r7, #2
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff ff84 	bl	8002baa <HAL_Write16>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	f7ff ff24 	bl	8002af0 <HAL_ChipSelect>
}
 8002ca8:	46c0      	nop			; (mov r8, r8)
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_MemWrite8>:

// -------------- Write an 8-bit value to specified address --------------------
void HAL_MemWrite8(uint32_t address, uint8_t val8)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	000a      	movs	r2, r1
 8002cba:	1cfb      	adds	r3, r7, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7ff ff16 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff ff3a 	bl	8002b40 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write8(val8);
 8002ccc:	1cfb      	adds	r3, r7, #3
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f7ff ff7d 	bl	8002bd0 <HAL_Write8>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7ff ff0a 	bl	8002af0 <HAL_ChipSelect>
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	b002      	add	sp, #8
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <HAL_MemRead32>:

// -------------- Read a 32-bit value from specified address --------------------
uint32_t HAL_MemRead32(uint32_t address)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
	uint32_t val32;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002cec:	2001      	movs	r0, #1
 8002cee:	f7ff feff 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff ff37 	bl	8002b68 <HAL_SetReadAddress>
	// Read the data value
	val32 = HAL_Read32();
 8002cfa:	f7ff ff78 	bl	8002bee <HAL_Read32>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	60fb      	str	r3, [r7, #12]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff fef4 	bl	8002af0 <HAL_ChipSelect>

	// Return 32-bit value read
	return val32;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b004      	add	sp, #16
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_MemRead16>:
// -------------- Read a 16-bit value from specified address --------------------
uint16_t HAL_MemRead16(uint32_t address)
{
 8002d12:	b5b0      	push	{r4, r5, r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	uint16_t val16;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002d1a:	2001      	movs	r0, #1
 8002d1c:	f7ff fee8 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7ff ff20 	bl	8002b68 <HAL_SetReadAddress>
	// Read the data value
	val16 = HAL_Read16();
 8002d28:	250e      	movs	r5, #14
 8002d2a:	197c      	adds	r4, r7, r5
 8002d2c:	f7ff ff6f 	bl	8002c0e <HAL_Read16>
 8002d30:	0003      	movs	r3, r0
 8002d32:	8023      	strh	r3, [r4, #0]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff fedb 	bl	8002af0 <HAL_ChipSelect>

	// Return 16-bit value read
	return val16;
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	881b      	ldrh	r3, [r3, #0]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}

08002d46 <HAL_MemRead8>:
// -------------- Read an 8-bit value from specified address --------------------
uint8_t HAL_MemRead8(uint32_t address)
{
 8002d46:	b5b0      	push	{r4, r5, r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
	uint8_t val8;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7ff fece 	bl	8002af0 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff ff06 	bl	8002b68 <HAL_SetReadAddress>
	// Read the data value
	val8 = HAL_Read8();
 8002d5c:	250f      	movs	r5, #15
 8002d5e:	197c      	adds	r4, r7, r5
 8002d60:	f7ff ff67 	bl	8002c32 <HAL_Read8>
 8002d64:	0003      	movs	r3, r0
 8002d66:	7023      	strb	r3, [r4, #0]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7ff fec1 	bl	8002af0 <HAL_ChipSelect>

	// Return 8-bit value read
	return val8;
 8002d6e:	197b      	adds	r3, r7, r5
 8002d70:	781b      	ldrb	r3, [r3, #0]
}
 8002d72:	0018      	movs	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b004      	add	sp, #16
 8002d78:	bdb0      	pop	{r4, r5, r7, pc}

08002d7a <HAL_HostCmdWrite>:
// ############################# HOST COMMANDS #################################
// -------------------------- Write a host command -----------------------------
void HAL_HostCmdWrite(uint8_t cmd, uint8_t param)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	0002      	movs	r2, r0
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	701a      	strb	r2, [r3, #0]
 8002d86:	1dbb      	adds	r3, r7, #6
 8002d88:	1c0a      	adds	r2, r1, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8002d8c:	2001      	movs	r0, #1
 8002d8e:	f7ff feaf 	bl	8002af0 <HAL_ChipSelect>
	// Send command
	MCU_SPIWrite8(cmd);
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	0018      	movs	r0, r3
 8002d98:	f7ff fa06 	bl	80021a8 <MCU_SPIWrite8>
	// followed by parameter
	MCU_SPIWrite8(param);
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff fa01 	bl	80021a8 <MCU_SPIWrite8>
	// and a dummy 00 byte
	MCU_SPIWrite8(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff f9fe 	bl	80021a8 <MCU_SPIWrite8>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff fe9f 	bl	8002af0 <HAL_ChipSelect>
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b002      	add	sp, #8
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_IncCmdPointer>:
// ######################## SUPPORTING FUNCTIONS ###############################

// --------- Increment co-processor address offset counter --------------------
void HAL_IncCmdPointer(uint16_t commandSize)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	1dbb      	adds	r3, r7, #6
 8002dc6:	801a      	strh	r2, [r3, #0]
	// Calculate new offset
	writeCmdPointer = (writeCmdPointer + commandSize) & (EVE_RAM_CMD_SIZE - 1);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	; (8002de8 <HAL_IncCmdPointer+0x2c>)
 8002dca:	881a      	ldrh	r2, [r3, #0]
 8002dcc:	1dbb      	adds	r3, r7, #6
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	18d3      	adds	r3, r2, r3
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	051b      	lsls	r3, r3, #20
 8002dd6:	0d1b      	lsrs	r3, r3, #20
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	4b03      	ldr	r3, [pc, #12]	; (8002de8 <HAL_IncCmdPointer+0x2c>)
 8002ddc:	801a      	strh	r2, [r3, #0]
}
 8002dde:	46c0      	nop			; (mov r8, r8)
 8002de0:	46bd      	mov	sp, r7
 8002de2:	b002      	add	sp, #8
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	46c0      	nop			; (mov r8, r8)
 8002de8:	20000090 	.word	0x20000090

08002dec <HAL_GetCmdPointer>:

// --------- Increment co-processor address offset counter --------------------
uint16_t HAL_GetCmdPointer(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
	// Return new offset
	return writeCmdPointer;
 8002df0:	4b02      	ldr	r3, [pc, #8]	; (8002dfc <HAL_GetCmdPointer+0x10>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	20000090 	.word	0x20000090

08002e00 <HAL_WriteCmdPointer>:

void HAL_WriteCmdPointer(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
	// and move write pointer to here
	HAL_MemWrite32(EVE_REG_CMD_WRITE, writeCmdPointer);
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_WriteCmdPointer+0x1c>)
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	001a      	movs	r2, r3
 8002e0a:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <HAL_WriteCmdPointer+0x20>)
 8002e0c:	0011      	movs	r1, r2
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff ff1d 	bl	8002c4e <HAL_MemWrite32>
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	20000090 	.word	0x20000090
 8002e20:	003020fc 	.word	0x003020fc

08002e24 <HAL_WaitCmdFifoEmpty>:

// ------ Wait for co-processor read and write pointers to be equal ------------
uint8_t HAL_WaitCmdFifoEmpty(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0

	// Wait until the two registers match
	do
	{
		// Read the graphics processor read pointer
		readCmdPointer = HAL_MemRead32(EVE_REG_CMD_READ);
 8002e2a:	4b0d      	ldr	r3, [pc, #52]	; (8002e60 <HAL_WaitCmdFifoEmpty+0x3c>)
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff ff59 	bl	8002ce4 <HAL_MemRead32>
 8002e32:	0003      	movs	r3, r0
 8002e34:	607b      	str	r3, [r7, #4]

	} while ((writeCmdPointer != readCmdPointer) && (readCmdPointer != 0xFFF));
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <HAL_WaitCmdFifoEmpty+0x40>)
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <HAL_WaitCmdFifoEmpty+0x26>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a08      	ldr	r2, [pc, #32]	; (8002e68 <HAL_WaitCmdFifoEmpty+0x44>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d1ef      	bne.n	8002e2a <HAL_WaitCmdFifoEmpty+0x6>


	if(readCmdPointer == 0xFFF)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a06      	ldr	r2, [pc, #24]	; (8002e68 <HAL_WaitCmdFifoEmpty+0x44>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <HAL_WaitCmdFifoEmpty+0x32>
	{
		// Return 0xFF if an error occurred
		return 0xFF;
 8002e52:	23ff      	movs	r3, #255	; 0xff
 8002e54:	e000      	b.n	8002e58 <HAL_WaitCmdFifoEmpty+0x34>
	}
	else
	{
		// Return 0 if pointers became equal successfully
		return 0;
 8002e56:	2300      	movs	r3, #0
	}
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b002      	add	sp, #8
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	003020f8 	.word	0x003020f8
 8002e64:	20000090 	.word	0x20000090
 8002e68:	00000fff 	.word	0x00000fff

08002e6c <__libc_init_array>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	2600      	movs	r6, #0
 8002e70:	4d0c      	ldr	r5, [pc, #48]	; (8002ea4 <__libc_init_array+0x38>)
 8002e72:	4c0d      	ldr	r4, [pc, #52]	; (8002ea8 <__libc_init_array+0x3c>)
 8002e74:	1b64      	subs	r4, r4, r5
 8002e76:	10a4      	asrs	r4, r4, #2
 8002e78:	42a6      	cmp	r6, r4
 8002e7a:	d109      	bne.n	8002e90 <__libc_init_array+0x24>
 8002e7c:	2600      	movs	r6, #0
 8002e7e:	f000 f82f 	bl	8002ee0 <_init>
 8002e82:	4d0a      	ldr	r5, [pc, #40]	; (8002eac <__libc_init_array+0x40>)
 8002e84:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <__libc_init_array+0x44>)
 8002e86:	1b64      	subs	r4, r4, r5
 8002e88:	10a4      	asrs	r4, r4, #2
 8002e8a:	42a6      	cmp	r6, r4
 8002e8c:	d105      	bne.n	8002e9a <__libc_init_array+0x2e>
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
 8002e90:	00b3      	lsls	r3, r6, #2
 8002e92:	58eb      	ldr	r3, [r5, r3]
 8002e94:	4798      	blx	r3
 8002e96:	3601      	adds	r6, #1
 8002e98:	e7ee      	b.n	8002e78 <__libc_init_array+0xc>
 8002e9a:	00b3      	lsls	r3, r6, #2
 8002e9c:	58eb      	ldr	r3, [r5, r3]
 8002e9e:	4798      	blx	r3
 8002ea0:	3601      	adds	r6, #1
 8002ea2:	e7f2      	b.n	8002e8a <__libc_init_array+0x1e>
 8002ea4:	08002fa4 	.word	0x08002fa4
 8002ea8:	08002fa4 	.word	0x08002fa4
 8002eac:	08002fa4 	.word	0x08002fa4
 8002eb0:	08002fa8 	.word	0x08002fa8

08002eb4 <memset>:
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	1882      	adds	r2, r0, r2
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d100      	bne.n	8002ebe <memset+0xa>
 8002ebc:	4770      	bx	lr
 8002ebe:	7019      	strb	r1, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	e7f9      	b.n	8002eb8 <memset+0x4>

08002ec4 <strchr>:
 8002ec4:	b2c9      	uxtb	r1, r1
 8002ec6:	7803      	ldrb	r3, [r0, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <strchr+0x12>
 8002ecc:	428b      	cmp	r3, r1
 8002ece:	d100      	bne.n	8002ed2 <strchr+0xe>
 8002ed0:	4770      	bx	lr
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	e7f7      	b.n	8002ec6 <strchr+0x2>
 8002ed6:	424b      	negs	r3, r1
 8002ed8:	4159      	adcs	r1, r3
 8002eda:	4249      	negs	r1, r1
 8002edc:	4008      	ands	r0, r1
 8002ede:	e7f7      	b.n	8002ed0 <strchr+0xc>

08002ee0 <_init>:
 8002ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ee6:	bc08      	pop	{r3}
 8002ee8:	469e      	mov	lr, r3
 8002eea:	4770      	bx	lr

08002eec <_fini>:
 8002eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef2:	bc08      	pop	{r3}
 8002ef4:	469e      	mov	lr, r3
 8002ef6:	4770      	bx	lr
