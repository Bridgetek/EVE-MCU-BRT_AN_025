
BRT_AN_025_STM32CUBE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  0800359c  0800359c  0001359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ff8  08004ff8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ff8  08004ff8  00014ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ffc  08004ffc  00014ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  20000010  08005010  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08005010  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008909  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b87  00000000  00000000  00028941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  0002a4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001064d  00000000  00000000  0002bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000afca  00000000  00000000  0003c2fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f139  00000000  00000000  000472c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a6400  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be8  00000000  00000000  000a6450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003584 	.word	0x08003584

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003584 	.word	0x08003584

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <platform_calib_init>:



//@{
int8_t platform_calib_init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    return 1;
 8000234:	2301      	movs	r3, #1
}
 8000236:	0018      	movs	r0, r3
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}

0800023c <platform_calib_write>:

int8_t platform_calib_write(struct touchscreen_calibration *calib)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    return 0;
 8000244:	2300      	movs	r3, #0
}
 8000246:	0018      	movs	r0, r3
 8000248:	46bd      	mov	sp, r7
 800024a:	b002      	add	sp, #8
 800024c:	bd80      	pop	{r7, pc}

0800024e <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	af00      	add	r7, sp, #0

    eve_example();
 8000252:	f001 fccd 	bl	8001bf0 <eve_example>

    /* Infinite loop */
    while (1)
 8000256:	e7fe      	b.n	8000256 <main+0x8>

08000258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b08b      	sub	sp, #44	; 0x2c
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000260:	2414      	movs	r4, #20
 8000262:	193b      	adds	r3, r7, r4
 8000264:	0018      	movs	r0, r3
 8000266:	2314      	movs	r3, #20
 8000268:	001a      	movs	r2, r3
 800026a:	2100      	movs	r1, #0
 800026c:	f003 f974 	bl	8003558 <memset>
  if(hspi->Instance==SPI1)
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a1c      	ldr	r2, [pc, #112]	; (80002e8 <HAL_SPI_MspInit+0x90>)
 8000276:	4293      	cmp	r3, r2
 8000278:	d131      	bne.n	80002de <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800027a:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800027c:	699a      	ldr	r2, [r3, #24]
 800027e:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <HAL_SPI_MspInit+0x94>)
 8000280:	2180      	movs	r1, #128	; 0x80
 8000282:	0149      	lsls	r1, r1, #5
 8000284:	430a      	orrs	r2, r1
 8000286:	619a      	str	r2, [r3, #24]
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800028a:	699a      	ldr	r2, [r3, #24]
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	015b      	lsls	r3, r3, #5
 8000290:	4013      	ands	r3, r2
 8000292:	613b      	str	r3, [r7, #16]
 8000294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000296:	4b15      	ldr	r3, [pc, #84]	; (80002ec <HAL_SPI_MspInit+0x94>)
 8000298:	695a      	ldr	r2, [r3, #20]
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <HAL_SPI_MspInit+0x94>)
 800029c:	2180      	movs	r1, #128	; 0x80
 800029e:	02c9      	lsls	r1, r1, #11
 80002a0:	430a      	orrs	r2, r1
 80002a2:	615a      	str	r2, [r3, #20]
 80002a4:	4b11      	ldr	r3, [pc, #68]	; (80002ec <HAL_SPI_MspInit+0x94>)
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	02db      	lsls	r3, r3, #11
 80002ac:	4013      	ands	r3, r2
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80002b2:	0021      	movs	r1, r4
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2238      	movs	r2, #56	; 0x38
 80002b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2202      	movs	r2, #2
 80002be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2203      	movs	r2, #3
 80002ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2200      	movs	r2, #0
 80002d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <HAL_SPI_MspInit+0x98>)
 80002d6:	0019      	movs	r1, r3
 80002d8:	0010      	movs	r0, r2
 80002da:	f000 f979 	bl	80005d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b00b      	add	sp, #44	; 0x2c
 80002e4:	bd90      	pop	{r4, r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	40013000 	.word	0x40013000
 80002ec:	40021000 	.word	0x40021000
 80002f0:	48000400 	.word	0x48000400

080002f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002f8:	e7fe      	b.n	80002f8 <NMI_Handler+0x4>

080002fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002fa:	b580      	push	{r7, lr}
 80002fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002fe:	e7fe      	b.n	80002fe <HardFault_Handler+0x4>

08000300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}

0800030a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800030a:	b580      	push	{r7, lr}
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800030e:	46c0      	nop			; (mov r8, r8)
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000318:	f000 f866 	bl	80003e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800031c:	46c0      	nop			; (mov r8, r8)
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000326:	46c0      	nop			; (mov r8, r8)
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f7ff fff7 	bl	8000322 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f003 f8d9 	bl	8003510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff76 	bl	800024e <main>

08000362 <LoopForever>:

LoopForever:
    b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000370:	08005000 	.word	0x08005000
  ldr r2, =_sbss
 8000374:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000378:	200000a0 	.word	0x200000a0

0800037c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_IRQHandler>
	...

08000380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000380:	b590      	push	{r4, r7, lr}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000388:	4b14      	ldr	r3, [pc, #80]	; (80003dc <HAL_InitTick+0x5c>)
 800038a:	681c      	ldr	r4, [r3, #0]
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <HAL_InitTick+0x60>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	0019      	movs	r1, r3
 8000392:	23fa      	movs	r3, #250	; 0xfa
 8000394:	0098      	lsls	r0, r3, #2
 8000396:	f7ff febf 	bl	8000118 <__udivsi3>
 800039a:	0003      	movs	r3, r0
 800039c:	0019      	movs	r1, r3
 800039e:	0020      	movs	r0, r4
 80003a0:	f7ff feba 	bl	8000118 <__udivsi3>
 80003a4:	0003      	movs	r3, r0
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 f905 	bl	80005b6 <HAL_SYSTICK_Config>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80003b0:	2301      	movs	r3, #1
 80003b2:	e00f      	b.n	80003d4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d80b      	bhi.n	80003d2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ba:	6879      	ldr	r1, [r7, #4]
 80003bc:	2301      	movs	r3, #1
 80003be:	425b      	negs	r3, r3
 80003c0:	2200      	movs	r2, #0
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 f8e2 	bl	800058c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_InitTick+0x64>)
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80003ce:	2300      	movs	r3, #0
 80003d0:	e000      	b.n	80003d4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80003d2:	2301      	movs	r3, #1
}
 80003d4:	0018      	movs	r0, r3
 80003d6:	46bd      	mov	sp, r7
 80003d8:	b003      	add	sp, #12
 80003da:	bd90      	pop	{r4, r7, pc}
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000008 	.word	0x20000008
 80003e4:	20000004 	.word	0x20000004

080003e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003ec:	4b05      	ldr	r3, [pc, #20]	; (8000404 <HAL_IncTick+0x1c>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	001a      	movs	r2, r3
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <HAL_IncTick+0x20>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	18d2      	adds	r2, r2, r3
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <HAL_IncTick+0x20>)
 80003fa:	601a      	str	r2, [r3, #0]
}
 80003fc:	46c0      	nop			; (mov r8, r8)
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	20000008 	.word	0x20000008
 8000408:	2000002c 	.word	0x2000002c

0800040c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  return uwTick;
 8000410:	4b02      	ldr	r3, [pc, #8]	; (800041c <HAL_GetTick+0x10>)
 8000412:	681b      	ldr	r3, [r3, #0]
}
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	2000002c 	.word	0x2000002c

08000420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000428:	f7ff fff0 	bl	800040c <HAL_GetTick>
 800042c:	0003      	movs	r3, r0
 800042e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	d005      	beq.n	8000446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800043a:	4b0a      	ldr	r3, [pc, #40]	; (8000464 <HAL_Delay+0x44>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	001a      	movs	r2, r3
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	189b      	adds	r3, r3, r2
 8000444:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	f7ff ffe0 	bl	800040c <HAL_GetTick>
 800044c:	0002      	movs	r2, r0
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	429a      	cmp	r2, r3
 8000456:	d8f7      	bhi.n	8000448 <HAL_Delay+0x28>
  {
  }
}
 8000458:	46c0      	nop			; (mov r8, r8)
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	20000008 	.word	0x20000008

08000468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000468:	b590      	push	{r4, r7, lr}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	0002      	movs	r2, r0
 8000470:	6039      	str	r1, [r7, #0]
 8000472:	1dfb      	adds	r3, r7, #7
 8000474:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b7f      	cmp	r3, #127	; 0x7f
 800047c:	d828      	bhi.n	80004d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800047e:	4a2f      	ldr	r2, [pc, #188]	; (800053c <__NVIC_SetPriority+0xd4>)
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	b25b      	sxtb	r3, r3
 8000486:	089b      	lsrs	r3, r3, #2
 8000488:	33c0      	adds	r3, #192	; 0xc0
 800048a:	009b      	lsls	r3, r3, #2
 800048c:	589b      	ldr	r3, [r3, r2]
 800048e:	1dfa      	adds	r2, r7, #7
 8000490:	7812      	ldrb	r2, [r2, #0]
 8000492:	0011      	movs	r1, r2
 8000494:	2203      	movs	r2, #3
 8000496:	400a      	ands	r2, r1
 8000498:	00d2      	lsls	r2, r2, #3
 800049a:	21ff      	movs	r1, #255	; 0xff
 800049c:	4091      	lsls	r1, r2
 800049e:	000a      	movs	r2, r1
 80004a0:	43d2      	mvns	r2, r2
 80004a2:	401a      	ands	r2, r3
 80004a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	019b      	lsls	r3, r3, #6
 80004aa:	22ff      	movs	r2, #255	; 0xff
 80004ac:	401a      	ands	r2, r3
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	0018      	movs	r0, r3
 80004b4:	2303      	movs	r3, #3
 80004b6:	4003      	ands	r3, r0
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004bc:	481f      	ldr	r0, [pc, #124]	; (800053c <__NVIC_SetPriority+0xd4>)
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b25b      	sxtb	r3, r3
 80004c4:	089b      	lsrs	r3, r3, #2
 80004c6:	430a      	orrs	r2, r1
 80004c8:	33c0      	adds	r3, #192	; 0xc0
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004ce:	e031      	b.n	8000534 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d0:	4a1b      	ldr	r2, [pc, #108]	; (8000540 <__NVIC_SetPriority+0xd8>)
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	0019      	movs	r1, r3
 80004d8:	230f      	movs	r3, #15
 80004da:	400b      	ands	r3, r1
 80004dc:	3b08      	subs	r3, #8
 80004de:	089b      	lsrs	r3, r3, #2
 80004e0:	3306      	adds	r3, #6
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	3304      	adds	r3, #4
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	1dfa      	adds	r2, r7, #7
 80004ec:	7812      	ldrb	r2, [r2, #0]
 80004ee:	0011      	movs	r1, r2
 80004f0:	2203      	movs	r2, #3
 80004f2:	400a      	ands	r2, r1
 80004f4:	00d2      	lsls	r2, r2, #3
 80004f6:	21ff      	movs	r1, #255	; 0xff
 80004f8:	4091      	lsls	r1, r2
 80004fa:	000a      	movs	r2, r1
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	401a      	ands	r2, r3
 8000500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	019b      	lsls	r3, r3, #6
 8000506:	22ff      	movs	r2, #255	; 0xff
 8000508:	401a      	ands	r2, r3
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	0018      	movs	r0, r3
 8000510:	2303      	movs	r3, #3
 8000512:	4003      	ands	r3, r0
 8000514:	00db      	lsls	r3, r3, #3
 8000516:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <__NVIC_SetPriority+0xd8>)
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	001c      	movs	r4, r3
 8000520:	230f      	movs	r3, #15
 8000522:	4023      	ands	r3, r4
 8000524:	3b08      	subs	r3, #8
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	430a      	orrs	r2, r1
 800052a:	3306      	adds	r3, #6
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	18c3      	adds	r3, r0, r3
 8000530:	3304      	adds	r3, #4
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b003      	add	sp, #12
 800053a:	bd90      	pop	{r4, r7, pc}
 800053c:	e000e100 	.word	0xe000e100
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	1e5a      	subs	r2, r3, #1
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	045b      	lsls	r3, r3, #17
 8000554:	429a      	cmp	r2, r3
 8000556:	d301      	bcc.n	800055c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000558:	2301      	movs	r3, #1
 800055a:	e010      	b.n	800057e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <SysTick_Config+0x44>)
 800055e:	687a      	ldr	r2, [r7, #4]
 8000560:	3a01      	subs	r2, #1
 8000562:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000564:	2301      	movs	r3, #1
 8000566:	425b      	negs	r3, r3
 8000568:	2103      	movs	r1, #3
 800056a:	0018      	movs	r0, r3
 800056c:	f7ff ff7c 	bl	8000468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <SysTick_Config+0x44>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <SysTick_Config+0x44>)
 8000578:	2207      	movs	r2, #7
 800057a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800057c:	2300      	movs	r3, #0
}
 800057e:	0018      	movs	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	b002      	add	sp, #8
 8000584:	bd80      	pop	{r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	e000e010 	.word	0xe000e010

0800058c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
 8000596:	210f      	movs	r1, #15
 8000598:	187b      	adds	r3, r7, r1
 800059a:	1c02      	adds	r2, r0, #0
 800059c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	b25b      	sxtb	r3, r3
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff5d 	bl	8000468 <__NVIC_SetPriority>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b004      	add	sp, #16
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005b6:	b580      	push	{r7, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	0018      	movs	r0, r3
 80005c2:	f7ff ffbf 	bl	8000544 <SysTick_Config>
 80005c6:	0003      	movs	r3, r0
}
 80005c8:	0018      	movs	r0, r3
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b002      	add	sp, #8
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005de:	e14f      	b.n	8000880 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2101      	movs	r1, #1
 80005e6:	697a      	ldr	r2, [r7, #20]
 80005e8:	4091      	lsls	r1, r2
 80005ea:	000a      	movs	r2, r1
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d100      	bne.n	80005f8 <HAL_GPIO_Init+0x28>
 80005f6:	e140      	b.n	800087a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	2203      	movs	r2, #3
 80005fe:	4013      	ands	r3, r2
 8000600:	2b01      	cmp	r3, #1
 8000602:	d005      	beq.n	8000610 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800060c:	2b02      	cmp	r3, #2
 800060e:	d130      	bne.n	8000672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	2203      	movs	r2, #3
 800061c:	409a      	lsls	r2, r3
 800061e:	0013      	movs	r3, r2
 8000620:	43da      	mvns	r2, r3
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	4013      	ands	r3, r2
 8000626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	68da      	ldr	r2, [r3, #12]
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	409a      	lsls	r2, r3
 8000632:	0013      	movs	r3, r2
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	4313      	orrs	r3, r2
 8000638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000646:	2201      	movs	r2, #1
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	409a      	lsls	r2, r3
 800064c:	0013      	movs	r3, r2
 800064e:	43da      	mvns	r2, r3
 8000650:	693b      	ldr	r3, [r7, #16]
 8000652:	4013      	ands	r3, r2
 8000654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	685b      	ldr	r3, [r3, #4]
 800065a:	091b      	lsrs	r3, r3, #4
 800065c:	2201      	movs	r2, #1
 800065e:	401a      	ands	r2, r3
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	409a      	lsls	r2, r3
 8000664:	0013      	movs	r3, r2
 8000666:	693a      	ldr	r2, [r7, #16]
 8000668:	4313      	orrs	r3, r2
 800066a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	693a      	ldr	r2, [r7, #16]
 8000670:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2203      	movs	r2, #3
 8000678:	4013      	ands	r3, r2
 800067a:	2b03      	cmp	r3, #3
 800067c:	d017      	beq.n	80006ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2203      	movs	r2, #3
 800068a:	409a      	lsls	r2, r3
 800068c:	0013      	movs	r3, r2
 800068e:	43da      	mvns	r2, r3
 8000690:	693b      	ldr	r3, [r7, #16]
 8000692:	4013      	ands	r3, r2
 8000694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	689a      	ldr	r2, [r3, #8]
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	409a      	lsls	r2, r3
 80006a0:	0013      	movs	r3, r2
 80006a2:	693a      	ldr	r2, [r7, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	693a      	ldr	r2, [r7, #16]
 80006ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	2203      	movs	r2, #3
 80006b4:	4013      	ands	r3, r2
 80006b6:	2b02      	cmp	r3, #2
 80006b8:	d123      	bne.n	8000702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	08da      	lsrs	r2, r3, #3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3208      	adds	r2, #8
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	58d3      	ldr	r3, [r2, r3]
 80006c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	2207      	movs	r2, #7
 80006cc:	4013      	ands	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	220f      	movs	r2, #15
 80006d2:	409a      	lsls	r2, r3
 80006d4:	0013      	movs	r3, r2
 80006d6:	43da      	mvns	r2, r3
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	4013      	ands	r3, r2
 80006dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	691a      	ldr	r2, [r3, #16]
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	2107      	movs	r1, #7
 80006e6:	400b      	ands	r3, r1
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	409a      	lsls	r2, r3
 80006ec:	0013      	movs	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	08da      	lsrs	r2, r3, #3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3208      	adds	r2, #8
 80006fc:	0092      	lsls	r2, r2, #2
 80006fe:	6939      	ldr	r1, [r7, #16]
 8000700:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2203      	movs	r2, #3
 800070e:	409a      	lsls	r2, r3
 8000710:	0013      	movs	r3, r2
 8000712:	43da      	mvns	r2, r3
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	4013      	ands	r3, r2
 8000718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2203      	movs	r2, #3
 8000720:	401a      	ands	r2, r3
 8000722:	697b      	ldr	r3, [r7, #20]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	409a      	lsls	r2, r3
 8000728:	0013      	movs	r3, r2
 800072a:	693a      	ldr	r2, [r7, #16]
 800072c:	4313      	orrs	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	693a      	ldr	r2, [r7, #16]
 8000734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685a      	ldr	r2, [r3, #4]
 800073a:	23c0      	movs	r3, #192	; 0xc0
 800073c:	029b      	lsls	r3, r3, #10
 800073e:	4013      	ands	r3, r2
 8000740:	d100      	bne.n	8000744 <HAL_GPIO_Init+0x174>
 8000742:	e09a      	b.n	800087a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000744:	4b54      	ldr	r3, [pc, #336]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 8000746:	699a      	ldr	r2, [r3, #24]
 8000748:	4b53      	ldr	r3, [pc, #332]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 800074a:	2101      	movs	r1, #1
 800074c:	430a      	orrs	r2, r1
 800074e:	619a      	str	r2, [r3, #24]
 8000750:	4b51      	ldr	r3, [pc, #324]	; (8000898 <HAL_GPIO_Init+0x2c8>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	2201      	movs	r2, #1
 8000756:	4013      	ands	r3, r2
 8000758:	60bb      	str	r3, [r7, #8]
 800075a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800075c:	4a4f      	ldr	r2, [pc, #316]	; (800089c <HAL_GPIO_Init+0x2cc>)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	089b      	lsrs	r3, r3, #2
 8000762:	3302      	adds	r3, #2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	589b      	ldr	r3, [r3, r2]
 8000768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	2203      	movs	r2, #3
 800076e:	4013      	ands	r3, r2
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	220f      	movs	r2, #15
 8000774:	409a      	lsls	r2, r3
 8000776:	0013      	movs	r3, r2
 8000778:	43da      	mvns	r2, r3
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4013      	ands	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	2390      	movs	r3, #144	; 0x90
 8000784:	05db      	lsls	r3, r3, #23
 8000786:	429a      	cmp	r2, r3
 8000788:	d013      	beq.n	80007b2 <HAL_GPIO_Init+0x1e2>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a44      	ldr	r2, [pc, #272]	; (80008a0 <HAL_GPIO_Init+0x2d0>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d00d      	beq.n	80007ae <HAL_GPIO_Init+0x1de>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a43      	ldr	r2, [pc, #268]	; (80008a4 <HAL_GPIO_Init+0x2d4>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d007      	beq.n	80007aa <HAL_GPIO_Init+0x1da>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a42      	ldr	r2, [pc, #264]	; (80008a8 <HAL_GPIO_Init+0x2d8>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d101      	bne.n	80007a6 <HAL_GPIO_Init+0x1d6>
 80007a2:	2303      	movs	r3, #3
 80007a4:	e006      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007a6:	2305      	movs	r3, #5
 80007a8:	e004      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007aa:	2302      	movs	r3, #2
 80007ac:	e002      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007ae:	2301      	movs	r3, #1
 80007b0:	e000      	b.n	80007b4 <HAL_GPIO_Init+0x1e4>
 80007b2:	2300      	movs	r3, #0
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	2103      	movs	r1, #3
 80007b8:	400a      	ands	r2, r1
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	4093      	lsls	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80007c4:	4935      	ldr	r1, [pc, #212]	; (800089c <HAL_GPIO_Init+0x2cc>)
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	089b      	lsrs	r3, r3, #2
 80007ca:	3302      	adds	r3, #2
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	693a      	ldr	r2, [r7, #16]
 80007d0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	43da      	mvns	r2, r3
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	4013      	ands	r3, r2
 80007e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	685a      	ldr	r2, [r3, #4]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	035b      	lsls	r3, r3, #13
 80007ea:	4013      	ands	r3, r2
 80007ec:	d003      	beq.n	80007f6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007f6:	4b2d      	ldr	r3, [pc, #180]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	43da      	mvns	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685a      	ldr	r2, [r3, #4]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	039b      	lsls	r3, r3, #14
 8000814:	4013      	ands	r3, r2
 8000816:	d003      	beq.n	8000820 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000818:	693a      	ldr	r2, [r7, #16]
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4313      	orrs	r3, r2
 800081e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000820:	4b22      	ldr	r3, [pc, #136]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	43da      	mvns	r2, r3
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	4013      	ands	r3, r2
 8000834:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	029b      	lsls	r3, r3, #10
 800083e:	4013      	ands	r3, r2
 8000840:	d003      	beq.n	800084a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4313      	orrs	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	43da      	mvns	r2, r3
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	4013      	ands	r3, r2
 800085e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	025b      	lsls	r3, r3, #9
 8000868:	4013      	ands	r3, r2
 800086a:	d003      	beq.n	8000874 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800086c:	693a      	ldr	r2, [r7, #16]
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	4313      	orrs	r3, r2
 8000872:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000874:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <HAL_GPIO_Init+0x2dc>)
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	3301      	adds	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	40da      	lsrs	r2, r3
 8000888:	1e13      	subs	r3, r2, #0
 800088a:	d000      	beq.n	800088e <HAL_GPIO_Init+0x2be>
 800088c:	e6a8      	b.n	80005e0 <HAL_GPIO_Init+0x10>
  } 
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b006      	add	sp, #24
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000
 80008a0:	48000400 	.word	0x48000400
 80008a4:	48000800 	.word	0x48000800
 80008a8:	48000c00 	.word	0x48000c00
 80008ac:	40010400 	.word	0x40010400

080008b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	0008      	movs	r0, r1
 80008ba:	0011      	movs	r1, r2
 80008bc:	1cbb      	adds	r3, r7, #2
 80008be:	1c02      	adds	r2, r0, #0
 80008c0:	801a      	strh	r2, [r3, #0]
 80008c2:	1c7b      	adds	r3, r7, #1
 80008c4:	1c0a      	adds	r2, r1, #0
 80008c6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80008c8:	1c7b      	adds	r3, r7, #1
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008d0:	1cbb      	adds	r3, r7, #2
 80008d2:	881a      	ldrh	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80008d8:	e003      	b.n	80008e2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008da:	1cbb      	adds	r3, r7, #2
 80008dc:	881a      	ldrh	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
	...

080008ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b088      	sub	sp, #32
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e301      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	d100      	bne.n	800090a <HAL_RCC_OscConfig+0x1e>
 8000908:	e08d      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800090a:	4bc3      	ldr	r3, [pc, #780]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	220c      	movs	r2, #12
 8000910:	4013      	ands	r3, r2
 8000912:	2b04      	cmp	r3, #4
 8000914:	d00e      	beq.n	8000934 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000916:	4bc0      	ldr	r3, [pc, #768]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	220c      	movs	r2, #12
 800091c:	4013      	ands	r3, r2
 800091e:	2b08      	cmp	r3, #8
 8000920:	d116      	bne.n	8000950 <HAL_RCC_OscConfig+0x64>
 8000922:	4bbd      	ldr	r3, [pc, #756]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	025b      	lsls	r3, r3, #9
 800092a:	401a      	ands	r2, r3
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	025b      	lsls	r3, r3, #9
 8000930:	429a      	cmp	r2, r3
 8000932:	d10d      	bne.n	8000950 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000934:	4bb8      	ldr	r3, [pc, #736]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	029b      	lsls	r3, r3, #10
 800093c:	4013      	ands	r3, r2
 800093e:	d100      	bne.n	8000942 <HAL_RCC_OscConfig+0x56>
 8000940:	e070      	b.n	8000a24 <HAL_RCC_OscConfig+0x138>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d000      	beq.n	800094c <HAL_RCC_OscConfig+0x60>
 800094a:	e06b      	b.n	8000a24 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e2d8      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d107      	bne.n	8000968 <HAL_RCC_OscConfig+0x7c>
 8000958:	4baf      	ldr	r3, [pc, #700]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4bae      	ldr	r3, [pc, #696]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800095e:	2180      	movs	r1, #128	; 0x80
 8000960:	0249      	lsls	r1, r1, #9
 8000962:	430a      	orrs	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	e02f      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d10c      	bne.n	800098a <HAL_RCC_OscConfig+0x9e>
 8000970:	4ba9      	ldr	r3, [pc, #676]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4ba8      	ldr	r3, [pc, #672]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000976:	49a9      	ldr	r1, [pc, #676]	; (8000c1c <HAL_RCC_OscConfig+0x330>)
 8000978:	400a      	ands	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	4ba6      	ldr	r3, [pc, #664]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4ba5      	ldr	r3, [pc, #660]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000982:	49a7      	ldr	r1, [pc, #668]	; (8000c20 <HAL_RCC_OscConfig+0x334>)
 8000984:	400a      	ands	r2, r1
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	e01e      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b05      	cmp	r3, #5
 8000990:	d10e      	bne.n	80009b0 <HAL_RCC_OscConfig+0xc4>
 8000992:	4ba1      	ldr	r3, [pc, #644]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	4ba0      	ldr	r3, [pc, #640]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	02c9      	lsls	r1, r1, #11
 800099c:	430a      	orrs	r2, r1
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	4b9d      	ldr	r3, [pc, #628]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b9c      	ldr	r3, [pc, #624]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	0249      	lsls	r1, r1, #9
 80009aa:	430a      	orrs	r2, r1
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	e00b      	b.n	80009c8 <HAL_RCC_OscConfig+0xdc>
 80009b0:	4b99      	ldr	r3, [pc, #612]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	4b98      	ldr	r3, [pc, #608]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009b6:	4999      	ldr	r1, [pc, #612]	; (8000c1c <HAL_RCC_OscConfig+0x330>)
 80009b8:	400a      	ands	r2, r1
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	4b96      	ldr	r3, [pc, #600]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b95      	ldr	r3, [pc, #596]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009c2:	4997      	ldr	r1, [pc, #604]	; (8000c20 <HAL_RCC_OscConfig+0x334>)
 80009c4:	400a      	ands	r2, r1
 80009c6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d014      	beq.n	80009fa <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d0:	f7ff fd1c 	bl	800040c <HAL_GetTick>
 80009d4:	0003      	movs	r3, r0
 80009d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009d8:	e008      	b.n	80009ec <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009da:	f7ff fd17 	bl	800040c <HAL_GetTick>
 80009de:	0002      	movs	r2, r0
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	2b64      	cmp	r3, #100	; 0x64
 80009e6:	d901      	bls.n	80009ec <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80009e8:	2303      	movs	r3, #3
 80009ea:	e28a      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ec:	4b8a      	ldr	r3, [pc, #552]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	d0f0      	beq.n	80009da <HAL_RCC_OscConfig+0xee>
 80009f8:	e015      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009fa:	f7ff fd07 	bl	800040c <HAL_GetTick>
 80009fe:	0003      	movs	r3, r0
 8000a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a02:	e008      	b.n	8000a16 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fd02 	bl	800040c <HAL_GetTick>
 8000a08:	0002      	movs	r2, r0
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	2b64      	cmp	r3, #100	; 0x64
 8000a10:	d901      	bls.n	8000a16 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000a12:	2303      	movs	r3, #3
 8000a14:	e275      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	4b80      	ldr	r3, [pc, #512]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	029b      	lsls	r3, r3, #10
 8000a1e:	4013      	ands	r3, r2
 8000a20:	d1f0      	bne.n	8000a04 <HAL_RCC_OscConfig+0x118>
 8000a22:	e000      	b.n	8000a26 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a24:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	d100      	bne.n	8000a32 <HAL_RCC_OscConfig+0x146>
 8000a30:	e069      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a32:	4b79      	ldr	r3, [pc, #484]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	220c      	movs	r2, #12
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d00b      	beq.n	8000a54 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a3c:	4b76      	ldr	r3, [pc, #472]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	220c      	movs	r2, #12
 8000a42:	4013      	ands	r3, r2
 8000a44:	2b08      	cmp	r3, #8
 8000a46:	d11c      	bne.n	8000a82 <HAL_RCC_OscConfig+0x196>
 8000a48:	4b73      	ldr	r3, [pc, #460]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	025b      	lsls	r3, r3, #9
 8000a50:	4013      	ands	r3, r2
 8000a52:	d116      	bne.n	8000a82 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a54:	4b70      	ldr	r3, [pc, #448]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2202      	movs	r2, #2
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	d005      	beq.n	8000a6a <HAL_RCC_OscConfig+0x17e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d001      	beq.n	8000a6a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e24b      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a6a:	4b6b      	ldr	r3, [pc, #428]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	22f8      	movs	r2, #248	; 0xf8
 8000a70:	4393      	bics	r3, r2
 8000a72:	0019      	movs	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	00da      	lsls	r2, r3, #3
 8000a7a:	4b67      	ldr	r3, [pc, #412]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a80:	e041      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d024      	beq.n	8000ad4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000a8a:	4b63      	ldr	r3, [pc, #396]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	4b62      	ldr	r3, [pc, #392]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000a90:	2101      	movs	r1, #1
 8000a92:	430a      	orrs	r2, r1
 8000a94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a96:	f7ff fcb9 	bl	800040c <HAL_GetTick>
 8000a9a:	0003      	movs	r3, r0
 8000a9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a9e:	e008      	b.n	8000ab2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fcb4 	bl	800040c <HAL_GetTick>
 8000aa4:	0002      	movs	r2, r0
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d901      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	e227      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ab2:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	4013      	ands	r3, r2
 8000aba:	d0f1      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000abc:	4b56      	ldr	r3, [pc, #344]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	22f8      	movs	r2, #248	; 0xf8
 8000ac2:	4393      	bics	r3, r2
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	00da      	lsls	r2, r3, #3
 8000acc:	4b52      	ldr	r3, [pc, #328]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	e018      	b.n	8000b06 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ad4:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	4b4f      	ldr	r3, [pc, #316]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	438a      	bics	r2, r1
 8000ade:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ae0:	f7ff fc94 	bl	800040c <HAL_GetTick>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ae8:	e008      	b.n	8000afc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aea:	f7ff fc8f 	bl	800040c <HAL_GetTick>
 8000aee:	0002      	movs	r2, r0
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d901      	bls.n	8000afc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000af8:	2303      	movs	r3, #3
 8000afa:	e202      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000afc:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2202      	movs	r2, #2
 8000b02:	4013      	ands	r3, r2
 8000b04:	d1f1      	bne.n	8000aea <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2208      	movs	r2, #8
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d036      	beq.n	8000b7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d019      	beq.n	8000b4c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b18:	4b3f      	ldr	r3, [pc, #252]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b24:	f7ff fc72 	bl	800040c <HAL_GetTick>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b2c:	e008      	b.n	8000b40 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b2e:	f7ff fc6d 	bl	800040c <HAL_GetTick>
 8000b32:	0002      	movs	r2, r0
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	1ad3      	subs	r3, r2, r3
 8000b38:	2b02      	cmp	r3, #2
 8000b3a:	d901      	bls.n	8000b40 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	e1e0      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b44:	2202      	movs	r2, #2
 8000b46:	4013      	ands	r3, r2
 8000b48:	d0f1      	beq.n	8000b2e <HAL_RCC_OscConfig+0x242>
 8000b4a:	e018      	b.n	8000b7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000b4c:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000b50:	4b31      	ldr	r3, [pc, #196]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	438a      	bics	r2, r1
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b58:	f7ff fc58 	bl	800040c <HAL_GetTick>
 8000b5c:	0003      	movs	r3, r0
 8000b5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b60:	e008      	b.n	8000b74 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b62:	f7ff fc53 	bl	800040c <HAL_GetTick>
 8000b66:	0002      	movs	r2, r0
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d901      	bls.n	8000b74 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e1c6      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b74:	4b28      	ldr	r3, [pc, #160]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	2202      	movs	r2, #2
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	d1f1      	bne.n	8000b62 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	2204      	movs	r2, #4
 8000b84:	4013      	ands	r3, r2
 8000b86:	d100      	bne.n	8000b8a <HAL_RCC_OscConfig+0x29e>
 8000b88:	e0b4      	b.n	8000cf4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000b8a:	201f      	movs	r0, #31
 8000b8c:	183b      	adds	r3, r7, r0
 8000b8e:	2200      	movs	r2, #0
 8000b90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b92:	4b21      	ldr	r3, [pc, #132]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000b94:	69da      	ldr	r2, [r3, #28]
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	055b      	lsls	r3, r3, #21
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	d110      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ba0:	69da      	ldr	r2, [r3, #28]
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000ba4:	2180      	movs	r1, #128	; 0x80
 8000ba6:	0549      	lsls	r1, r1, #21
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	61da      	str	r2, [r3, #28]
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000bae:	69da      	ldr	r2, [r3, #28]
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	055b      	lsls	r3, r3, #21
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000bba:	183b      	adds	r3, r7, r0
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	d11a      	bne.n	8000c02 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0049      	lsls	r1, r1, #1
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000bda:	f7ff fc17 	bl	800040c <HAL_GetTick>
 8000bde:	0003      	movs	r3, r0
 8000be0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000be2:	e008      	b.n	8000bf6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000be4:	f7ff fc12 	bl	800040c <HAL_GetTick>
 8000be8:	0002      	movs	r2, r0
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	2b64      	cmp	r3, #100	; 0x64
 8000bf0:	d901      	bls.n	8000bf6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e185      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <HAL_RCC_OscConfig+0x338>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4013      	ands	r3, r2
 8000c00:	d0f0      	beq.n	8000be4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d10e      	bne.n	8000c28 <HAL_RCC_OscConfig+0x33c>
 8000c0a:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000c0c:	6a1a      	ldr	r2, [r3, #32]
 8000c0e:	4b02      	ldr	r3, [pc, #8]	; (8000c18 <HAL_RCC_OscConfig+0x32c>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	621a      	str	r2, [r3, #32]
 8000c16:	e035      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	fffeffff 	.word	0xfffeffff
 8000c20:	fffbffff 	.word	0xfffbffff
 8000c24:	40007000 	.word	0x40007000
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d10c      	bne.n	8000c4a <HAL_RCC_OscConfig+0x35e>
 8000c30:	4bb6      	ldr	r3, [pc, #728]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	4bb5      	ldr	r3, [pc, #724]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	438a      	bics	r2, r1
 8000c3a:	621a      	str	r2, [r3, #32]
 8000c3c:	4bb3      	ldr	r3, [pc, #716]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c3e:	6a1a      	ldr	r2, [r3, #32]
 8000c40:	4bb2      	ldr	r3, [pc, #712]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c42:	2104      	movs	r1, #4
 8000c44:	438a      	bics	r2, r1
 8000c46:	621a      	str	r2, [r3, #32]
 8000c48:	e01c      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	2b05      	cmp	r3, #5
 8000c50:	d10c      	bne.n	8000c6c <HAL_RCC_OscConfig+0x380>
 8000c52:	4bae      	ldr	r3, [pc, #696]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c54:	6a1a      	ldr	r2, [r3, #32]
 8000c56:	4bad      	ldr	r3, [pc, #692]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c58:	2104      	movs	r1, #4
 8000c5a:	430a      	orrs	r2, r1
 8000c5c:	621a      	str	r2, [r3, #32]
 8000c5e:	4bab      	ldr	r3, [pc, #684]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c60:	6a1a      	ldr	r2, [r3, #32]
 8000c62:	4baa      	ldr	r3, [pc, #680]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	430a      	orrs	r2, r1
 8000c68:	621a      	str	r2, [r3, #32]
 8000c6a:	e00b      	b.n	8000c84 <HAL_RCC_OscConfig+0x398>
 8000c6c:	4ba7      	ldr	r3, [pc, #668]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c6e:	6a1a      	ldr	r2, [r3, #32]
 8000c70:	4ba6      	ldr	r3, [pc, #664]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c72:	2101      	movs	r1, #1
 8000c74:	438a      	bics	r2, r1
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	4ba4      	ldr	r3, [pc, #656]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c7a:	6a1a      	ldr	r2, [r3, #32]
 8000c7c:	4ba3      	ldr	r3, [pc, #652]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000c7e:	2104      	movs	r1, #4
 8000c80:	438a      	bics	r2, r1
 8000c82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d014      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8c:	f7ff fbbe 	bl	800040c <HAL_GetTick>
 8000c90:	0003      	movs	r3, r0
 8000c92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c94:	e009      	b.n	8000caa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c96:	f7ff fbb9 	bl	800040c <HAL_GetTick>
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	69bb      	ldr	r3, [r7, #24]
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	4a9b      	ldr	r2, [pc, #620]	; (8000f10 <HAL_RCC_OscConfig+0x624>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e12b      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000caa:	4b98      	ldr	r3, [pc, #608]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d0f0      	beq.n	8000c96 <HAL_RCC_OscConfig+0x3aa>
 8000cb4:	e013      	b.n	8000cde <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb6:	f7ff fba9 	bl	800040c <HAL_GetTick>
 8000cba:	0003      	movs	r3, r0
 8000cbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cbe:	e009      	b.n	8000cd4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fba4 	bl	800040c <HAL_GetTick>
 8000cc4:	0002      	movs	r2, r0
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	4a91      	ldr	r2, [pc, #580]	; (8000f10 <HAL_RCC_OscConfig+0x624>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d901      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	e116      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cd4:	4b8d      	ldr	r3, [pc, #564]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	2202      	movs	r2, #2
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d1f0      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000cde:	231f      	movs	r3, #31
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d105      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ce8:	4b88      	ldr	r3, [pc, #544]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cea:	69da      	ldr	r2, [r3, #28]
 8000cec:	4b87      	ldr	r3, [pc, #540]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000cee:	4989      	ldr	r1, [pc, #548]	; (8000f14 <HAL_RCC_OscConfig+0x628>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2210      	movs	r2, #16
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d12a      	bne.n	8000d5c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d06:	4b81      	ldr	r3, [pc, #516]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d0a:	4b80      	ldr	r3, [pc, #512]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000d12:	4b7e      	ldr	r3, [pc, #504]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d16:	4b7d      	ldr	r3, [pc, #500]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d18:	2101      	movs	r1, #1
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1e:	f7ff fb75 	bl	800040c <HAL_GetTick>
 8000d22:	0003      	movs	r3, r0
 8000d24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d26:	e008      	b.n	8000d3a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000d28:	f7ff fb70 	bl	800040c <HAL_GetTick>
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d901      	bls.n	8000d3a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000d36:	2303      	movs	r3, #3
 8000d38:	e0e3      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000d3a:	4b74      	ldr	r3, [pc, #464]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	2202      	movs	r2, #2
 8000d40:	4013      	ands	r3, r2
 8000d42:	d0f1      	beq.n	8000d28 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d44:	4b71      	ldr	r3, [pc, #452]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d48:	22f8      	movs	r2, #248	; 0xf8
 8000d4a:	4393      	bics	r3, r2
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	00da      	lsls	r2, r3, #3
 8000d54:	4b6d      	ldr	r3, [pc, #436]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d56:	430a      	orrs	r2, r1
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
 8000d5a:	e034      	b.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	3305      	adds	r3, #5
 8000d62:	d111      	bne.n	8000d88 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d64:	4b69      	ldr	r3, [pc, #420]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	22f8      	movs	r2, #248	; 0xf8
 8000d76:	4393      	bics	r3, r2
 8000d78:	0019      	movs	r1, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	00da      	lsls	r2, r3, #3
 8000d80:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d82:	430a      	orrs	r2, r1
 8000d84:	635a      	str	r2, [r3, #52]	; 0x34
 8000d86:	e01e      	b.n	8000dc6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000d88:	4b60      	ldr	r3, [pc, #384]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d8e:	2104      	movs	r1, #4
 8000d90:	430a      	orrs	r2, r1
 8000d92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000d94:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d98:	4b5c      	ldr	r3, [pc, #368]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	438a      	bics	r2, r1
 8000d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da0:	f7ff fb34 	bl	800040c <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000da8:	e008      	b.n	8000dbc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000daa:	f7ff fb2f 	bl	800040c <HAL_GetTick>
 8000dae:	0002      	movs	r2, r0
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d901      	bls.n	8000dbc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e0a2      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	d1f1      	bne.n	8000daa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a1b      	ldr	r3, [r3, #32]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x4e4>
 8000dce:	e097      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	220c      	movs	r2, #12
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d100      	bne.n	8000dde <HAL_RCC_OscConfig+0x4f2>
 8000ddc:	e06b      	b.n	8000eb6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6a1b      	ldr	r3, [r3, #32]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d14c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de6:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b48      	ldr	r3, [pc, #288]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000dec:	494a      	ldr	r1, [pc, #296]	; (8000f18 <HAL_RCC_OscConfig+0x62c>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fb0b 	bl	800040c <HAL_GetTick>
 8000df6:	0003      	movs	r3, r0
 8000df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dfc:	f7ff fb06 	bl	800040c <HAL_GetTick>
 8000e00:	0002      	movs	r2, r0
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e079      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0e:	4b3f      	ldr	r3, [pc, #252]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	049b      	lsls	r3, r3, #18
 8000e16:	4013      	ands	r3, r2
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e1a:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	220f      	movs	r2, #15
 8000e20:	4393      	bics	r3, r2
 8000e22:	0019      	movs	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e28:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e2e:	4b37      	ldr	r3, [pc, #220]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4a3a      	ldr	r2, [pc, #232]	; (8000f1c <HAL_RCC_OscConfig+0x630>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	0019      	movs	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	431a      	orrs	r2, r3
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e44:	430a      	orrs	r2, r1
 8000e46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e48:	4b30      	ldr	r3, [pc, #192]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	0449      	lsls	r1, r1, #17
 8000e52:	430a      	orrs	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e56:	f7ff fad9 	bl	800040c <HAL_GetTick>
 8000e5a:	0003      	movs	r3, r0
 8000e5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e60:	f7ff fad4 	bl	800040c <HAL_GetTick>
 8000e64:	0002      	movs	r2, r0
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e047      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	049b      	lsls	r3, r3, #18
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0x574>
 8000e7e:	e03f      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000e86:	4924      	ldr	r1, [pc, #144]	; (8000f18 <HAL_RCC_OscConfig+0x62c>)
 8000e88:	400a      	ands	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8c:	f7ff fabe 	bl	800040c <HAL_GetTick>
 8000e90:	0003      	movs	r3, r0
 8000e92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	e008      	b.n	8000ea8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e96:	f7ff fab9 	bl	800040c <HAL_GetTick>
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	1ad3      	subs	r3, r2, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d901      	bls.n	8000ea8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e02c      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ea8:	4b18      	ldr	r3, [pc, #96]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	049b      	lsls	r3, r3, #18
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d1f0      	bne.n	8000e96 <HAL_RCC_OscConfig+0x5aa>
 8000eb4:	e024      	b.n	8000f00 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e01f      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000ec2:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_RCC_OscConfig+0x620>)
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	401a      	ands	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d10e      	bne.n	8000efc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d107      	bne.n	8000efc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	23f0      	movs	r3, #240	; 0xf0
 8000ef0:	039b      	lsls	r3, r3, #14
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d001      	beq.n	8000f00 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e000      	b.n	8000f02 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	0018      	movs	r0, r3
 8000f04:	46bd      	mov	sp, r7
 8000f06:	b008      	add	sp, #32
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	00001388 	.word	0x00001388
 8000f14:	efffffff 	.word	0xefffffff
 8000f18:	feffffff 	.word	0xfeffffff
 8000f1c:	ffc2ffff 	.word	0xffc2ffff

08000f20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0b3      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f34:	4b5b      	ldr	r3, [pc, #364]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	683a      	ldr	r2, [r7, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d911      	bls.n	8000f66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f42:	4b58      	ldr	r3, [pc, #352]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4393      	bics	r3, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	4b55      	ldr	r3, [pc, #340]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f54:	4b53      	ldr	r3, [pc, #332]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	683a      	ldr	r2, [r7, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d001      	beq.n	8000f66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e09a      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	d015      	beq.n	8000f9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2204      	movs	r2, #4
 8000f76:	4013      	ands	r3, r2
 8000f78:	d006      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f80:	21e0      	movs	r1, #224	; 0xe0
 8000f82:	00c9      	lsls	r1, r1, #3
 8000f84:	430a      	orrs	r2, r1
 8000f86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	22f0      	movs	r2, #240	; 0xf0
 8000f8e:	4393      	bics	r3, r2
 8000f90:	0019      	movs	r1, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d040      	beq.n	8001028 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d107      	bne.n	8000fbe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	4b3e      	ldr	r3, [pc, #248]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	029b      	lsls	r3, r3, #10
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d114      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e06e      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	049b      	lsls	r3, r3, #18
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d108      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e062      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd6:	4b34      	ldr	r3, [pc, #208]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2202      	movs	r2, #2
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d101      	bne.n	8000fe4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e05b      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe4:	4b30      	ldr	r3, [pc, #192]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4393      	bics	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ff8:	f7ff fa08 	bl	800040c <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001000:	e009      	b.n	8001016 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001002:	f7ff fa03 	bl	800040c <HAL_GetTick>
 8001006:	0002      	movs	r2, r0
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	4a27      	ldr	r2, [pc, #156]	; (80010ac <HAL_RCC_ClockConfig+0x18c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d901      	bls.n	8001016 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001012:	2303      	movs	r3, #3
 8001014:	e042      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001016:	4b24      	ldr	r3, [pc, #144]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	220c      	movs	r2, #12
 800101c:	401a      	ands	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	429a      	cmp	r2, r3
 8001026:	d1ec      	bne.n	8001002 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2201      	movs	r2, #1
 800102e:	4013      	ands	r3, r2
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	429a      	cmp	r2, r3
 8001034:	d211      	bcs.n	800105a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2201      	movs	r2, #1
 800103c:	4393      	bics	r3, r2
 800103e:	0019      	movs	r1, r3
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_RCC_ClockConfig+0x184>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2201      	movs	r2, #1
 800104e:	4013      	ands	r3, r2
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d001      	beq.n	800105a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e020      	b.n	800109c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d009      	beq.n	8001078 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_RCC_ClockConfig+0x190>)
 800106a:	4013      	ands	r3, r2
 800106c:	0019      	movs	r1, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001074:	430a      	orrs	r2, r1
 8001076:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001078:	f000 f820 	bl	80010bc <HAL_RCC_GetSysClockFreq>
 800107c:	0001      	movs	r1, r0
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <HAL_RCC_ClockConfig+0x188>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	091b      	lsrs	r3, r3, #4
 8001084:	220f      	movs	r2, #15
 8001086:	4013      	ands	r3, r2
 8001088:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <HAL_RCC_ClockConfig+0x194>)
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	000a      	movs	r2, r1
 800108e:	40da      	lsrs	r2, r3
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <HAL_RCC_ClockConfig+0x198>)
 8001092:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff f973 	bl	8000380 <HAL_InitTick>
  
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
}
 800109c:	0018      	movs	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	b004      	add	sp, #16
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40022000 	.word	0x40022000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	00001388 	.word	0x00001388
 80010b0:	fffff8ff 	.word	0xfffff8ff
 80010b4:	080035c8 	.word	0x080035c8
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	2300      	movs	r3, #0
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_RCC_GetSysClockFreq+0x9c>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	220c      	movs	r2, #12
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	d002      	beq.n	80010ec <HAL_RCC_GetSysClockFreq+0x30>
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d003      	beq.n	80010f2 <HAL_RCC_GetSysClockFreq+0x36>
 80010ea:	e02c      	b.n	8001146 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 80010ee:	613b      	str	r3, [r7, #16]
      break;
 80010f0:	e02c      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	220f      	movs	r2, #15
 80010f8:	4013      	ands	r3, r2
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_RCC_GetSysClockFreq+0xa4>)
 80010fc:	5cd3      	ldrb	r3, [r2, r3]
 80010fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001104:	220f      	movs	r2, #15
 8001106:	4013      	ands	r3, r2
 8001108:	4a16      	ldr	r2, [pc, #88]	; (8001164 <HAL_RCC_GetSysClockFreq+0xa8>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	025b      	lsls	r3, r3, #9
 8001114:	4013      	ands	r3, r2
 8001116:	d009      	beq.n	800112c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 800111c:	f7fe fffc 	bl	8000118 <__udivsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	001a      	movs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4353      	muls	r3, r2
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e009      	b.n	8001140 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	000a      	movs	r2, r1
 8001130:	0152      	lsls	r2, r2, #5
 8001132:	1a52      	subs	r2, r2, r1
 8001134:	0193      	lsls	r3, r2, #6
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	185b      	adds	r3, r3, r1
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
      break;
 8001144:	e002      	b.n	800114c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001148:	613b      	str	r3, [r7, #16]
      break;
 800114a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800114c:	693b      	ldr	r3, [r7, #16]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b006      	add	sp, #24
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	40021000 	.word	0x40021000
 800115c:	007a1200 	.word	0x007a1200
 8001160:	080035d8 	.word	0x080035d8
 8001164:	080035e8 	.word	0x080035e8

08001168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e0a8      	b.n	80012cc <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117e:	2b00      	cmp	r3, #0
 8001180:	d109      	bne.n	8001196 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	2382      	movs	r3, #130	; 0x82
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	429a      	cmp	r2, r3
 800118c:	d009      	beq.n	80011a2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
 8001194:	e005      	b.n	80011a2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	225d      	movs	r2, #93	; 0x5d
 80011ac:	5c9b      	ldrb	r3, [r3, r2]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	225c      	movs	r2, #92	; 0x5c
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0018      	movs	r0, r3
 80011c0:	f7ff f84a 	bl	8000258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	225d      	movs	r2, #93	; 0x5d
 80011c8:	2102      	movs	r1, #2
 80011ca:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2140      	movs	r1, #64	; 0x40
 80011d8:	438a      	bics	r2, r1
 80011da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	23e0      	movs	r3, #224	; 0xe0
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d902      	bls.n	80011ee <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e002      	b.n	80011f4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80011ee:	2380      	movs	r3, #128	; 0x80
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	23f0      	movs	r3, #240	; 0xf0
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d008      	beq.n	8001212 <HAL_SPI_Init+0xaa>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	23e0      	movs	r3, #224	; 0xe0
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	429a      	cmp	r2, r3
 800120a:	d002      	beq.n	8001212 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2382      	movs	r3, #130	; 0x82
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6899      	ldr	r1, [r3, #8]
 8001220:	2384      	movs	r3, #132	; 0x84
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	400b      	ands	r3, r1
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2102      	movs	r1, #2
 800122e:	400b      	ands	r3, r1
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	2101      	movs	r1, #1
 8001238:	400b      	ands	r3, r1
 800123a:	431a      	orrs	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6999      	ldr	r1, [r3, #24]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	400b      	ands	r3, r1
 8001246:	431a      	orrs	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2138      	movs	r1, #56	; 0x38
 800124e:	400b      	ands	r3, r1
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	2180      	movs	r1, #128	; 0x80
 8001258:	400b      	ands	r3, r1
 800125a:	431a      	orrs	r2, r3
 800125c:	0011      	movs	r1, r2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	019b      	lsls	r3, r3, #6
 8001266:	401a      	ands	r2, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	0c1b      	lsrs	r3, r3, #16
 8001276:	2204      	movs	r2, #4
 8001278:	401a      	ands	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127e:	2110      	movs	r1, #16
 8001280:	400b      	ands	r3, r1
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001288:	2108      	movs	r1, #8
 800128a:	400b      	ands	r3, r1
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68d9      	ldr	r1, [r3, #12]
 8001292:	23f0      	movs	r3, #240	; 0xf0
 8001294:	011b      	lsls	r3, r3, #4
 8001296:	400b      	ands	r3, r1
 8001298:	431a      	orrs	r2, r3
 800129a:	0011      	movs	r1, r2
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	015b      	lsls	r3, r3, #5
 80012a2:	401a      	ands	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	430a      	orrs	r2, r1
 80012aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	69da      	ldr	r2, [r3, #28]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4907      	ldr	r1, [pc, #28]	; (80012d4 <HAL_SPI_Init+0x16c>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	225d      	movs	r2, #93	; 0x5d
 80012c6:	2101      	movs	r1, #1
 80012c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	0018      	movs	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b004      	add	sp, #16
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	fffff7ff 	.word	0xfffff7ff

080012d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08a      	sub	sp, #40	; 0x28
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	001a      	movs	r2, r3
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80012ea:	2301      	movs	r3, #1
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80012ee:	2323      	movs	r3, #35	; 0x23
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	2200      	movs	r2, #0
 80012f4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	225c      	movs	r2, #92	; 0x5c
 80012fa:	5c9b      	ldrb	r3, [r3, r2]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d101      	bne.n	8001304 <HAL_SPI_TransmitReceive+0x2c>
 8001300:	2302      	movs	r3, #2
 8001302:	e1c4      	b.n	800168e <HAL_SPI_TransmitReceive+0x3b6>
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	225c      	movs	r2, #92	; 0x5c
 8001308:	2101      	movs	r1, #1
 800130a:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800130c:	f7ff f87e 	bl	800040c <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001314:	201b      	movs	r0, #27
 8001316:	183b      	adds	r3, r7, r0
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	215d      	movs	r1, #93	; 0x5d
 800131c:	5c52      	ldrb	r2, [r2, r1]
 800131e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8001326:	2312      	movs	r3, #18
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	1cba      	adds	r2, r7, #2
 800132c:	8812      	ldrh	r2, [r2, #0]
 800132e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001330:	183b      	adds	r3, r7, r0
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d011      	beq.n	800135c <HAL_SPI_TransmitReceive+0x84>
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	2382      	movs	r3, #130	; 0x82
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	429a      	cmp	r2, r3
 8001340:	d107      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d103      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x7a>
 800134a:	183b      	adds	r3, r7, r0
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b04      	cmp	r3, #4
 8001350:	d004      	beq.n	800135c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8001352:	2323      	movs	r3, #35	; 0x23
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2202      	movs	r2, #2
 8001358:	701a      	strb	r2, [r3, #0]
    goto error;
 800135a:	e191      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x98>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_SPI_TransmitReceive+0x98>
 8001368:	1cbb      	adds	r3, r7, #2
 800136a:	881b      	ldrh	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d104      	bne.n	800137a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8001370:	2323      	movs	r3, #35	; 0x23
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
    goto error;
 8001378:	e182      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	225d      	movs	r2, #93	; 0x5d
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b04      	cmp	r3, #4
 8001384:	d003      	beq.n	800138e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	225d      	movs	r2, #93	; 0x5d
 800138a:	2105      	movs	r1, #5
 800138c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2200      	movs	r2, #0
 8001392:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	1cba      	adds	r2, r7, #2
 800139e:	2146      	movs	r1, #70	; 0x46
 80013a0:	8812      	ldrh	r2, [r2, #0]
 80013a2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1cba      	adds	r2, r7, #2
 80013a8:	2144      	movs	r1, #68	; 0x44
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	1cba      	adds	r2, r7, #2
 80013b8:	8812      	ldrh	r2, [r2, #0]
 80013ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	1cba      	adds	r2, r7, #2
 80013c0:	8812      	ldrh	r2, [r2, #0]
 80013c2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	2200      	movs	r2, #0
 80013ce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	23e0      	movs	r3, #224	; 0xe0
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	429a      	cmp	r2, r3
 80013da:	d908      	bls.n	80013ee <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	49ac      	ldr	r1, [pc, #688]	; (8001698 <HAL_SPI_TransmitReceive+0x3c0>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	e008      	b.n	8001400 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2180      	movs	r1, #128	; 0x80
 80013fa:	0149      	lsls	r1, r1, #5
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2240      	movs	r2, #64	; 0x40
 8001408:	4013      	ands	r3, r2
 800140a:	2b40      	cmp	r3, #64	; 0x40
 800140c:	d007      	beq.n	800141e <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2140      	movs	r1, #64	; 0x40
 800141a:	430a      	orrs	r2, r1
 800141c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	23e0      	movs	r3, #224	; 0xe0
 8001424:	00db      	lsls	r3, r3, #3
 8001426:	429a      	cmp	r2, r3
 8001428:	d800      	bhi.n	800142c <HAL_SPI_TransmitReceive+0x154>
 800142a:	e083      	b.n	8001534 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d005      	beq.n	8001440 <HAL_SPI_TransmitReceive+0x168>
 8001434:	2312      	movs	r3, #18
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d000      	beq.n	8001440 <HAL_SPI_TransmitReceive+0x168>
 800143e:	e06d      	b.n	800151c <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001450:	1c9a      	adds	r2, r3, #2
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800145a:	b29b      	uxth	r3, r3
 800145c:	3b01      	subs	r3, #1
 800145e:	b29a      	uxth	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001464:	e05a      	b.n	800151c <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2202      	movs	r2, #2
 800146e:	4013      	ands	r3, r2
 8001470:	2b02      	cmp	r3, #2
 8001472:	d11b      	bne.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001478:	b29b      	uxth	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	2b01      	cmp	r3, #1
 8001482:	d113      	bne.n	80014ac <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001488:	881a      	ldrh	r2, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001494:	1c9a      	adds	r2, r3, #2
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800149e:	b29b      	uxth	r3, r3
 80014a0:	3b01      	subs	r3, #1
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4013      	ands	r3, r2
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d11c      	bne.n	80014f4 <HAL_SPI_TransmitReceive+0x21c>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2246      	movs	r2, #70	; 0x46
 80014be:	5a9b      	ldrh	r3, [r3, r2]
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d016      	beq.n	80014f4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d0:	b292      	uxth	r2, r2
 80014d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	1c9a      	adds	r2, r3, #2
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2246      	movs	r2, #70	; 0x46
 80014e2:	5a9b      	ldrh	r3, [r3, r2]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	3b01      	subs	r3, #1
 80014e8:	b299      	uxth	r1, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2246      	movs	r2, #70	; 0x46
 80014ee:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80014f0:	2301      	movs	r3, #1
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80014f4:	f7fe ff8a 	bl	800040c <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001500:	429a      	cmp	r2, r3
 8001502:	d80b      	bhi.n	800151c <HAL_SPI_TransmitReceive+0x244>
 8001504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001506:	3301      	adds	r3, #1
 8001508:	d008      	beq.n	800151c <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 800150a:	2323      	movs	r3, #35	; 0x23
 800150c:	18fb      	adds	r3, r7, r3
 800150e:	2203      	movs	r2, #3
 8001510:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	225d      	movs	r2, #93	; 0x5d
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]
        goto error;
 800151a:	e0b1      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d19f      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x18e>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2246      	movs	r2, #70	; 0x46
 800152a:	5a9b      	ldrh	r3, [r3, r2]
 800152c:	b29b      	uxth	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d199      	bne.n	8001466 <HAL_SPI_TransmitReceive+0x18e>
 8001532:	e089      	b.n	8001648 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_SPI_TransmitReceive+0x270>
 800153c:	2312      	movs	r3, #18
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d000      	beq.n	8001548 <HAL_SPI_TransmitReceive+0x270>
 8001546:	e074      	b.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	330c      	adds	r3, #12
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800156e:	e060      	b.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d11c      	bne.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001582:	b29b      	uxth	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	2b01      	cmp	r3, #1
 800158c:	d114      	bne.n	80015b8 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	330c      	adds	r3, #12
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a0:	1c5a      	adds	r2, r3, #1
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	3b01      	subs	r3, #1
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2201      	movs	r2, #1
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d11e      	bne.n	8001604 <HAL_SPI_TransmitReceive+0x32c>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2246      	movs	r2, #70	; 0x46
 80015ca:	5a9b      	ldrh	r3, [r3, r2]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d018      	beq.n	8001604 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	330c      	adds	r3, #12
 80015d8:	001a      	movs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	7812      	ldrb	r2, [r2, #0]
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2246      	movs	r2, #70	; 0x46
 80015f2:	5a9b      	ldrh	r3, [r3, r2]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b299      	uxth	r1, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2246      	movs	r2, #70	; 0x46
 80015fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001600:	2301      	movs	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001604:	f7fe ff02 	bl	800040c <HAL_GetTick>
 8001608:	0002      	movs	r2, r0
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001610:	429a      	cmp	r2, r3
 8001612:	d802      	bhi.n	800161a <HAL_SPI_TransmitReceive+0x342>
 8001614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001616:	3301      	adds	r3, #1
 8001618:	d102      	bne.n	8001620 <HAL_SPI_TransmitReceive+0x348>
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8001620:	2323      	movs	r3, #35	; 0x23
 8001622:	18fb      	adds	r3, r7, r3
 8001624:	2203      	movs	r2, #3
 8001626:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	225d      	movs	r2, #93	; 0x5d
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]
        goto error;
 8001630:	e026      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d199      	bne.n	8001570 <HAL_SPI_TransmitReceive+0x298>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2246      	movs	r2, #70	; 0x46
 8001640:	5a9b      	ldrh	r3, [r3, r2]
 8001642:	b29b      	uxth	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d193      	bne.n	8001570 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001648:	69fa      	ldr	r2, [r7, #28]
 800164a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	0018      	movs	r0, r3
 8001650:	f000 f954 	bl	80018fc <SPI_EndRxTxTransaction>
 8001654:	1e03      	subs	r3, r0, #0
 8001656:	d006      	beq.n	8001666 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8001658:	2323      	movs	r3, #35	; 0x23
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2220      	movs	r2, #32
 8001664:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	2b00      	cmp	r3, #0
 800166c:	d004      	beq.n	8001678 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 800166e:	2323      	movs	r3, #35	; 0x23
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e003      	b.n	8001680 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	225d      	movs	r2, #93	; 0x5d
 800167c:	2101      	movs	r1, #1
 800167e:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	225c      	movs	r2, #92	; 0x5c
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001688:	2323      	movs	r3, #35	; 0x23
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	781b      	ldrb	r3, [r3, #0]
}
 800168e:	0018      	movs	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	b00a      	add	sp, #40	; 0x28
 8001694:	bd80      	pop	{r7, pc}
 8001696:	46c0      	nop			; (mov r8, r8)
 8001698:	ffffefff 	.word	0xffffefff

0800169c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016ac:	f7fe feae 	bl	800040c <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	18d3      	adds	r3, r2, r3
 80016ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80016bc:	f7fe fea6 	bl	800040c <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80016c4:	4b3a      	ldr	r3, [pc, #232]	; (80017b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	0d1b      	lsrs	r3, r3, #20
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	4353      	muls	r3, r2
 80016d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80016d2:	e058      	b.n	8001786 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	d055      	beq.n	8001786 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80016da:	f7fe fe97 	bl	800040c <HAL_GetTick>
 80016de:	0002      	movs	r2, r0
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	69fa      	ldr	r2, [r7, #28]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d902      	bls.n	80016f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d142      	bne.n	8001776 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	21e0      	movs	r1, #224	; 0xe0
 80016fc:	438a      	bics	r2, r1
 80016fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	2382      	movs	r3, #130	; 0x82
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	429a      	cmp	r2, r3
 800170a:	d113      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x98>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	429a      	cmp	r2, r3
 8001716:	d005      	beq.n	8001724 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	429a      	cmp	r2, r3
 8001722:	d107      	bne.n	8001734 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2140      	movs	r1, #64	; 0x40
 8001730:	438a      	bics	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001738:	2380      	movs	r3, #128	; 0x80
 800173a:	019b      	lsls	r3, r3, #6
 800173c:	429a      	cmp	r2, r3
 800173e:	d110      	bne.n	8001762 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	491a      	ldr	r1, [pc, #104]	; (80017b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800174c:	400a      	ands	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	0189      	lsls	r1, r1, #6
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	225d      	movs	r2, #93	; 0x5d
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	225c      	movs	r2, #92	; 0x5c
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e017      	b.n	80017a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	3b01      	subs	r3, #1
 8001784:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	68ba      	ldr	r2, [r7, #8]
 800178e:	4013      	ands	r3, r2
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	425a      	negs	r2, r3
 8001796:	4153      	adcs	r3, r2
 8001798:	b2db      	uxtb	r3, r3
 800179a:	001a      	movs	r2, r3
 800179c:	1dfb      	adds	r3, r7, #7
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d197      	bne.n	80016d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b008      	add	sp, #32
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	20000000 	.word	0x20000000
 80017b4:	ffffdfff 	.word	0xffffdfff

080017b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80017c6:	2317      	movs	r3, #23
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80017ce:	f7fe fe1d 	bl	800040c <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80017de:	f7fe fe15 	bl	800040c <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	330c      	adds	r3, #12
 80017ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	0013      	movs	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	189b      	adds	r3, r3, r2
 80017f8:	00da      	lsls	r2, r3, #3
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	0d1b      	lsrs	r3, r3, #20
 80017fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001800:	4353      	muls	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001804:	e068      	b.n	80018d8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	23c0      	movs	r3, #192	; 0xc0
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	429a      	cmp	r2, r3
 800180e:	d10a      	bne.n	8001826 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d107      	bne.n	8001826 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	2117      	movs	r1, #23
 800181e:	187b      	adds	r3, r7, r1
 8001820:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001822:	187b      	adds	r3, r7, r1
 8001824:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	d055      	beq.n	80018d8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800182c:	f7fe fdee 	bl	800040c <HAL_GetTick>
 8001830:	0002      	movs	r2, r0
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001838:	429a      	cmp	r2, r3
 800183a:	d902      	bls.n	8001842 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d142      	bne.n	80018c8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	21e0      	movs	r1, #224	; 0xe0
 800184e:	438a      	bics	r2, r1
 8001850:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	2382      	movs	r3, #130	; 0x82
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	429a      	cmp	r2, r3
 800185c:	d113      	bne.n	8001886 <SPI_WaitFifoStateUntilTimeout+0xce>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	429a      	cmp	r2, r3
 8001868:	d005      	beq.n	8001876 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	689a      	ldr	r2, [r3, #8]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	429a      	cmp	r2, r3
 8001874:	d107      	bne.n	8001886 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2140      	movs	r1, #64	; 0x40
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	019b      	lsls	r3, r3, #6
 800188e:	429a      	cmp	r2, r3
 8001890:	d110      	bne.n	80018b4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800189e:	400a      	ands	r2, r1
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0189      	lsls	r1, r1, #6
 80018b0:	430a      	orrs	r2, r1
 80018b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	225d      	movs	r2, #93	; 0x5d
 80018b8:	2101      	movs	r1, #1
 80018ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	225c      	movs	r2, #92	; 0x5c
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e010      	b.n	80018ea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d18e      	bne.n	8001806 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	0018      	movs	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b00a      	add	sp, #40	; 0x28
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	20000000 	.word	0x20000000
 80018f8:	ffffdfff 	.word	0xffffdfff

080018fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	0159      	lsls	r1, r3, #5
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	0013      	movs	r3, r2
 8001916:	2200      	movs	r2, #0
 8001918:	f7ff ff4e 	bl	80017b8 <SPI_WaitFifoStateUntilTimeout>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d007      	beq.n	8001930 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001924:	2220      	movs	r2, #32
 8001926:	431a      	orrs	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e027      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	0013      	movs	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	f7ff fead 	bl	800169c <SPI_WaitFlagStateUntilTimeout>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d007      	beq.n	8001956 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	2220      	movs	r2, #32
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e014      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	23c0      	movs	r3, #192	; 0xc0
 800195a:	00d9      	lsls	r1, r3, #3
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	0013      	movs	r3, r2
 8001964:	2200      	movs	r2, #0
 8001966:	f7ff ff27 	bl	80017b8 <SPI_WaitFifoStateUntilTimeout>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d007      	beq.n	800197e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001972:	2220      	movs	r2, #32
 8001974:	431a      	orrs	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e000      	b.n	8001980 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	0018      	movs	r0, r3
 8001982:	46bd      	mov	sp, r7
 8001984:	b004      	add	sp, #16
 8001986:	bd80      	pop	{r7, pc}

08001988 <eve_calibrate>:


/* FUNCTIONS ***********************************************************************/

void eve_calibrate(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af02      	add	r7, sp, #8
	struct touchscreen_calibration calib;
	uint8_t dummy;

	platform_calib_init();
 800198e:	f7fe fc4f 	bl	8000230 <platform_calib_init>

	// If no store of calibration or current screen touch.
//	if ((platform_calib_read(&calib) != 0) || (eve_read_tag(&dummy)))
//	{
		// Wait for end of touch.
		while (eve_read_tag(&dummy));
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	0018      	movs	r0, r3
 8001998:	f000 f9a8 	bl	8001cec <eve_read_tag>
 800199c:	1e03      	subs	r3, r0, #0
 800199e:	d1f9      	bne.n	8001994 <eve_calibrate+0xc>

		EVE_LIB_BeginCoProList();
 80019a0:	f000 fed6 	bl	8002750 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 80019a4:	f001 fa10 	bl	8002dc8 <EVE_CMD_DLSTART>
		EVE_CLEAR_COLOR_RGB(0, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	2000      	movs	r0, #0
 80019ae:	f001 f803 	bl	80029b8 <EVE_CLEAR_COLOR_RGB>
		EVE_CLEAR(1,1,1);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2101      	movs	r1, #1
 80019b6:	2001      	movs	r0, #1
 80019b8:	f001 f824 	bl	8002a04 <EVE_CLEAR>
		EVE_COLOR_RGB(255, 255, 255);
 80019bc:	22ff      	movs	r2, #255	; 0xff
 80019be:	21ff      	movs	r1, #255	; 0xff
 80019c0:	20ff      	movs	r0, #255	; 0xff
 80019c2:	f001 f84b 	bl	8002a5c <EVE_COLOR_RGB>
		EVE_CMD_TEXT(EVE_DISP_WIDTH/2, EVE_DISP_HEIGHT/2,
 80019c6:	23c0      	movs	r3, #192	; 0xc0
 80019c8:	00da      	lsls	r2, r3, #3
 80019ca:	23c8      	movs	r3, #200	; 0xc8
 80019cc:	0058      	lsls	r0, r3, #1
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <eve_calibrate+0xc8>)
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	0013      	movs	r3, r2
 80019d4:	221c      	movs	r2, #28
 80019d6:	21f0      	movs	r1, #240	; 0xf0
 80019d8:	f001 fa32 	bl	8002e40 <EVE_CMD_TEXT>
				28, EVE_OPT_CENTERX | EVE_OPT_CENTERY,"Please tap on the dots");
		EVE_CMD_CALIBRATE(0);
 80019dc:	2000      	movs	r0, #0
 80019de:	f001 f9ac 	bl	8002d3a <EVE_CMD_CALIBRATE>
		EVE_LIB_EndCoProList();
 80019e2:	f000 fec9 	bl	8002778 <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 80019e6:	f000 fed1 	bl	800278c <EVE_LIB_AwaitCoProEmpty>

		calib.transform[0] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_A);
 80019ea:	4b1a      	ldr	r3, [pc, #104]	; (8001a54 <eve_calibrate+0xcc>)
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 fca4 	bl	800333a <HAL_MemRead32>
 80019f2:	0002      	movs	r2, r0
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	605a      	str	r2, [r3, #4]
		calib.transform[1] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_B);
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <eve_calibrate+0xd0>)
 80019fa:	0018      	movs	r0, r3
 80019fc:	f001 fc9d 	bl	800333a <HAL_MemRead32>
 8001a00:	0002      	movs	r2, r0
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	609a      	str	r2, [r3, #8]
		calib.transform[2] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_C);
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <eve_calibrate+0xd4>)
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f001 fc96 	bl	800333a <HAL_MemRead32>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	60da      	str	r2, [r3, #12]
		calib.transform[3] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_D);
 8001a14:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <eve_calibrate+0xd8>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f001 fc8f 	bl	800333a <HAL_MemRead32>
 8001a1c:	0002      	movs	r2, r0
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	611a      	str	r2, [r3, #16]
		calib.transform[4] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_E);
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <eve_calibrate+0xdc>)
 8001a24:	0018      	movs	r0, r3
 8001a26:	f001 fc88 	bl	800333a <HAL_MemRead32>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	615a      	str	r2, [r3, #20]
		calib.transform[5] = HAL_MemRead32(EVE_REG_TOUCH_TRANSFORM_F);
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <eve_calibrate+0xe0>)
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 fc81 	bl	800333a <HAL_MemRead32>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	619a      	str	r2, [r3, #24]
		platform_calib_write(&calib);
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe fbfb 	bl	800023c <platform_calib_write>
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_C, calib.transform[2]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_D, calib.transform[3]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_E, calib.transform[4]);
	//	HAL_MemWrite32(EVE_REG_TOUCH_TRANSFORM_F, calib.transform[5]);
	//}
}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	b008      	add	sp, #32
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	0800359c 	.word	0x0800359c
 8001a54:	00302150 	.word	0x00302150
 8001a58:	00302154 	.word	0x00302154
 8001a5c:	00302158 	.word	0x00302158
 8001a60:	0030215c 	.word	0x0030215c
 8001a64:	00302160 	.word	0x00302160
 8001a68:	00302164 	.word	0x00302164

08001a6c <eve_display>:
#include "eve_example.h"
extern const uint8_t font0[];
const EVE_GPU_FONT_HEADER *font0_hdr = (const EVE_GPU_FONT_HEADER *)font0;

void eve_display(void)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af02      	add	r7, sp, #8
	uint32_t counter = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
	do {
		// Comment this line if the counter needs to increment continuously.
		// Uncomment and it will increment by one each press.
		//while (eve_read_tag(&key) != 0);

		EVE_LIB_BeginCoProList();
 8001a76:	f000 fe6b 	bl	8002750 <EVE_LIB_BeginCoProList>
		EVE_CMD_DLSTART();
 8001a7a:	f001 f9a5 	bl	8002dc8 <EVE_CMD_DLSTART>
		EVE_CLEAR_COLOR_RGB(0, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 ff98 	bl	80029b8 <EVE_CLEAR_COLOR_RGB>
		EVE_CLEAR(1,1,1);
 8001a88:	2201      	movs	r2, #1
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f000 ffb9 	bl	8002a04 <EVE_CLEAR>
		EVE_COLOR_RGB(255, 255, 255);
 8001a92:	22ff      	movs	r2, #255	; 0xff
 8001a94:	21ff      	movs	r1, #255	; 0xff
 8001a96:	20ff      	movs	r0, #255	; 0xff
 8001a98:	f000 ffe0 	bl	8002a5c <EVE_COLOR_RGB>

		EVE_BEGIN(EVE_BEGIN_BITMAPS);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f001 f8f2 	bl	8002c86 <EVE_BEGIN>
#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)
		// Set origin on canvas using EVE_VERTEX_TRANSLATE.
		EVE_VERTEX_TRANSLATE_X(((EVE_DISP_WIDTH/2)-(eve_img_bridgetek_logo_width/2)) * 16);
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <eve_display+0x170>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	085b      	lsrs	r3, r3, #1
 8001aa8:	22c8      	movs	r2, #200	; 0xc8
 8001aaa:	0052      	lsls	r2, r2, #1
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	011b      	lsls	r3, r3, #4
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f001 fa81 	bl	8002fb8 <EVE_VERTEX_TRANSLATE_X>
		EVE_VERTEX2II(0, 0, BITMAP_BRIDGETEK_LOGO, 0);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	2207      	movs	r2, #7
 8001aba:	2100      	movs	r1, #0
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 fff3 	bl	8002aa8 <EVE_VERTEX2II>
		EVE_VERTEX_TRANSLATE_X(0);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f001 fa78 	bl	8002fb8 <EVE_VERTEX_TRANSLATE_X>
#else
		// Place directly on canvas EVE_VERTEX_TRANSLATE not available.
		EVE_VERTEX2II((EVE_DISP_WIDTH/2)-(eve_img_bridgetek_logo_width/2), 0, BITMAP_BRIDGETEK_LOGO, 0);
#endif

		EVE_CMD_TEXT(EVE_DISP_WIDTH/2, eve_img_bridgetek_logo_height,
 8001ac8:	4b45      	ldr	r3, [pc, #276]	; (8001be0 <eve_display+0x174>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	b219      	sxth	r1, r3
 8001ace:	2380      	movs	r3, #128	; 0x80
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	23c8      	movs	r3, #200	; 0xc8
 8001ad4:	0058      	lsls	r0, r3, #1
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <eve_display+0x178>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	0013      	movs	r3, r2
 8001adc:	221c      	movs	r2, #28
 8001ade:	f001 f9af 	bl	8002e40 <EVE_CMD_TEXT>
				28, EVE_OPT_CENTERX, "Touch the counter");

		EVE_TAG(100);
 8001ae2:	2064      	movs	r0, #100	; 0x64
 8001ae4:	f001 f8ba 	bl	8002c5c <EVE_TAG>

		EVE_COLOR_RGB(255, 0, 0);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	20ff      	movs	r0, #255	; 0xff
 8001aee:	f000 ffb5 	bl	8002a5c <EVE_COLOR_RGB>

		EVE_BEGIN(EVE_BEGIN_BITMAPS);
 8001af2:	2001      	movs	r0, #1
 8001af4:	f001 f8c7 	bl	8002c86 <EVE_BEGIN>
		units = 1;
 8001af8:	2301      	movs	r3, #1
 8001afa:	607b      	str	r3, [r7, #4]

#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)
		EVE_VERTEX_TRANSLATE_Y((EVE_DISP_HEIGHT / 2) * 16);
 8001afc:	23f0      	movs	r3, #240	; 0xf0
 8001afe:	011b      	lsls	r3, r3, #4
 8001b00:	0018      	movs	r0, r3
 8001b02:	f001 fa6d 	bl	8002fe0 <EVE_VERTEX_TRANSLATE_Y>
		for (i = 0; i < 5; i++)
 8001b06:	230b      	movs	r3, #11
 8001b08:	18fb      	adds	r3, r7, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e03f      	b.n	8001b90 <eve_display+0x124>
		{
			EVE_VERTEX_TRANSLATE_X((((EVE_DISP_WIDTH - (font0_hdr->FontWidthInPixels * 5)) / 2) - (font0_hdr->FontWidthInPixels) + (font0_hdr->FontWidthInPixels * (5 - i))) * 16);
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <eve_display+0x17c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2288      	movs	r2, #136	; 0x88
 8001b16:	589a      	ldr	r2, [r3, r2]
 8001b18:	0013      	movs	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	189b      	adds	r3, r3, r2
 8001b1e:	22c8      	movs	r2, #200	; 0xc8
 8001b20:	0092      	lsls	r2, r2, #2
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	085a      	lsrs	r2, r3, #1
 8001b26:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <eve_display+0x17c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2188      	movs	r1, #136	; 0x88
 8001b2c:	585b      	ldr	r3, [r3, r1]
 8001b2e:	1ad2      	subs	r2, r2, r3
 8001b30:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <eve_display+0x17c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2188      	movs	r1, #136	; 0x88
 8001b36:	585b      	ldr	r3, [r3, r1]
 8001b38:	240b      	movs	r4, #11
 8001b3a:	1939      	adds	r1, r7, r4
 8001b3c:	7809      	ldrb	r1, [r1, #0]
 8001b3e:	b249      	sxtb	r1, r1
 8001b40:	2005      	movs	r0, #5
 8001b42:	1a41      	subs	r1, r0, r1
 8001b44:	434b      	muls	r3, r1
 8001b46:	18d3      	adds	r3, r2, r3
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f001 fa34 	bl	8002fb8 <EVE_VERTEX_TRANSLATE_X>
			EVE_VERTEX2II(0, 0, FONT_CUSTOM, ((counter / units) % 10)+1); //+1 as in the converted font the number '0' is in position 1 in the font table
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7fe fae0 	bl	8000118 <__udivsi3>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe fb61 	bl	8000224 <__aeabi_uidivmod>
 8001b62:	000b      	movs	r3, r1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	3301      	adds	r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 ff9a 	bl	8002aa8 <EVE_VERTEX2II>
			units *= 10;
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	0013      	movs	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	607b      	str	r3, [r7, #4]
		for (i = 0; i < 5; i++)
 8001b80:	193b      	adds	r3, r7, r4
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	b25b      	sxtb	r3, r3
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	3301      	adds	r3, #1
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	193b      	adds	r3, r7, r4
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	230b      	movs	r3, #11
 8001b92:	18fb      	adds	r3, r7, r3
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b25b      	sxtb	r3, r3
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	ddb9      	ble.n	8001b10 <eve_display+0xa4>
					(EVE_DISP_HEIGHT / 2), FONT_CUSTOM, ((counter / units) % 10)+1); //+1 as in the converted font the number '0' is in position 1 in the font table
			units *= 10;
		}
#endif

		EVE_DISPLAY();
 8001b9c:	f001 f897 	bl	8002cce <EVE_DISPLAY>
		EVE_CMD_SWAP();
 8001ba0:	f001 f8be 	bl	8002d20 <EVE_CMD_SWAP>
		EVE_LIB_EndCoProList();
 8001ba4:	f000 fde8 	bl	8002778 <EVE_LIB_EndCoProList>
		EVE_LIB_AwaitCoProEmpty();
 8001ba8:	f000 fdf0 	bl	800278c <EVE_LIB_AwaitCoProEmpty>

		while (eve_read_tag(&key) == 0);
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	1cfb      	adds	r3, r7, #3
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f000 f89b 	bl	8001cec <eve_read_tag>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d0f9      	beq.n	8001bae <eve_display+0x142>

		if (key == 100)
 8001bba:	1cfb      	adds	r3, r7, #3
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b64      	cmp	r3, #100	; 0x64
 8001bc0:	d000      	beq.n	8001bc4 <eve_display+0x158>
 8001bc2:	e758      	b.n	8001a76 <eve_display+0xa>
		{
			counter++;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
			if (counter == 100000)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4a07      	ldr	r2, [pc, #28]	; (8001bec <eve_display+0x180>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d000      	beq.n	8001bd4 <eve_display+0x168>
 8001bd2:	e750      	b.n	8001a76 <eve_display+0xa>
			{
				counter = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
		EVE_LIB_BeginCoProList();
 8001bd8:	e74d      	b.n	8001a76 <eve_display+0xa>
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20000030 	.word	0x20000030
 8001be0:	20000034 	.word	0x20000034
 8001be4:	080035b4 	.word	0x080035b4
 8001be8:	2000000c 	.word	0x2000000c
 8001bec:	000186a0 	.word	0x000186a0

08001bf0 <eve_example>:
		}
	} while (1);
}

void eve_example(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
	uint32_t font_end;

	// Initialise the display
	EVE_Init();
 8001bf6:	f000 fc91 	bl	800251c <EVE_Init>

	// Calibrate the display
	eve_calibrate();
 8001bfa:	f7ff fec5 	bl	8001988 <eve_calibrate>

	// Load fonts and images
	font_end = eve_init_fonts();
 8001bfe:	f000 f80d 	bl	8001c1c <eve_init_fonts>
 8001c02:	0003      	movs	r3, r0
 8001c04:	607b      	str	r3, [r7, #4]

	eve_load_images(font_end);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f000 f899 	bl	8001d40 <eve_load_images>

	// Start example code
	eve_display();
 8001c0e:	f7ff ff2d 	bl	8001a6c <eve_display>
}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	46bd      	mov	sp, r7
 8001c16:	b002      	add	sp, #8
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <eve_init_fonts>:
/*Bitmap Raw Data end ---*/
};


uint32_t eve_init_fonts(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af02      	add	r7, sp, #8
	const EVE_GPU_FONT_HEADER *font0_hdr = (const EVE_GPU_FONT_HEADER *)font0;
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <eve_init_fonts+0xc8>)
 8001c24:	607b      	str	r3, [r7, #4]
	uint32_t font0_size = sizeof(font0);
 8001c26:	4b30      	ldr	r3, [pc, #192]	; (8001ce8 <eve_init_fonts+0xcc>)
 8001c28:	603b      	str	r3, [r7, #0]

	EVE_LIB_WriteDataToRAMG(font0, font0_size, font0_offset);
 8001c2a:	23fa      	movs	r3, #250	; 0xfa
 8001c2c:	009a      	lsls	r2, r3, #2
 8001c2e:	6839      	ldr	r1, [r7, #0]
 8001c30:	4b2c      	ldr	r3, [pc, #176]	; (8001ce4 <eve_init_fonts+0xc8>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fdb1 	bl	800279a <EVE_LIB_WriteDataToRAMG>

	EVE_LIB_BeginCoProList();
 8001c38:	f000 fd8a 	bl	8002750 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 8001c3c:	f001 f8c4 	bl	8002dc8 <EVE_CMD_DLSTART>
	EVE_CLEAR(1,1,1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	2101      	movs	r1, #1
 8001c44:	2001      	movs	r0, #1
 8001c46:	f000 fedd 	bl	8002a04 <EVE_CLEAR>
	EVE_COLOR_RGB(255, 255, 255);
 8001c4a:	22ff      	movs	r2, #255	; 0xff
 8001c4c:	21ff      	movs	r1, #255	; 0xff
 8001c4e:	20ff      	movs	r0, #255	; 0xff
 8001c50:	f000 ff04 	bl	8002a5c <EVE_COLOR_RGB>
	EVE_BEGIN(EVE_BEGIN_BITMAPS);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f001 f816 	bl	8002c86 <EVE_BEGIN>
	EVE_BITMAP_HANDLE(FONT_CUSTOM);
 8001c5a:	2008      	movs	r0, #8
 8001c5c:	f000 ff60 	bl	8002b20 <EVE_BITMAP_HANDLE>
	// Note that bitmap_source in this framework uses a uint32_t and so if your font has a negative value for PointerToFontGraphicsData
	// it will be required to mask the bits or to use a signed data type in your bitmap_source implementation.
	// Or to place the font in RAM_G such that the PointerToFontGraphicsData (also known as Raw Data Address in Decimal) is positive.
	// In this particular example, the PointerToFontGraphicsData will be ([location where we load the font in RAM_G] minus 142).
	// We load it at RAM_G + 1K to keep this positive (1K - 142 == 858). If we loaded the font at RAM_G + 0, it would have been -142.
	EVE_BITMAP_SOURCE((font0_hdr->PointerToFontGraphicsData)&(0x3FFFFF));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2290      	movs	r2, #144	; 0x90
 8001c64:	589b      	ldr	r3, [r3, r2]
 8001c66:	029b      	lsls	r3, r3, #10
 8001c68:	0a9b      	lsrs	r3, r3, #10
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 ff6f 	bl	8002b4e <EVE_BITMAP_SOURCE>
	EVE_BITMAP_LAYOUT(font0_hdr->FontBitmapFormat,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	589b      	ldr	r3, [r3, r2]
 8001c76:	b2d8      	uxtb	r0, r3
			font0_hdr->FontLineStride, font0_hdr->FontHeightInPixels);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2284      	movs	r2, #132	; 0x84
 8001c7c:	589b      	ldr	r3, [r3, r2]
	EVE_BITMAP_LAYOUT(font0_hdr->FontBitmapFormat,
 8001c7e:	b299      	uxth	r1, r3
			font0_hdr->FontLineStride, font0_hdr->FontHeightInPixels);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	228c      	movs	r2, #140	; 0x8c
 8001c84:	589b      	ldr	r3, [r3, r2]
	EVE_BITMAP_LAYOUT(font0_hdr->FontBitmapFormat,
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	001a      	movs	r2, r3
 8001c8a:	f000 ff75 	bl	8002b78 <EVE_BITMAP_LAYOUT>
	EVE_BITMAP_SIZE(EVE_FILTER_NEAREST, EVE_WRAP_BORDER, EVE_WRAP_BORDER,
			font0_hdr->FontWidthInPixels,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2288      	movs	r2, #136	; 0x88
 8001c92:	589b      	ldr	r3, [r3, r2]
	EVE_BITMAP_SIZE(EVE_FILTER_NEAREST, EVE_WRAP_BORDER, EVE_WRAP_BORDER,
 8001c94:	b29a      	uxth	r2, r3
			font0_hdr->FontHeightInPixels);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	218c      	movs	r1, #140	; 0x8c
 8001c9a:	585b      	ldr	r3, [r3, r1]
	EVE_BITMAP_SIZE(EVE_FILTER_NEAREST, EVE_WRAP_BORDER, EVE_WRAP_BORDER,
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f000 ff96 	bl	8002bd8 <EVE_BITMAP_SIZE>
	EVE_CMD_SETFONT(FONT_CUSTOM, font0_offset);
 8001cac:	23fa      	movs	r3, #250	; 0xfa
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	2008      	movs	r0, #8
 8001cb4:	f001 f855 	bl	8002d62 <EVE_CMD_SETFONT>
	EVE_END();
 8001cb8:	f000 fffc 	bl	8002cb4 <EVE_END>
	EVE_DISPLAY();
 8001cbc:	f001 f807 	bl	8002cce <EVE_DISPLAY>
	EVE_CMD_SWAP();
 8001cc0:	f001 f82e 	bl	8002d20 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 8001cc4:	f000 fd58 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001cc8:	f000 fd60 	bl	800278c <EVE_LIB_AwaitCoProEmpty>
	return ((font0_size + font0_offset) + 16) & (~15);
 8001ccc:	23fa      	movs	r3, #250	; 0xfa
 8001cce:	009a      	lsls	r2, r3, #2
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	18d3      	adds	r3, r2, r3
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	220f      	movs	r2, #15
 8001cd8:	4393      	bics	r3, r2
}
 8001cda:	0018      	movs	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	080035f8 	.word	0x080035f8
 8001ce8:	00000be8 	.word	0x00000be8

08001cec <eve_read_tag>:
#include "HAL.h"

#include "eve_example.h"

uint8_t eve_read_tag(uint8_t *key)
{
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	uint8_t Read_tag;
	uint8_t key_detect = 0;
 8001cf4:	250f      	movs	r5, #15
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	701a      	strb	r2, [r3, #0]

	Read_tag = HAL_MemRead8(EVE_REG_TOUCH_TAG);
 8001cfc:	260e      	movs	r6, #14
 8001cfe:	19bc      	adds	r4, r7, r6
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <eve_read_tag+0x4c>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f001 fb4a 	bl	800339c <HAL_MemRead8>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	7023      	strb	r3, [r4, #0]

	if (!(HAL_MemRead16(EVE_REG_TOUCH_RAW_XY) & 0x8000))
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <eve_read_tag+0x50>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f001 fb2a 	bl	8003368 <HAL_MemRead16>
 8001d14:	0003      	movs	r3, r0
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	db06      	blt.n	8001d2a <eve_read_tag+0x3e>
	{
		key_detect = 1;
 8001d1c:	197b      	adds	r3, r7, r5
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		*key = Read_tag;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	19ba      	adds	r2, r7, r6
 8001d26:	7812      	ldrb	r2, [r2, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
	}

	return key_detect;
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781b      	ldrb	r3, [r3, #0]
}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b005      	add	sp, #20
 8001d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d38:	0030212c 	.word	0x0030212c
 8001d3c:	0030211c 	.word	0x0030211c

08001d40 <eve_load_images>:
	/*E00:*/ 0xD3, 0x4D, 0x34, 0x44, 0xD3, 0x4D, 0x34, 0x44, 0xD3, 0x4D, 0x34, 0x44, 0xD3, 0x4D, 0x34, 0x44,
	/*E10:*/ 0xD3, 0x4D, 0x34, 0x45, 0xFF, 0xD9,
};

uint32_t eve_load_images(uint32_t start_addr)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b0ab      	sub	sp, #172	; 0xac
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	6078      	str	r0, [r7, #4]
	uint8_t buf[128];
	uint32_t img_width = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
	uint32_t img_height = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
	uint8_t *img = (uint8_t *)img_bridgetek_logo;
 8001d50:	4b6a      	ldr	r3, [pc, #424]	; (8001efc <eve_load_images+0x1bc>)
 8001d52:	229c      	movs	r2, #156	; 0x9c
 8001d54:	18ba      	adds	r2, r7, r2
 8001d56:	6013      	str	r3, [r2, #0]
	int8_t flag;
	uint32_t eve_addr;
	unsigned int i;

	flag = 0;
 8001d58:	239b      	movs	r3, #155	; 0x9b
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]

	EVE_LIB_BeginCoProList();
 8001d60:	f000 fcf6 	bl	8002750 <EVE_LIB_BeginCoProList>
	EVE_CMD_LOADIMAGE(start_addr, 0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2100      	movs	r1, #0
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f001 f813 	bl	8002d94 <EVE_CMD_LOADIMAGE>

	// Send raw JPEG encoded image data to coprocessor. It will be decoded
	// as the data is received.
	while (flag != 2)
 8001d6e:	e053      	b.n	8001e18 <eve_load_images+0xd8>
	{
		for (i = 0; i < sizeof(buf); i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	2294      	movs	r2, #148	; 0x94
 8001d74:	18ba      	adds	r2, r7, r2
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e03c      	b.n	8001df4 <eve_load_images+0xb4>
		{
			buf[i] = *img++;
 8001d7a:	219c      	movs	r1, #156	; 0x9c
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	1c5a      	adds	r2, r3, #1
 8001d82:	1879      	adds	r1, r7, r1
 8001d84:	600a      	str	r2, [r1, #0]
 8001d86:	7819      	ldrb	r1, [r3, #0]
 8001d88:	2014      	movs	r0, #20
 8001d8a:	183a      	adds	r2, r7, r0
 8001d8c:	2494      	movs	r4, #148	; 0x94
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	18d3      	adds	r3, r2, r3
 8001d94:	1c0a      	adds	r2, r1, #0
 8001d96:	701a      	strb	r2, [r3, #0]
			if (buf[i] == 0xff)
 8001d98:	183a      	adds	r2, r7, r0
 8001d9a:	193b      	adds	r3, r7, r4
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	18d3      	adds	r3, r2, r3
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2bff      	cmp	r3, #255	; 0xff
 8001da4:	d104      	bne.n	8001db0 <eve_load_images+0x70>
			{
				flag = 1;
 8001da6:	239b      	movs	r3, #155	; 0x9b
 8001da8:	18fb      	adds	r3, r7, r3
 8001daa:	2201      	movs	r2, #1
 8001dac:	701a      	strb	r2, [r3, #0]
 8001dae:	e01b      	b.n	8001de8 <eve_load_images+0xa8>
			}
			else
			{
				if (flag == 1)
 8001db0:	209b      	movs	r0, #155	; 0x9b
 8001db2:	183b      	adds	r3, r7, r0
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d111      	bne.n	8001de0 <eve_load_images+0xa0>
				{
					if (buf[i] == 0xd9)
 8001dbc:	2314      	movs	r3, #20
 8001dbe:	18fa      	adds	r2, r7, r3
 8001dc0:	2194      	movs	r1, #148	; 0x94
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	18d3      	adds	r3, r2, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2bd9      	cmp	r3, #217	; 0xd9
 8001dcc:	d108      	bne.n	8001de0 <eve_load_images+0xa0>
					{
						flag = 2;
 8001dce:	183b      	adds	r3, r7, r0
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	701a      	strb	r2, [r3, #0]
						i++;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	187a      	adds	r2, r7, r1
 8001ddc:	6013      	str	r3, [r2, #0]
						break;
 8001dde:	e00e      	b.n	8001dfe <eve_load_images+0xbe>
					}
				}
				flag = 0;
 8001de0:	239b      	movs	r3, #155	; 0x9b
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < sizeof(buf); i++)
 8001de8:	2294      	movs	r2, #148	; 0x94
 8001dea:	18bb      	adds	r3, r7, r2
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	18ba      	adds	r2, r7, r2
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	2394      	movs	r3, #148	; 0x94
 8001df6:	18fb      	adds	r3, r7, r3
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001dfc:	d9bd      	bls.n	8001d7a <eve_load_images+0x3a>
			}
		}
		EVE_LIB_WriteDataToCMD(buf, (i + 3)&(~3));
 8001dfe:	2394      	movs	r3, #148	; 0x94
 8001e00:	18fb      	adds	r3, r7, r3
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3303      	adds	r3, #3
 8001e06:	2203      	movs	r2, #3
 8001e08:	4393      	bics	r3, r2
 8001e0a:	001a      	movs	r2, r3
 8001e0c:	2314      	movs	r3, #20
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 fce9 	bl	80027ea <EVE_LIB_WriteDataToCMD>
	while (flag != 2)
 8001e18:	239b      	movs	r3, #155	; 0x9b
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d1a5      	bne.n	8001d70 <eve_load_images+0x30>
	};
	EVE_LIB_EndCoProList();
 8001e24:	f000 fca8 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001e28:	f000 fcb0 	bl	800278c <EVE_LIB_AwaitCoProEmpty>

	// We know the start address in RAM so do not seek this information.
	// Obtain the width and height of the expanded JPEG image.
	EVE_LIB_GetProps(&eve_addr, &img_width, &img_height);
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	18fa      	adds	r2, r7, r3
 8001e30:	2310      	movs	r3, #16
 8001e32:	18f9      	adds	r1, r7, r3
 8001e34:	2308      	movs	r3, #8
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fd7a 	bl	8002932 <EVE_LIB_GetProps>

	eve_img_bridgetek_logo_width = (uint16_t)img_width;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	001a      	movs	r2, r3
 8001e44:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <eve_load_images+0x1c0>)
 8001e46:	601a      	str	r2, [r3, #0]
	eve_img_bridgetek_logo_height = (uint16_t)img_height;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	001a      	movs	r2, r3
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <eve_load_images+0x1c4>)
 8001e50:	601a      	str	r2, [r3, #0]

	EVE_LIB_BeginCoProList();
 8001e52:	f000 fc7d 	bl	8002750 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 8001e56:	f000 ffb7 	bl	8002dc8 <EVE_CMD_DLSTART>

	EVE_BEGIN(EVE_BEGIN_BITMAPS);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 ff13 	bl	8002c86 <EVE_BEGIN>
	EVE_BITMAP_HANDLE(BITMAP_BRIDGETEK_LOGO);
 8001e60:	2007      	movs	r0, #7
 8001e62:	f000 fe5d 	bl	8002b20 <EVE_BITMAP_HANDLE>
	// Optional to mask the bitmap source here with 0x3FFFFF to ensure that only the valid bits for addressing within RAM_G are set.
	// BT81x now supports additional addressing where the source is in flash (see bitmap_source in the programmers guide)
	EVE_BITMAP_SOURCE(start_addr & 0x3FFFFF);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	029b      	lsls	r3, r3, #10
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 fe6e 	bl	8002b4e <EVE_BITMAP_SOURCE>
	EVE_BITMAP_LAYOUT(EVE_FORMAT_RGB565, img_width * 2, img_height);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	18db      	adds	r3, r3, r3
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	b292      	uxth	r2, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	2007      	movs	r0, #7
 8001e82:	f000 fe79 	bl	8002b78 <EVE_BITMAP_LAYOUT>
#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)
	EVE_BITMAP_LAYOUT_H((img_width * 2) >> 10, img_height >> 9);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	0a9b      	lsrs	r3, r3, #10
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0a5b      	lsrs	r3, r3, #9
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	0019      	movs	r1, r3
 8001e96:	0010      	movs	r0, r2
 8001e98:	f001 f84e 	bl	8002f38 <EVE_BITMAP_LAYOUT_H>
#endif
	EVE_BITMAP_SIZE(EVE_FILTER_NEAREST, EVE_WRAP_BORDER, EVE_WRAP_BORDER,
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	0013      	movs	r3, r2
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 fe93 	bl	8002bd8 <EVE_BITMAP_SIZE>
			img_width, img_height);
#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)
	EVE_BITMAP_SIZE_H(img_width >> 9, img_height >> 9);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	0a5b      	lsrs	r3, r3, #9
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0a5b      	lsrs	r3, r3, #9
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	0019      	movs	r1, r3
 8001ec0:	0010      	movs	r0, r2
 8001ec2:	f001 f859 	bl	8002f78 <EVE_BITMAP_SIZE_H>
#endif
	EVE_END();
 8001ec6:	f000 fef5 	bl	8002cb4 <EVE_END>

	EVE_DISPLAY();
 8001eca:	f000 ff00 	bl	8002cce <EVE_DISPLAY>
	EVE_CMD_SWAP();
 8001ece:	f000 ff27 	bl	8002d20 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 8001ed2:	f000 fc51 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8001ed6:	f000 fc59 	bl	800278c <EVE_LIB_AwaitCoProEmpty>

	start_addr += ((img_width * 2) * img_height);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	4353      	muls	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	18d3      	adds	r3, r2, r3
 8001ee6:	607b      	str	r3, [r7, #4]
	start_addr = (start_addr + 3) & (~3);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3303      	adds	r3, #3
 8001eec:	2203      	movs	r2, #3
 8001eee:	4393      	bics	r3, r2
 8001ef0:	607b      	str	r3, [r7, #4]
	return start_addr;
 8001ef2:	687b      	ldr	r3, [r7, #4]
}
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	b029      	add	sp, #164	; 0xa4
 8001efa:	bd90      	pop	{r4, r7, pc}
 8001efc:	080041e0 	.word	0x080041e0
 8001f00:	20000030 	.word	0x20000030
 8001f04:	20000034 	.word	0x20000034

08001f08 <MCU_Init>:




void MCU_Init(void)
{
 8001f08:	b5b0      	push	{r4, r5, r7, lr}
 8001f0a:	b098      	sub	sp, #96	; 0x60
 8001f0c:	af00      	add	r7, sp, #0
	  * @brief System Clock Configuration
	  * @retval None
	  */
//	void SystemClock_Config(void)
//	{
	  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	2430      	movs	r4, #48	; 0x30
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	0018      	movs	r0, r3
 8001f14:	2330      	movs	r3, #48	; 0x30
 8001f16:	001a      	movs	r2, r3
 8001f18:	2100      	movs	r1, #0
 8001f1a:	f001 fb1d 	bl	8003558 <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1e:	2520      	movs	r5, #32
 8001f20:	197b      	adds	r3, r7, r5
 8001f22:	0018      	movs	r0, r3
 8001f24:	2310      	movs	r3, #16
 8001f26:	001a      	movs	r2, r3
 8001f28:	2100      	movs	r1, #0
 8001f2a:	f001 fb15 	bl	8003558 <memset>

	  /** Initializes the RCC Oscillators according to the specified parameters
	  * in the RCC_OscInitTypeDef structure.
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f2e:	0021      	movs	r1, r4
 8001f30:	187b      	adds	r3, r7, r1
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	2201      	movs	r2, #1
 8001f3a:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	2210      	movs	r2, #16
 8001f40:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f42:	187b      	adds	r3, r7, r1
 8001f44:	2202      	movs	r2, #2
 8001f46:	621a      	str	r2, [r3, #32]
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001f4e:	187b      	adds	r3, r7, r1
 8001f50:	22a0      	movs	r2, #160	; 0xa0
 8001f52:	0392      	lsls	r2, r2, #14
 8001f54:	629a      	str	r2, [r3, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f56:	187b      	adds	r3, r7, r1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f5c:	187b      	adds	r3, r7, r1
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f7fe fcc4 	bl	80008ec <HAL_RCC_OscConfig>
//	    Error_Handler();
	  }

	  /** Initializes the CPU, AHB and APB buses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f64:	0029      	movs	r1, r5
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	2202      	movs	r2, #2
 8001f70:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2101      	movs	r1, #1
 8001f82:	0018      	movs	r0, r3
 8001f84:	f7fe ffcc 	bl	8000f20 <HAL_RCC_ClockConfig>
	    * @param None
	    * @retval None
	    */
//	  static void MX_GPIO_Init(void)
//	  {
	    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f88:	240c      	movs	r4, #12
 8001f8a:	193b      	adds	r3, r7, r4
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	2314      	movs	r3, #20
 8001f90:	001a      	movs	r2, r3
 8001f92:	2100      	movs	r1, #0
 8001f94:	f001 fae0 	bl	8003558 <memset>
	  /* USER CODE BEGIN MX_GPIO_Init_1 */
	  /* USER CODE END MX_GPIO_Init_1 */

	    /* GPIO Ports Clock Enable */
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b52      	ldr	r3, [pc, #328]	; (80020e4 <MCU_Init+0x1dc>)
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	4b51      	ldr	r3, [pc, #324]	; (80020e4 <MCU_Init+0x1dc>)
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	0289      	lsls	r1, r1, #10
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	4b4f      	ldr	r3, [pc, #316]	; (80020e4 <MCU_Init+0x1dc>)
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <MCU_Init+0x1dc>)
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	; (80020e4 <MCU_Init+0x1dc>)
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0309      	lsls	r1, r1, #12
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	615a      	str	r2, [r3, #20]
 8001fc2:	4b48      	ldr	r3, [pc, #288]	; (80020e4 <MCU_Init+0x1dc>)
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	031b      	lsls	r3, r3, #12
 8001fca:	4013      	ands	r3, r2
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd0:	4b44      	ldr	r3, [pc, #272]	; (80020e4 <MCU_Init+0x1dc>)
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	4b43      	ldr	r3, [pc, #268]	; (80020e4 <MCU_Init+0x1dc>)
 8001fd6:	2180      	movs	r1, #128	; 0x80
 8001fd8:	02c9      	lsls	r1, r1, #11
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	615a      	str	r2, [r3, #20]
 8001fde:	4b41      	ldr	r3, [pc, #260]	; (80020e4 <MCU_Init+0x1dc>)
 8001fe0:	695a      	ldr	r2, [r3, #20]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	02db      	lsls	r3, r3, #11
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	683b      	ldr	r3, [r7, #0]

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001fec:	23c0      	movs	r3, #192	; 0xc0
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	483d      	ldr	r0, [pc, #244]	; (80020e8 <MCU_Init+0x1e0>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	f7fe fc5b 	bl	80008b0 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin Output Level */
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ffa:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <MCU_Init+0x1e4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	21c0      	movs	r1, #192	; 0xc0
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe fc55 	bl	80008b0 <HAL_GPIO_WritePin>

	    /*Configure GPIO pin : B1_Pin */
	    GPIO_InitStruct.Pin = B1_Pin;
 8002006:	193b      	adds	r3, r7, r4
 8002008:	2201      	movs	r2, #1
 800200a:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800200c:	193b      	adds	r3, r7, r4
 800200e:	2290      	movs	r2, #144	; 0x90
 8002010:	0352      	lsls	r2, r2, #13
 8002012:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	193b      	adds	r3, r7, r4
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
	    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800201a:	193a      	adds	r2, r7, r4
 800201c:	2390      	movs	r3, #144	; 0x90
 800201e:	05db      	lsls	r3, r3, #23
 8002020:	0011      	movs	r1, r2
 8002022:	0018      	movs	r0, r3
 8002024:	f7fe fad4 	bl	80005d0 <HAL_GPIO_Init>

	    /*Configure GPIO pins : LD4_Pin LD3_Pin */
	    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8002028:	0021      	movs	r1, r4
 800202a:	187b      	adds	r3, r7, r1
 800202c:	22c0      	movs	r2, #192	; 0xc0
 800202e:	0092      	lsls	r2, r2, #2
 8002030:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	000c      	movs	r4, r1
 8002034:	193b      	adds	r3, r7, r4
 8002036:	2201      	movs	r2, #1
 8002038:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	193b      	adds	r3, r7, r4
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	193b      	adds	r3, r7, r4
 8002042:	2200      	movs	r2, #0
 8002044:	60da      	str	r2, [r3, #12]
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002046:	193b      	adds	r3, r7, r4
 8002048:	4a27      	ldr	r2, [pc, #156]	; (80020e8 <MCU_Init+0x1e0>)
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f7fe fabf 	bl	80005d0 <HAL_GPIO_Init>

	    /*Configure GPIO pins : PB6 PB7 */
	    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002052:	0021      	movs	r1, r4
 8002054:	187b      	adds	r3, r7, r1
 8002056:	22c0      	movs	r2, #192	; 0xc0
 8002058:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205a:	187b      	adds	r3, r7, r1
 800205c:	2201      	movs	r2, #1
 800205e:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	187b      	adds	r3, r7, r1
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	187b      	adds	r3, r7, r1
 8002068:	2200      	movs	r2, #0
 800206a:	60da      	str	r2, [r3, #12]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	187b      	adds	r3, r7, r1
 800206e:	4a1f      	ldr	r2, [pc, #124]	; (80020ec <MCU_Init+0x1e4>)
 8002070:	0019      	movs	r1, r3
 8002072:	0010      	movs	r0, r2
 8002074:	f7fe faac 	bl	80005d0 <HAL_GPIO_Init>



	    /* USER CODE END SPI1_Init 1 */
	    /* SPI1 parameter configuration*/
	    SpiHandle.Instance = SPI1;
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <MCU_Init+0x1e8>)
 800207a:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <MCU_Init+0x1ec>)
 800207c:	601a      	str	r2, [r3, #0]
	    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800207e:	4b1c      	ldr	r3, [pc, #112]	; (80020f0 <MCU_Init+0x1e8>)
 8002080:	2282      	movs	r2, #130	; 0x82
 8002082:	0052      	lsls	r2, r2, #1
 8002084:	605a      	str	r2, [r3, #4]
	    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <MCU_Init+0x1e8>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
	    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MCU_Init+0x1e8>)
 800208e:	22e0      	movs	r2, #224	; 0xe0
 8002090:	00d2      	lsls	r2, r2, #3
 8002092:	60da      	str	r2, [r3, #12]
	    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MCU_Init+0x1e8>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
	    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <MCU_Init+0x1e8>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
	    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MCU_Init+0x1e8>)
 80020a2:	2280      	movs	r2, #128	; 0x80
 80020a4:	0092      	lsls	r2, r2, #2
 80020a6:	619a      	str	r2, [r3, #24]
	    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;//8;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MCU_Init+0x1e8>)
 80020aa:	2220      	movs	r2, #32
 80020ac:	61da      	str	r2, [r3, #28]
	    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ae:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <MCU_Init+0x1e8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
	    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MCU_Init+0x1e8>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
	    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <MCU_Init+0x1e8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	629a      	str	r2, [r3, #40]	; 0x28
	    SpiHandle.Init.CRCPolynomial = 7;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MCU_Init+0x1e8>)
 80020c2:	2207      	movs	r2, #7
 80020c4:	62da      	str	r2, [r3, #44]	; 0x2c
	    SpiHandle.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <MCU_Init+0x1e8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	631a      	str	r2, [r3, #48]	; 0x30
	    SpiHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MCU_Init+0x1e8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34
	    if (HAL_SPI_Init(&SpiHandle) != HAL_OK)
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <MCU_Init+0x1e8>)
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff f847 	bl	8001168 <HAL_SPI_Init>





}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b018      	add	sp, #96	; 0x60
 80020e0:	bdb0      	pop	{r4, r5, r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	40021000 	.word	0x40021000
 80020e8:	48000800 	.word	0x48000800
 80020ec:	48000400 	.word	0x48000400
 80020f0:	20000038 	.word	0x20000038
 80020f4:	40013000 	.word	0x40013000

080020f8 <MCU_Setup>:

void MCU_Setup(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
#ifdef FT81X_ENABLE
#endif // FT81X_ENABLE
}
 80020fc:	46c0      	nop			; (mov r8, r8)
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
	...

08002104 <MCU_CSlow>:

// ########################### GPIO CONTROL ####################################

// --------------------- Chip Select line low ----------------------------------
inline void MCU_CSlow(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //lo
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <MCU_CSlow+0x18>)
 800210a:	2200      	movs	r2, #0
 800210c:	2140      	movs	r1, #64	; 0x40
 800210e:	0018      	movs	r0, r3
 8002110:	f7fe fbce 	bl	80008b0 <HAL_GPIO_WritePin>
  //Nop();
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	48000400 	.word	0x48000400

08002120 <MCU_CShigh>:


// --------------------- Chip Select line high ---------------------------------
inline void MCU_CShigh(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //hi
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <MCU_CShigh+0x18>)
 8002126:	2201      	movs	r2, #1
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	0018      	movs	r0, r3
 800212c:	f7fe fbc0 	bl	80008b0 <HAL_GPIO_WritePin>
  //Nop();
}
 8002130:	46c0      	nop			; (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	48000400 	.word	0x48000400

0800213c <MCU_PDlow>:

// -------------------------- PD line low --------------------------------------
inline void MCU_PDlow(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //lo                                                     // PD# line low
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <MCU_PDlow+0x18>)
 8002142:	2200      	movs	r2, #0
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe fbb2 	bl	80008b0 <HAL_GPIO_WritePin>
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	48000400 	.word	0x48000400

08002158 <MCU_PDhigh>:

// ------------------------- PD line high --------------------------------------
inline void MCU_PDhigh(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //hi                                                      // PD# line high
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <MCU_PDhigh+0x18>)
 800215e:	2201      	movs	r2, #1
 8002160:	2180      	movs	r1, #128	; 0x80
 8002162:	0018      	movs	r0, r3
 8002164:	f7fe fba4 	bl	80008b0 <HAL_GPIO_WritePin>
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	48000400 	.word	0x48000400

08002174 <MCU_SPIReadWrite8>:

// --------------------- SPI Send and Receive ----------------------------------
uint8_t MCU_SPIReadWrite8(uint8_t DataToWrite)
{
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b087      	sub	sp, #28
 8002178:	af02      	add	r7, sp, #8
 800217a:	0002      	movs	r2, r0
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	701a      	strb	r2, [r3, #0]
    
	uint8_t DataRead[4];
	uint8_t TxBuffer[4];
	
	 TxBuffer[0] = DataToWrite;
 8002180:	2108      	movs	r1, #8
 8002182:	187b      	adds	r3, r7, r1
 8002184:	1dfa      	adds	r2, r7, #7
 8002186:	7812      	ldrb	r2, [r2, #0]
 8002188:	701a      	strb	r2, [r3, #0]
		
	HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*)TxBuffer, (uint8_t *)DataRead, 1, 5000);
 800218a:	240c      	movs	r4, #12
 800218c:	193a      	adds	r2, r7, r4
 800218e:	1879      	adds	r1, r7, r1
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MCU_SPIReadWrite8+0x34>)
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MCU_SPIReadWrite8+0x38>)
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2301      	movs	r3, #1
 8002198:	f7ff f89e 	bl	80012d8 <HAL_SPI_TransmitReceive>
    //default:
      //break;
//  }
	   

    return DataRead[0];
 800219c:	193b      	adds	r3, r7, r4
 800219e:	781b      	ldrb	r3, [r3, #0]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b005      	add	sp, #20
 80021a6:	bd90      	pop	{r4, r7, pc}
 80021a8:	20000038 	.word	0x20000038
 80021ac:	00001388 	.word	0x00001388

080021b0 <MCU_SPIReadWrite16>:

uint16_t MCU_SPIReadWrite16(uint16_t DataToWrite)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	0002      	movs	r2, r0
 80021b8:	1dbb      	adds	r3, r7, #6
 80021ba:	801a      	strh	r2, [r3, #0]
    uint16_t DataRead = 0;
 80021bc:	240e      	movs	r4, #14
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	2200      	movs	r2, #0
 80021c2:	801a      	strh	r2, [r3, #0]
    DataRead = MCU_SPIReadWrite8((DataToWrite) >> 8) << 8;
 80021c4:	1dbb      	adds	r3, r7, #6
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	0018      	movs	r0, r3
 80021d0:	f7ff ffd0 	bl	8002174 <MCU_SPIReadWrite8>
 80021d4:	0003      	movs	r3, r0
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	0212      	lsls	r2, r2, #8
 80021dc:	801a      	strh	r2, [r3, #0]
    DataRead |= MCU_SPIReadWrite8((DataToWrite) & 0xff);
 80021de:	1dbb      	adds	r3, r7, #6
 80021e0:	881b      	ldrh	r3, [r3, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ffc5 	bl	8002174 <MCU_SPIReadWrite8>
 80021ea:	0003      	movs	r3, r0
 80021ec:	b299      	uxth	r1, r3
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	193a      	adds	r2, r7, r4
 80021f2:	8812      	ldrh	r2, [r2, #0]
 80021f4:	430a      	orrs	r2, r1
 80021f6:	801a      	strh	r2, [r3, #0]
    return MCU_be16toh(DataRead);
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 f949 	bl	8002494 <MCU_be16toh>
 8002202:	0003      	movs	r3, r0
}
 8002204:	0018      	movs	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	b005      	add	sp, #20
 800220a:	bd90      	pop	{r4, r7, pc}

0800220c <MCU_SPIReadWrite24>:



uint32_t MCU_SPIReadWrite24(uint32_t DataToWrite)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    uint32_t DataRead = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
    uint32_t temp;
    

     temp = (MCU_SPIReadWrite8((DataToWrite) >> 24)); //****
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	0e1b      	lsrs	r3, r3, #24
 800221c:	b2db      	uxtb	r3, r3
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ffa8 	bl	8002174 <MCU_SPIReadWrite8>
 8002224:	0003      	movs	r3, r0
 8002226:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<24);
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

     temp = (MCU_SPIReadWrite8((DataToWrite) >> 16));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0c1b      	lsrs	r3, r3, #16
 8002236:	b2db      	uxtb	r3, r3
 8002238:	0018      	movs	r0, r3
 800223a:	f7ff ff9b 	bl	8002174 <MCU_SPIReadWrite8>
 800223e:	0003      	movs	r3, r0
 8002240:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<16);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
     temp = (MCU_SPIReadWrite8((DataToWrite) >> 8));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b2db      	uxtb	r3, r3
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff ff8e 	bl	8002174 <MCU_SPIReadWrite8>
 8002258:	0003      	movs	r3, r0
 800225a:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp<<8);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

    return MCU_be32toh(DataRead);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 f91f 	bl	80024ac <MCU_be32toh>
 800226e:	0003      	movs	r3, r0
}
 8002270:	0018      	movs	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	b004      	add	sp, #16
 8002276:	bd80      	pop	{r7, pc}

08002278 <MCU_SPIReadWrite32>:


uint32_t MCU_SPIReadWrite32(uint32_t DataToWrite)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
    uint32_t DataRead = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]
    uint32_t temp;

	temp = (MCU_SPIReadWrite8((DataToWrite) >> 24)); 
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	0e1b      	lsrs	r3, r3, #24
 8002288:	b2db      	uxtb	r3, r3
 800228a:	0018      	movs	r0, r3
 800228c:	f7ff ff72 	bl	8002174 <MCU_SPIReadWrite8>
 8002290:	0003      	movs	r3, r0
 8002292:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp << 24);
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
     temp = (MCU_SPIReadWrite8((DataToWrite) >> 16)); 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0c1b      	lsrs	r3, r3, #16
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff ff65 	bl	8002174 <MCU_SPIReadWrite8>
 80022aa:	0003      	movs	r3, r0
 80022ac:	60bb      	str	r3, [r7, #8]
    DataRead |= (temp << 16);      
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	041b      	lsls	r3, r3, #16
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    DataRead |= (MCU_SPIReadWrite8((DataToWrite) >> 8) << 8);      
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff ff58 	bl	8002174 <MCU_SPIReadWrite8>
 80022c4:	0003      	movs	r3, r0
 80022c6:	021b      	lsls	r3, r3, #8
 80022c8:	001a      	movs	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
    DataRead |= (MCU_SPIReadWrite8(DataToWrite) & 0xff); 
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7ff ff4d 	bl	8002174 <MCU_SPIReadWrite8>
 80022da:	0003      	movs	r3, r0
 80022dc:	001a      	movs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
 
    return MCU_be32toh(DataRead);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f8e0 	bl	80024ac <MCU_be32toh>
 80022ec:	0003      	movs	r3, r0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <MCU_Delay_20ms>:

void MCU_Delay_20ms(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
    HAL_Delay(20);
 80022fa:	2014      	movs	r0, #20
 80022fc:	f7fe f890 	bl	8000420 <HAL_Delay>
	}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <MCU_SPIRead8>:


// --------------------- SPI Send and Receive ----------------------------------

uint8_t MCU_SPIRead8(void)
{
 8002306:	b590      	push	{r4, r7, lr}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
	uint8_t DataRead = 0;
 800230c:	1dfb      	adds	r3, r7, #7
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]

	DataRead = MCU_SPIReadWrite8(0);
 8002312:	1dfc      	adds	r4, r7, #7
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff ff2d 	bl	8002174 <MCU_SPIReadWrite8>
 800231a:	0003      	movs	r3, r0
 800231c:	7023      	strb	r3, [r4, #0]
    
	return DataRead;
 800231e:	1dfb      	adds	r3, r7, #7
 8002320:	781b      	ldrb	r3, [r3, #0]
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b003      	add	sp, #12
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <MCU_SPIWrite8>:

void MCU_SPIWrite8(uint8_t DataToWrite)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	0002      	movs	r2, r0
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	701a      	strb	r2, [r3, #0]
	MCU_SPIReadWrite8(DataToWrite);
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff ff1a 	bl	8002174 <MCU_SPIReadWrite8>
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <MCU_SPIRead16>:

uint16_t MCU_SPIRead16(void)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
	uint16_t DataRead = 0;
 800234e:	1dbb      	adds	r3, r7, #6
 8002350:	2200      	movs	r2, #0
 8002352:	801a      	strh	r2, [r3, #0]

	DataRead = MCU_SPIReadWrite16(0);
 8002354:	1dbc      	adds	r4, r7, #6
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff ff2a 	bl	80021b0 <MCU_SPIReadWrite16>
 800235c:	0003      	movs	r3, r0
 800235e:	8023      	strh	r3, [r4, #0]

	return DataRead;
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	881b      	ldrh	r3, [r3, #0]
}
 8002364:	0018      	movs	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	b003      	add	sp, #12
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <MCU_SPIWrite16>:

void MCU_SPIWrite16(uint16_t DataToWrite)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	1dbb      	adds	r3, r7, #6
 8002376:	801a      	strh	r2, [r3, #0]
	MCU_SPIReadWrite16(DataToWrite);
 8002378:	1dbb      	adds	r3, r7, #6
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	0018      	movs	r0, r3
 800237e:	f7ff ff17 	bl	80021b0 <MCU_SPIReadWrite16>
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b002      	add	sp, #8
 8002388:	bd80      	pop	{r7, pc}

0800238a <MCU_SPIWrite24>:

	return DataRead;
}

void MCU_SPIWrite24(uint32_t DataToWrite)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
	MCU_SPIReadWrite24(DataToWrite);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	0018      	movs	r0, r3
 8002396:	f7ff ff39 	bl	800220c <MCU_SPIReadWrite24>
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <MCU_SPIRead32>:

uint32_t MCU_SPIRead32(void)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b082      	sub	sp, #8
 80023a6:	af00      	add	r7, sp, #0
	uint32_t DataRead = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]

	DataRead = MCU_SPIReadWrite32(0);
 80023ac:	2000      	movs	r0, #0
 80023ae:	f7ff ff63 	bl	8002278 <MCU_SPIReadWrite32>
 80023b2:	0003      	movs	r3, r0
 80023b4:	607b      	str	r3, [r7, #4]

	return DataRead;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <MCU_SPIWrite32>:

void MCU_SPIWrite32(uint32_t DataToWrite)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	MCU_SPIReadWrite32(DataToWrite);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7ff ff54 	bl	8002278 <MCU_SPIReadWrite32>
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <MCU_SPIWrite>:

void MCU_SPIWrite(const uint8_t *DataToWrite, uint32_t length)
{
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
	//spi_writen(SPIM, DataToWrite, length);

    uint16_t DataPointer = 0;   
 80023e2:	210e      	movs	r1, #14
 80023e4:	187b      	adds	r3, r7, r1
 80023e6:	2200      	movs	r2, #0
 80023e8:	801a      	strh	r2, [r3, #0]
    DataPointer = 0;
 80023ea:	187b      	adds	r3, r7, r1
 80023ec:	2200      	movs	r2, #0
 80023ee:	801a      	strh	r2, [r3, #0]

    while(DataPointer < length)
 80023f0:	e00d      	b.n	800240e <MCU_SPIWrite+0x36>
    {
        MCU_SPIWrite8(DataToWrite[DataPointer]);                                       // Send data byte-by-byte from array
 80023f2:	240e      	movs	r4, #14
 80023f4:	193b      	adds	r3, r7, r4
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	18d3      	adds	r3, r2, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	0018      	movs	r0, r3
 8002400:	f7ff ff93 	bl	800232a <MCU_SPIWrite8>
        DataPointer ++;
 8002404:	193b      	adds	r3, r7, r4
 8002406:	881a      	ldrh	r2, [r3, #0]
 8002408:	193b      	adds	r3, r7, r4
 800240a:	3201      	adds	r2, #1
 800240c:	801a      	strh	r2, [r3, #0]
    while(DataPointer < length)
 800240e:	230e      	movs	r3, #14
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d8eb      	bhi.n	80023f2 <MCU_SPIWrite+0x1a>
    }
}
 800241a:	46c0      	nop			; (mov r8, r8)
 800241c:	46c0      	nop			; (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b005      	add	sp, #20
 8002422:	bd90      	pop	{r4, r7, pc}

08002424 <MCU_htobe32>:
{
    return h;
}

uint32_t MCU_htobe32 (uint32_t h)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
    return h;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}

08002436 <MCU_htole16>:

uint16_t MCU_htole16 (uint16_t h)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	0002      	movs	r2, r0
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	801a      	strh	r2, [r3, #0]

        return bswap16(h); 
 8002442:	1dbb      	adds	r3, r7, #6
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b29b      	uxth	r3, r3
 800244a:	b21a      	sxth	r2, r3
 800244c:	1dbb      	adds	r3, r7, #6
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	b21b      	sxth	r3, r3
 8002454:	4313      	orrs	r3, r2
 8002456:	b21b      	sxth	r3, r3
 8002458:	b29b      	uxth	r3, r3
}
 800245a:	0018      	movs	r0, r3
 800245c:	46bd      	mov	sp, r7
 800245e:	b002      	add	sp, #8
 8002460:	bd80      	pop	{r7, pc}

08002462 <MCU_htole32>:

uint32_t MCU_htole32 (uint32_t h)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]

        return bswap32(h);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0e1a      	lsrs	r2, r3, #24
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0a19      	lsrs	r1, r3, #8
 8002472:	23ff      	movs	r3, #255	; 0xff
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	400b      	ands	r3, r1
 8002478:	431a      	orrs	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0219      	lsls	r1, r3, #8
 800247e:	23ff      	movs	r3, #255	; 0xff
 8002480:	041b      	lsls	r3, r3, #16
 8002482:	400b      	ands	r3, r1
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	061b      	lsls	r3, r3, #24
 800248a:	4313      	orrs	r3, r2
}
 800248c:	0018      	movs	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	b002      	add	sp, #8
 8002492:	bd80      	pop	{r7, pc}

08002494 <MCU_be16toh>:

uint16_t MCU_be16toh (uint16_t h)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	0002      	movs	r2, r0
 800249c:	1dbb      	adds	r3, r7, #6
 800249e:	801a      	strh	r2, [r3, #0]
    return h;
 80024a0:	1dbb      	adds	r3, r7, #6
 80024a2:	881b      	ldrh	r3, [r3, #0]
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <MCU_be32toh>:
uint32_t MCU_be32toh (uint32_t h)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
     return h;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b002      	add	sp, #8
 80024bc:	bd80      	pop	{r7, pc}

080024be <MCU_le16toh>:

uint16_t MCU_le16toh (uint16_t h)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	0002      	movs	r2, r0
 80024c6:	1dbb      	adds	r3, r7, #6
 80024c8:	801a      	strh	r2, [r3, #0]

        return bswap16(h); 
 80024ca:	1dbb      	adds	r3, r7, #6
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	1dbb      	adds	r3, r7, #6
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	b21b      	sxth	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b21b      	sxth	r3, r3
 80024e0:	b29b      	uxth	r3, r3
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}

080024ea <MCU_le32toh>:

uint32_t MCU_le32toh (uint32_t h)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
        return bswap32(h);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0e1a      	lsrs	r2, r3, #24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	0a19      	lsrs	r1, r3, #8
 80024fa:	23ff      	movs	r3, #255	; 0xff
 80024fc:	021b      	lsls	r3, r3, #8
 80024fe:	400b      	ands	r3, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0219      	lsls	r1, r3, #8
 8002506:	23ff      	movs	r3, #255	; 0xff
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	400b      	ands	r3, r1
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	061b      	lsls	r3, r3, #24
 8002512:	4313      	orrs	r3, r2

}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b002      	add	sp, #8
 800251a:	bd80      	pop	{r7, pc}

0800251c <EVE_Init>:
//##############################################################################
// Library functions
//##############################################################################

void EVE_Init(void)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
	uint8_t regGpio;
	int i;

	HAL_EVE_Init();
 8002522:	f000 fda1 	bl	8003068 <HAL_EVE_Init>

	// ------------------------- Display settings ------------------------------

	// LCD display parameters
	// Active width of LCD display
	HAL_MemWrite16(EVE_REG_HSIZE,   EVE_DISP_WIDTH);
 8002526:	23c8      	movs	r3, #200	; 0xc8
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4a6f      	ldr	r2, [pc, #444]	; (80026e8 <EVE_Init+0x1cc>)
 800252c:	0019      	movs	r1, r3
 800252e:	0010      	movs	r0, r2
 8002530:	f000 fecf 	bl	80032d2 <HAL_MemWrite16>
	// Total number of clocks per line
	HAL_MemWrite16(EVE_REG_HCYCLE,  EVE_DISP_HCYCLE);
 8002534:	23e8      	movs	r3, #232	; 0xe8
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <EVE_Init+0x1d0>)
 800253a:	0019      	movs	r1, r3
 800253c:	0010      	movs	r0, r2
 800253e:	f000 fec8 	bl	80032d2 <HAL_MemWrite16>
	// Start of active line
	HAL_MemWrite16(EVE_REG_HOFFSET, EVE_DISP_HOFFSET);
 8002542:	4b6b      	ldr	r3, [pc, #428]	; (80026f0 <EVE_Init+0x1d4>)
 8002544:	2158      	movs	r1, #88	; 0x58
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fec3 	bl	80032d2 <HAL_MemWrite16>
	// Start of horizontal sync pulse
	HAL_MemWrite16(EVE_REG_HSYNC0,  EVE_DISP_HSYNC0);
 800254c:	4b69      	ldr	r3, [pc, #420]	; (80026f4 <EVE_Init+0x1d8>)
 800254e:	2100      	movs	r1, #0
 8002550:	0018      	movs	r0, r3
 8002552:	f000 febe 	bl	80032d2 <HAL_MemWrite16>
	// End of horizontal sync pulse
	HAL_MemWrite16(EVE_REG_HSYNC1,  EVE_DISP_HSYNC1);
 8002556:	4b68      	ldr	r3, [pc, #416]	; (80026f8 <EVE_Init+0x1dc>)
 8002558:	2130      	movs	r1, #48	; 0x30
 800255a:	0018      	movs	r0, r3
 800255c:	f000 feb9 	bl	80032d2 <HAL_MemWrite16>
	// Active height of LCD display
	HAL_MemWrite16(EVE_REG_VSIZE,   EVE_DISP_HEIGHT);
 8002560:	23f0      	movs	r3, #240	; 0xf0
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4a65      	ldr	r2, [pc, #404]	; (80026fc <EVE_Init+0x1e0>)
 8002566:	0019      	movs	r1, r3
 8002568:	0010      	movs	r0, r2
 800256a:	f000 feb2 	bl	80032d2 <HAL_MemWrite16>
	// Total number of lines per screen
	HAL_MemWrite16(EVE_REG_VCYCLE,  EVE_DISP_VCYCLE);
 800256e:	4a64      	ldr	r2, [pc, #400]	; (8002700 <EVE_Init+0x1e4>)
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <EVE_Init+0x1e8>)
 8002572:	0011      	movs	r1, r2
 8002574:	0018      	movs	r0, r3
 8002576:	f000 feac 	bl	80032d2 <HAL_MemWrite16>
	// Start of active screen
	HAL_MemWrite16(EVE_REG_VOFFSET, EVE_DISP_VOFFSET);
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <EVE_Init+0x1ec>)
 800257c:	2120      	movs	r1, #32
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fea7 	bl	80032d2 <HAL_MemWrite16>
	// Start of vertical sync pulse
	HAL_MemWrite16(EVE_REG_VSYNC0,  EVE_DISP_VSYNC0);
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <EVE_Init+0x1f0>)
 8002586:	2100      	movs	r1, #0
 8002588:	0018      	movs	r0, r3
 800258a:	f000 fea2 	bl	80032d2 <HAL_MemWrite16>
	// End of vertical sync pulse
	HAL_MemWrite16(EVE_REG_VSYNC1,  EVE_DISP_VSYNC1);
 800258e:	4b60      	ldr	r3, [pc, #384]	; (8002710 <EVE_Init+0x1f4>)
 8002590:	2103      	movs	r1, #3
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fe9d 	bl	80032d2 <HAL_MemWrite16>
	// Define RGB output pins
	HAL_MemWrite8(EVE_REG_SWIZZLE,  EVE_DISP_SWIZZLE);
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <EVE_Init+0x1f8>)
 800259a:	2100      	movs	r1, #0
 800259c:	0018      	movs	r0, r3
 800259e:	f000 feb2 	bl	8003306 <HAL_MemWrite8>
	// Define active edge of PCLK
	HAL_MemWrite8(EVE_REG_PCLK_POL, EVE_DISP_PCLKPOL);
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <EVE_Init+0x1fc>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fead 	bl	8003306 <HAL_MemWrite8>
	// Turn on or off CSpread
	HAL_MemWrite8(EVE_REG_CSPREAD,  EVE_DISP_CSPREAD);
 80025ac:	4b5b      	ldr	r3, [pc, #364]	; (800271c <EVE_Init+0x200>)
 80025ae:	2100      	movs	r1, #0
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 fea8 	bl	8003306 <HAL_MemWrite8>
	// Turn on or off Dither
	HAL_MemWrite8(EVE_REG_DITHER,  EVE_DISP_DITHER);
 80025b6:	4b5a      	ldr	r3, [pc, #360]	; (8002720 <EVE_Init+0x204>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 fea3 	bl	8003306 <HAL_MemWrite8>

	// Write first display list
	HAL_MemWrite32((EVE_RAM_DL + 0), EVE_ENC_CLEAR_COLOR_RGB(0,0,0));
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	049a      	lsls	r2, r3, #18
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	0011      	movs	r1, r2
 80025ca:	0018      	movs	r0, r3
 80025cc:	f000 fe6a 	bl	80032a4 <HAL_MemWrite32>
	HAL_MemWrite32((EVE_RAM_DL + 4), EVE_ENC_CLEAR(1,1,1));
 80025d0:	4a54      	ldr	r2, [pc, #336]	; (8002724 <EVE_Init+0x208>)
 80025d2:	4b55      	ldr	r3, [pc, #340]	; (8002728 <EVE_Init+0x20c>)
 80025d4:	0011      	movs	r1, r2
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fe64 	bl	80032a4 <HAL_MemWrite32>
	HAL_MemWrite32((EVE_RAM_DL + 8), EVE_ENC_DISPLAY());
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <EVE_Init+0x210>)
 80025de:	2100      	movs	r1, #0
 80025e0:	0018      	movs	r0, r3
 80025e2:	f000 fe5f 	bl	80032a4 <HAL_MemWrite32>
	HAL_MemWrite8(EVE_REG_DLSWAP, EVE_DLSWAP_FRAME);
 80025e6:	4b52      	ldr	r3, [pc, #328]	; (8002730 <EVE_Init+0x214>)
 80025e8:	2102      	movs	r1, #2
 80025ea:	0018      	movs	r0, r3
 80025ec:	f000 fe8b 	bl	8003306 <HAL_MemWrite8>

	// Read the  GPIO register for a read/modify/write operation
	regGpio = HAL_MemRead8(EVE_REG_GPIO);
 80025f0:	1cfc      	adds	r4, r7, #3
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <EVE_Init+0x218>)
 80025f4:	0018      	movs	r0, r3
 80025f6:	f000 fed1 	bl	800339c <HAL_MemRead8>
 80025fa:	0003      	movs	r3, r0
 80025fc:	7023      	strb	r3, [r4, #0]
	// set bit 7 of  GPIO register (DISP) - others are inputs
	regGpio = regGpio | 0x80;
 80025fe:	1cfb      	adds	r3, r7, #3
 8002600:	1cfa      	adds	r2, r7, #3
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	2180      	movs	r1, #128	; 0x80
 8002606:	4249      	negs	r1, r1
 8002608:	430a      	orrs	r2, r1
 800260a:	701a      	strb	r2, [r3, #0]
	// Enable the DISP signal to the LCD panel
	HAL_MemWrite8(EVE_REG_GPIO, regGpio);
 800260c:	1cfb      	adds	r3, r7, #3
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	4a48      	ldr	r2, [pc, #288]	; (8002734 <EVE_Init+0x218>)
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f000 fe76 	bl	8003306 <HAL_MemWrite8>
	#if (defined EVE4_ENABLE) && (defined SET_PCLK_FREQ)
	HAL_MemWrite16(EVE_REG_PCLK_FREQ,  EVE_DISP_PCLK_FREQ);
	HAL_MemWrite8(EVE_REG_PCLK, 1);
	# else
	// Now start clocking data to the LCD panel
	HAL_MemWrite8(EVE_REG_PCLK, EVE_DISP_PCLK);
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <EVE_Init+0x21c>)
 800261c:	2102      	movs	r1, #2
 800261e:	0018      	movs	r0, r3
 8002620:	f000 fe71 	bl	8003306 <HAL_MemWrite8>
	#endif

	HAL_MemWrite8(EVE_REG_PWM_DUTY, 127);
 8002624:	4b45      	ldr	r3, [pc, #276]	; (800273c <EVE_Init+0x220>)
 8002626:	217f      	movs	r1, #127	; 0x7f
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fe6c 	bl	8003306 <HAL_MemWrite8>

	// ---------------------- Touch and Audio settings -------------------------
	// Eliminate any false touches
	HAL_MemWrite16(EVE_REG_TOUCH_RZTHRESH, 1200);
 800262e:	2396      	movs	r3, #150	; 0x96
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4a43      	ldr	r2, [pc, #268]	; (8002740 <EVE_Init+0x224>)
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f000 fe4b 	bl	80032d2 <HAL_MemWrite16>

	// turn recorded audio volume down
	HAL_MemWrite8(EVE_REG_VOL_PB, EVE_VOL_ZERO);
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <EVE_Init+0x228>)
 800263e:	2100      	movs	r1, #0
 8002640:	0018      	movs	r0, r3
 8002642:	f000 fe60 	bl	8003306 <HAL_MemWrite8>
	// turn synthesizer volume down
	HAL_MemWrite8(EVE_REG_VOL_SOUND, EVE_VOL_ZERO);
 8002646:	4b40      	ldr	r3, [pc, #256]	; (8002748 <EVE_Init+0x22c>)
 8002648:	2100      	movs	r1, #0
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fe5b 	bl	8003306 <HAL_MemWrite8>
	// set synthesizer to mute
	HAL_MemWrite16(EVE_REG_SOUND, 0x6000);
 8002650:	23c0      	movs	r3, #192	; 0xc0
 8002652:	01db      	lsls	r3, r3, #7
 8002654:	4a3d      	ldr	r2, [pc, #244]	; (800274c <EVE_Init+0x230>)
 8002656:	0019      	movs	r1, r3
 8002658:	0010      	movs	r0, r2
 800265a:	f000 fe3a 	bl	80032d2 <HAL_MemWrite16>

	// --------------------- Clear screen ready to start -----------------------
	EVE_LIB_BeginCoProList();
 800265e:	f000 f877 	bl	8002750 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 8002662:	f000 fbb1 	bl	8002dc8 <EVE_CMD_DLSTART>
	EVE_CLEAR_COLOR_RGB(0, 0, 0);
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f9a4 	bl	80029b8 <EVE_CLEAR_COLOR_RGB>
	EVE_CLEAR(1,1,1);
 8002670:	2201      	movs	r2, #1
 8002672:	2101      	movs	r1, #1
 8002674:	2001      	movs	r0, #1
 8002676:	f000 f9c5 	bl	8002a04 <EVE_CLEAR>
	EVE_DISPLAY();
 800267a:	f000 fb28 	bl	8002cce <EVE_DISPLAY>
	EVE_CMD_SWAP();
 800267e:	f000 fb4f 	bl	8002d20 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 8002682:	f000 f879 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8002686:	f000 f881 	bl	800278c <EVE_LIB_AwaitCoProEmpty>


#if (defined EVE2_ENABLE || defined EVE3_ENABLE || defined EVE4_ENABLE)

	// ---------------------- Reset all bitmap properties ------------------------
	EVE_LIB_BeginCoProList();
 800268a:	f000 f861 	bl	8002750 <EVE_LIB_BeginCoProList>
	EVE_CMD_DLSTART();
 800268e:	f000 fb9b 	bl	8002dc8 <EVE_CMD_DLSTART>
	EVE_CLEAR_COLOR_RGB(0, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2000      	movs	r0, #0
 8002698:	f000 f98e 	bl	80029b8 <EVE_CLEAR_COLOR_RGB>
	EVE_CLEAR(1,1,1);
 800269c:	2201      	movs	r2, #1
 800269e:	2101      	movs	r1, #1
 80026a0:	2001      	movs	r0, #1
 80026a2:	f000 f9af 	bl	8002a04 <EVE_CLEAR>
	for (i = 0; i < 16; i++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	e00d      	b.n	80026c8 <EVE_Init+0x1ac>
	{
		EVE_BITMAP_HANDLE(i);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fa35 	bl	8002b20 <EVE_BITMAP_HANDLE>
		EVE_CMD_SETBITMAP(0,0,0,0);
 80026b6:	2300      	movs	r3, #0
 80026b8:	2200      	movs	r2, #0
 80026ba:	2100      	movs	r1, #0
 80026bc:	2000      	movs	r0, #0
 80026be:	f000 fca3 	bl	8003008 <EVE_CMD_SETBITMAP>
	for (i = 0; i < 16; i++)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3301      	adds	r3, #1
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2b0f      	cmp	r3, #15
 80026cc:	ddee      	ble.n	80026ac <EVE_Init+0x190>
	}
	EVE_DISPLAY();
 80026ce:	f000 fafe 	bl	8002cce <EVE_DISPLAY>
	EVE_CMD_SWAP();
 80026d2:	f000 fb25 	bl	8002d20 <EVE_CMD_SWAP>
	EVE_LIB_EndCoProList();
 80026d6:	f000 f84f 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 80026da:	f000 f857 	bl	800278c <EVE_LIB_AwaitCoProEmpty>
	EVE_DISPLAY();
	EVE_CMD_SWAP();
	EVE_LIB_EndCoProList();
	EVE_LIB_AwaitCoProEmpty();
#endif
}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b003      	add	sp, #12
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	00302034 	.word	0x00302034
 80026ec:	0030202c 	.word	0x0030202c
 80026f0:	00302030 	.word	0x00302030
 80026f4:	00302038 	.word	0x00302038
 80026f8:	0030203c 	.word	0x0030203c
 80026fc:	00302048 	.word	0x00302048
 8002700:	0000020d 	.word	0x0000020d
 8002704:	00302040 	.word	0x00302040
 8002708:	00302044 	.word	0x00302044
 800270c:	0030204c 	.word	0x0030204c
 8002710:	00302050 	.word	0x00302050
 8002714:	00302064 	.word	0x00302064
 8002718:	0030206c 	.word	0x0030206c
 800271c:	00302068 	.word	0x00302068
 8002720:	00302060 	.word	0x00302060
 8002724:	26000007 	.word	0x26000007
 8002728:	00300004 	.word	0x00300004
 800272c:	00300008 	.word	0x00300008
 8002730:	00302054 	.word	0x00302054
 8002734:	00302094 	.word	0x00302094
 8002738:	00302070 	.word	0x00302070
 800273c:	003020d4 	.word	0x003020d4
 8002740:	00302118 	.word	0x00302118
 8002744:	00302080 	.word	0x00302080
 8002748:	00302084 	.word	0x00302084
 800274c:	00302088 	.word	0x00302088

08002750 <EVE_LIB_BeginCoProList>:

// Begins co-pro list for display creation
void EVE_LIB_BeginCoProList(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	// Wait for command FIFO to be empty and record current position in FIFO
	EVE_LIB_AwaitCoProEmpty();
 8002754:	f000 f81a 	bl	800278c <EVE_LIB_AwaitCoProEmpty>

	// Begins SPI transaction
	HAL_ChipSelect(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f000 fce5 	bl	8003128 <HAL_ChipSelect>
	// Send address for writing as the next free location in the co-pro buffer
	HAL_SetWriteAddress(EVE_RAM_CMD + HAL_GetCmdPointer());
 800275e:	f000 fe6f 	bl	8003440 <HAL_GetCmdPointer>
 8002762:	0003      	movs	r3, r0
 8002764:	22c2      	movs	r2, #194	; 0xc2
 8002766:	0392      	lsls	r2, r2, #14
 8002768:	4694      	mov	ip, r2
 800276a:	4463      	add	r3, ip
 800276c:	0018      	movs	r0, r3
 800276e:	f000 fd03 	bl	8003178 <HAL_SetWriteAddress>
}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <EVE_LIB_EndCoProList>:

// Ends co-pro list for display creation
void EVE_LIB_EndCoProList(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	// End SPI transaction
	HAL_ChipSelect(0);
 800277c:	2000      	movs	r0, #0
 800277e:	f000 fcd3 	bl	8003128 <HAL_ChipSelect>
	// Update the ring buffer pointer to start decode
	HAL_WriteCmdPointer();
 8002782:	f000 fe67 	bl	8003454 <HAL_WriteCmdPointer>
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <EVE_LIB_AwaitCoProEmpty>:

// Waits for the read and write pointers to become equal
void EVE_LIB_AwaitCoProEmpty(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
	// Await completion of processing
	HAL_WaitCmdFifoEmpty();
 8002790:	f000 fe72 	bl	8003478 <HAL_WaitCmdFifoEmpty>
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <EVE_LIB_WriteDataToRAMG>:

// Writes a block of data to the RAM_G
void EVE_LIB_WriteDataToRAMG(const uint8_t *ImgData, uint32_t DataSize, uint32_t DestAddress)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
	// Begins SPI transaction
	HAL_ChipSelect(1);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f000 fcbe 	bl	8003128 <HAL_ChipSelect>
	// Send address to which first value will be written
	HAL_SetWriteAddress(DestAddress);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fce2 	bl	8003178 <HAL_SetWriteAddress>

	// Pad data length to multiple of 4.
	DataSize = (DataSize + 3) & (~3);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	3303      	adds	r3, #3
 80027b8:	2203      	movs	r2, #3
 80027ba:	4393      	bics	r3, r2
 80027bc:	60bb      	str	r3, [r7, #8]

	// Send data as 32 bits.
	while (DataSize)
 80027be:	e00a      	b.n	80027d6 <EVE_LIB_WriteDataToRAMG+0x3c>
	{
		HAL_Write32(*(uint32_t *)ImgData);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f000 fd0b 	bl	80031e0 <HAL_Write32>
		ImgData += 4;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	3304      	adds	r3, #4
 80027ce:	60fb      	str	r3, [r7, #12]
		DataSize -= 4;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3b04      	subs	r3, #4
 80027d4:	60bb      	str	r3, [r7, #8]
	while (DataSize)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f1      	bne.n	80027c0 <EVE_LIB_WriteDataToRAMG+0x26>
	}

	// End SPI transaction
	HAL_ChipSelect(0);
 80027dc:	2000      	movs	r0, #0
 80027de:	f000 fca3 	bl	8003128 <HAL_ChipSelect>
}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b004      	add	sp, #16
 80027e8:	bd80      	pop	{r7, pc}

080027ea <EVE_LIB_WriteDataToCMD>:
	HAL_ChipSelect(0);
}

// Write a block of data to the coprocessor
void EVE_LIB_WriteDataToCMD(const uint8_t *ImgData, uint32_t DataSize)
{
 80027ea:	b590      	push	{r4, r7, lr}
 80027ec:	b087      	sub	sp, #28
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
	uint32_t CurrentIndex = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
	uint32_t ChunkSize = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]
	const uint32_t MaxChunkSize = 128;
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	60bb      	str	r3, [r7, #8]
	uint8_t IsLastChunk = 0;
 8002800:	230f      	movs	r3, #15
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
	uint16_t Freespace = 0;
 8002808:	230c      	movs	r3, #12
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
	// one or more bursts and then the remainder. MaxChunkSize is a size which
	// is smaller than the command buffer on the EVE and small enough to gain
	// maximum buffering effect from the MCU SPI hardware.

	// Pad data length to multiple of 4.
	DataSize = (DataSize + 3) & (~3);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3303      	adds	r3, #3
 8002814:	2203      	movs	r2, #3
 8002816:	4393      	bics	r3, r2
 8002818:	603b      	str	r3, [r7, #0]

	// While not all data is sent
	while (CurrentIndex < DataSize)
 800281a:	e04f      	b.n	80028bc <EVE_LIB_WriteDataToCMD+0xd2>
	{
		// If more than ChunkSize bytes to send
		if ((DataSize - CurrentIndex) > MaxChunkSize)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d206      	bcs.n	8002836 <EVE_LIB_WriteDataToCMD+0x4c>
		{
			// ... then add ChunkSize to the current target index to make new target
			ChunkSize = MaxChunkSize;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	613b      	str	r3, [r7, #16]
			// ... and this is not the last chunk
			IsLastChunk = 0;
 800282c:	230f      	movs	r3, #15
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e007      	b.n	8002846 <EVE_LIB_WriteDataToCMD+0x5c>
		}
		// or if all remaining bytes can fit in one chunk
		else
		{
			// ... then add the amount of data to the current target
			ChunkSize = DataSize - CurrentIndex;
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	613b      	str	r3, [r7, #16]
			// .. and this is the last chunk
			IsLastChunk = 1;
 800283e:	230f      	movs	r3, #15
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
		}

		// Wait until there is space
		Freespace = 0;
 8002846:	230c      	movs	r3, #12
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]
		while (Freespace < MaxChunkSize)
 800284e:	e005      	b.n	800285c <EVE_LIB_WriteDataToCMD+0x72>
		{
			Freespace = HAL_CheckCmdFreeSpace();
 8002850:	230c      	movs	r3, #12
 8002852:	18fc      	adds	r4, r7, r3
 8002854:	f000 fe34 	bl	80034c0 <HAL_CheckCmdFreeSpace>
 8002858:	0003      	movs	r3, r0
 800285a:	8023      	strh	r3, [r4, #0]
		while (Freespace < MaxChunkSize)
 800285c:	230c      	movs	r3, #12
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	429a      	cmp	r2, r3
 8002866:	d8f3      	bhi.n	8002850 <EVE_LIB_WriteDataToCMD+0x66>
		}

		// Begin an SPI burst write
		HAL_ChipSelect(1);
 8002868:	2001      	movs	r0, #1
 800286a:	f000 fc5d 	bl	8003128 <HAL_ChipSelect>

		// to the next location in the FIFO
		HAL_SetWriteAddress(EVE_RAM_CMD + HAL_GetCmdPointer());
 800286e:	f000 fde7 	bl	8003440 <HAL_GetCmdPointer>
 8002872:	0003      	movs	r3, r0
 8002874:	22c2      	movs	r2, #194	; 0xc2
 8002876:	0392      	lsls	r2, r2, #14
 8002878:	4694      	mov	ip, r2
 800287a:	4463      	add	r3, ip
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fc7b 	bl	8003178 <HAL_SetWriteAddress>
		
		HAL_Write(ImgData, ChunkSize);
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0011      	movs	r1, r2
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fc9a 	bl	80031c2 <HAL_Write>
		ImgData += ChunkSize;
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	607b      	str	r3, [r7, #4]
		CurrentIndex += ChunkSize;
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	18d3      	adds	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]

		// End the SPI burst
		HAL_ChipSelect(0);
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 fc42 	bl	8003128 <HAL_ChipSelect>

		// Calculate where end of data lies
		HAL_IncCmdPointer(ChunkSize);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fdb1 	bl	8003410 <HAL_IncCmdPointer>
		HAL_WriteCmdPointer();
 80028ae:	f000 fdd1 	bl	8003454 <HAL_WriteCmdPointer>

		// If this is the last chunk of the data,
		if (IsLastChunk)
 80028b2:	230f      	movs	r3, #15
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <EVE_LIB_WriteDataToCMD+0xdc>
	while (CurrentIndex < DataSize)
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d3ab      	bcc.n	800281c <EVE_LIB_WriteDataToCMD+0x32>
		{
			break;
		}
	}
}
 80028c4:	e000      	b.n	80028c8 <EVE_LIB_WriteDataToCMD+0xde>
			break;
 80028c6:	46c0      	nop			; (mov r8, r8)
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b007      	add	sp, #28
 80028ce:	bd90      	pop	{r4, r7, pc}

080028d0 <EVE_LIB_SendString>:

// Writes a string over SPI
uint16_t EVE_LIB_SendString(const char* string)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	uint16_t length;
	uint16_t CommandSize;

	// Include the terminating null character in the string length.
	// Pad string length to a multiple of 4.
	length = ((strlen(string) + 1) + 3) & (~3);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fd fc14 	bl	8000108 <strlen>
 80028e0:	0003      	movs	r3, r0
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3304      	adds	r3, #4
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	200e      	movs	r0, #14
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	2103      	movs	r1, #3
 80028ee:	438a      	bics	r2, r1
 80028f0:	801a      	strh	r2, [r3, #0]
	// Store command length to return.
	CommandSize = length;
 80028f2:	230c      	movs	r3, #12
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	183a      	adds	r2, r7, r0
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	801a      	strh	r2, [r3, #0]

	// Send string as 32 bit data.
	while (length)
 80028fc:	e00d      	b.n	800291a <EVE_LIB_SendString+0x4a>
	{
		HAL_Write32(*(uint32_t *)string);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 fc6c 	bl	80031e0 <HAL_Write32>
		string += 4;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3304      	adds	r3, #4
 800290c:	607b      	str	r3, [r7, #4]
		length -= 4;
 800290e:	220e      	movs	r2, #14
 8002910:	18bb      	adds	r3, r7, r2
 8002912:	18ba      	adds	r2, r7, r2
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	3a04      	subs	r2, #4
 8002918:	801a      	strh	r2, [r3, #0]
	while (length)
 800291a:	230e      	movs	r3, #14
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ec      	bne.n	80028fe <EVE_LIB_SendString+0x2e>
	}

	return CommandSize;
 8002924:	230c      	movs	r3, #12
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	881b      	ldrh	r3, [r3, #0]
}
 800292a:	0018      	movs	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	b004      	add	sp, #16
 8002930:	bd80      	pop	{r7, pc}

08002932 <EVE_LIB_GetProps>:

void EVE_LIB_GetProps(uint32_t *addr, uint32_t *width, uint32_t *height)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	60f8      	str	r0, [r7, #12]
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
	uint32_t WritePointer;

	WritePointer = HAL_GetCmdPointer();
 800293e:	f000 fd7f 	bl	8003440 <HAL_GetCmdPointer>
 8002942:	0003      	movs	r3, r0
 8002944:	617b      	str	r3, [r7, #20]
	EVE_LIB_BeginCoProList();
 8002946:	f7ff ff03 	bl	8002750 <EVE_LIB_BeginCoProList>
	// To read the result from CMD_GETPROPS we need to be clever and find out
	// where the CoProcessor is writing the command. We can then retrieve the
	// results from the place where they were written.
	// Send the command to the CoProcessor.
	EVE_CMD_GETPROPS(0, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2000      	movs	r0, #0
 8002950:	f000 f9c8 	bl	8002ce4 <EVE_CMD_GETPROPS>
	// Wait for it to finish.
	EVE_LIB_EndCoProList();
 8002954:	f7ff ff10 	bl	8002778 <EVE_LIB_EndCoProList>
	EVE_LIB_AwaitCoProEmpty();
 8002958:	f7ff ff18 	bl	800278c <EVE_LIB_AwaitCoProEmpty>
	// Obtain the results from the EVE_RAM_CMD in the CoProcessor.
	*addr = HAL_MemRead32(EVE_RAM_CMD + ((WritePointer + (1 * sizeof(uint32_t))) & (EVE_RAM_CMD_SIZE - 1)));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3304      	adds	r3, #4
 8002960:	051b      	lsls	r3, r3, #20
 8002962:	0d1b      	lsrs	r3, r3, #20
 8002964:	22c2      	movs	r2, #194	; 0xc2
 8002966:	0392      	lsls	r2, r2, #14
 8002968:	4694      	mov	ip, r2
 800296a:	4463      	add	r3, ip
 800296c:	0018      	movs	r0, r3
 800296e:	f000 fce4 	bl	800333a <HAL_MemRead32>
 8002972:	0002      	movs	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	601a      	str	r2, [r3, #0]
	*width = HAL_MemRead32(EVE_RAM_CMD + ((WritePointer + (2 * sizeof(uint32_t))) & (EVE_RAM_CMD_SIZE - 1)));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3308      	adds	r3, #8
 800297c:	051b      	lsls	r3, r3, #20
 800297e:	0d1b      	lsrs	r3, r3, #20
 8002980:	22c2      	movs	r2, #194	; 0xc2
 8002982:	0392      	lsls	r2, r2, #14
 8002984:	4694      	mov	ip, r2
 8002986:	4463      	add	r3, ip
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fcd6 	bl	800333a <HAL_MemRead32>
 800298e:	0002      	movs	r2, r0
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	601a      	str	r2, [r3, #0]
	*height = HAL_MemRead32(EVE_RAM_CMD + ((WritePointer + (3 * sizeof(uint32_t))) & (EVE_RAM_CMD_SIZE - 1)));
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	330c      	adds	r3, #12
 8002998:	051b      	lsls	r3, r3, #20
 800299a:	0d1b      	lsrs	r3, r3, #20
 800299c:	22c2      	movs	r2, #194	; 0xc2
 800299e:	0392      	lsls	r2, r2, #14
 80029a0:	4694      	mov	ip, r2
 80029a2:	4463      	add	r3, ip
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 fcc8 	bl	800333a <HAL_MemRead32>
 80029aa:	0002      	movs	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b006      	add	sp, #24
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <EVE_CLEAR_COLOR_RGB>:
	HAL_Write32(c);
	HAL_IncCmdPointer(4);
}

void EVE_CLEAR_COLOR_RGB(uint8_t R, uint8_t G, uint8_t B)
{
 80029b8:	b590      	push	{r4, r7, lr}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	0004      	movs	r4, r0
 80029c0:	0008      	movs	r0, r1
 80029c2:	0011      	movs	r1, r2
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	1c22      	adds	r2, r4, #0
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	1dbb      	adds	r3, r7, #6
 80029cc:	1c02      	adds	r2, r0, #0
 80029ce:	701a      	strb	r2, [r3, #0]
 80029d0:	1d7b      	adds	r3, r7, #5
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CLEAR_COLOR_RGB(R, G, B));
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041a      	lsls	r2, r3, #16
 80029dc:	1dbb      	adds	r3, r7, #6
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	431a      	orrs	r2, r3
 80029e4:	1d7b      	adds	r3, r7, #5
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	2280      	movs	r2, #128	; 0x80
 80029ec:	0492      	lsls	r2, r2, #18
 80029ee:	4313      	orrs	r3, r2
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 fbf5 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 80029f6:	2004      	movs	r0, #4
 80029f8:	f000 fd0a 	bl	8003410 <HAL_IncCmdPointer>
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b003      	add	sp, #12
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <EVE_CLEAR>:
	HAL_Write32(EVE_ENC_CLEAR_COLOR(c));
	HAL_IncCmdPointer(4);
}

void EVE_CLEAR(uint8_t C, uint8_t S, uint8_t T)
{
 8002a04:	b590      	push	{r4, r7, lr}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	0004      	movs	r4, r0
 8002a0c:	0008      	movs	r0, r1
 8002a0e:	0011      	movs	r1, r2
 8002a10:	1dfb      	adds	r3, r7, #7
 8002a12:	1c22      	adds	r2, r4, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	1dbb      	adds	r3, r7, #6
 8002a18:	1c02      	adds	r2, r0, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
 8002a1c:	1d7b      	adds	r3, r7, #5
 8002a1e:	1c0a      	adds	r2, r1, #0
 8002a20:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CLEAR((C & 0x01),(S & 0x01),(T & 0x01)));
 8002a22:	1dfb      	adds	r3, r7, #7
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	2204      	movs	r2, #4
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	1dbb      	adds	r3, r7, #6
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2102      	movs	r1, #2
 8002a34:	400b      	ands	r3, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	1d7b      	adds	r3, r7, #5
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	400b      	ands	r3, r1
 8002a40:	4313      	orrs	r3, r2
 8002a42:	2298      	movs	r2, #152	; 0x98
 8002a44:	0592      	lsls	r2, r2, #22
 8002a46:	4313      	orrs	r3, r2
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fbc9 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002a4e:	2004      	movs	r0, #4
 8002a50:	f000 fcde 	bl	8003410 <HAL_IncCmdPointer>
}
 8002a54:	46c0      	nop			; (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b003      	add	sp, #12
 8002a5a:	bd90      	pop	{r4, r7, pc}

08002a5c <EVE_COLOR_RGB>:

void EVE_COLOR_RGB(uint8_t R, uint8_t G, uint8_t B)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	0004      	movs	r4, r0
 8002a64:	0008      	movs	r0, r1
 8002a66:	0011      	movs	r1, r2
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	1c22      	adds	r2, r4, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
 8002a6e:	1dbb      	adds	r3, r7, #6
 8002a70:	1c02      	adds	r2, r0, #0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	1d7b      	adds	r3, r7, #5
 8002a76:	1c0a      	adds	r2, r1, #0
 8002a78:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_COLOR_RGB(R, G, B));
 8002a7a:	1dfb      	adds	r3, r7, #7
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	041a      	lsls	r2, r3, #16
 8002a80:	1dbb      	adds	r3, r7, #6
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	431a      	orrs	r2, r3
 8002a88:	1d7b      	adds	r3, r7, #5
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	2280      	movs	r2, #128	; 0x80
 8002a90:	04d2      	lsls	r2, r2, #19
 8002a92:	4313      	orrs	r3, r2
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fba3 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002a9a:	2004      	movs	r0, #4
 8002a9c:	f000 fcb8 	bl	8003410 <HAL_IncCmdPointer>
}
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b003      	add	sp, #12
 8002aa6:	bd90      	pop	{r4, r7, pc}

08002aa8 <EVE_VERTEX2II>:
	HAL_Write32(EVE_ENC_VERTEX2F(x, y));
	HAL_IncCmdPointer(4);
}

void EVE_VERTEX2II(uint16_t x, uint16_t y, uint8_t handle, uint8_t cell)
{
 8002aa8:	b5b0      	push	{r4, r5, r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	0005      	movs	r5, r0
 8002ab0:	000c      	movs	r4, r1
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	1dbb      	adds	r3, r7, #6
 8002ab8:	1c2a      	adds	r2, r5, #0
 8002aba:	801a      	strh	r2, [r3, #0]
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	1c22      	adds	r2, r4, #0
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	1cfb      	adds	r3, r7, #3
 8002ac4:	1c02      	adds	r2, r0, #0
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	1cbb      	adds	r3, r7, #2
 8002aca:	1c0a      	adds	r2, r1, #0
 8002acc:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_VERTEX2II(x, y, handle, cell));
 8002ace:	1dbb      	adds	r3, r7, #6
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <EVE_VERTEX2II+0x70>)
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	031b      	lsls	r3, r3, #12
 8002ade:	490f      	ldr	r1, [pc, #60]	; (8002b1c <EVE_VERTEX2II+0x74>)
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	1cfb      	adds	r3, r7, #3
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	01d9      	lsls	r1, r3, #7
 8002aea:	23f8      	movs	r3, #248	; 0xf8
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	400b      	ands	r3, r1
 8002af0:	431a      	orrs	r2, r3
 8002af2:	1cbb      	adds	r3, r7, #2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	217f      	movs	r1, #127	; 0x7f
 8002af8:	400b      	ands	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	2280      	movs	r2, #128	; 0x80
 8002afe:	0612      	lsls	r2, r2, #24
 8002b00:	4313      	orrs	r3, r2
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fb6c 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002b08:	2004      	movs	r0, #4
 8002b0a:	f000 fc81 	bl	8003410 <HAL_IncCmdPointer>
}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b002      	add	sp, #8
 8002b14:	bdb0      	pop	{r4, r5, r7, pc}
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	3fe00000 	.word	0x3fe00000
 8002b1c:	001ff000 	.word	0x001ff000

08002b20 <EVE_BITMAP_HANDLE>:

void EVE_BITMAP_HANDLE(uint8_t handle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	0002      	movs	r2, r0
 8002b28:	1dfb      	adds	r3, r7, #7
 8002b2a:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_HANDLE(handle));
 8002b2c:	1dfb      	adds	r3, r7, #7
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	221f      	movs	r2, #31
 8002b32:	4013      	ands	r3, r2
 8002b34:	22a0      	movs	r2, #160	; 0xa0
 8002b36:	04d2      	lsls	r2, r2, #19
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 fb50 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002b40:	2004      	movs	r0, #4
 8002b42:	f000 fc65 	bl	8003410 <HAL_IncCmdPointer>
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b002      	add	sp, #8
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <EVE_BITMAP_SOURCE>:

void EVE_BITMAP_SOURCE(int32_t addr)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
	HAL_Write32(EVE_ENC_BITMAP_SOURCE((int32_t)addr));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	025b      	lsls	r3, r3, #9
 8002b5a:	0a5b      	lsrs	r3, r3, #9
 8002b5c:	2280      	movs	r2, #128	; 0x80
 8002b5e:	0452      	lsls	r2, r2, #17
 8002b60:	4313      	orrs	r3, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 fb3c 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002b68:	2004      	movs	r0, #4
 8002b6a:	f000 fc51 	bl	8003410 <HAL_IncCmdPointer>
}
 8002b6e:	46c0      	nop			; (mov r8, r8)
 8002b70:	46bd      	mov	sp, r7
 8002b72:	b002      	add	sp, #8
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <EVE_BITMAP_LAYOUT>:
	HAL_IncCmdPointer(4);
}
#endif // (defined EVE3_ENABLE || defined EVE4_ENABLE)

void EVE_BITMAP_LAYOUT(uint8_t format, uint16_t linestride, uint16_t height )
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	0004      	movs	r4, r0
 8002b80:	0008      	movs	r0, r1
 8002b82:	0011      	movs	r1, r2
 8002b84:	1dfb      	adds	r3, r7, #7
 8002b86:	1c22      	adds	r2, r4, #0
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	1c02      	adds	r2, r0, #0
 8002b8e:	801a      	strh	r2, [r3, #0]
 8002b90:	1cbb      	adds	r3, r7, #2
 8002b92:	1c0a      	adds	r2, r1, #0
 8002b94:	801a      	strh	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_LAYOUT(format, linestride, height));
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	04da      	lsls	r2, r3, #19
 8002b9c:	23f8      	movs	r3, #248	; 0xf8
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	401a      	ands	r2, r3
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	025b      	lsls	r3, r3, #9
 8002ba8:	490a      	ldr	r1, [pc, #40]	; (8002bd4 <EVE_BITMAP_LAYOUT+0x5c>)
 8002baa:	400b      	ands	r3, r1
 8002bac:	431a      	orrs	r2, r3
 8002bae:	1cbb      	adds	r3, r7, #2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	05db      	lsls	r3, r3, #23
 8002bb4:	0ddb      	lsrs	r3, r3, #23
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	22e0      	movs	r2, #224	; 0xe0
 8002bba:	04d2      	lsls	r2, r2, #19
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fb0e 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002bc4:	2004      	movs	r0, #4
 8002bc6:	f000 fc23 	bl	8003410 <HAL_IncCmdPointer>
}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b003      	add	sp, #12
 8002bd0:	bd90      	pop	{r4, r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	0007fe00 	.word	0x0007fe00

08002bd8 <EVE_BITMAP_SIZE>:

void EVE_BITMAP_SIZE(uint8_t filter, uint8_t wrapx, uint8_t wrapy, uint16_t width, uint16_t height)
{
 8002bd8:	b5b0      	push	{r4, r5, r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	0005      	movs	r5, r0
 8002be0:	000c      	movs	r4, r1
 8002be2:	0010      	movs	r0, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	1c2a      	adds	r2, r5, #0
 8002bea:	701a      	strb	r2, [r3, #0]
 8002bec:	1dbb      	adds	r3, r7, #6
 8002bee:	1c22      	adds	r2, r4, #0
 8002bf0:	701a      	strb	r2, [r3, #0]
 8002bf2:	1d7b      	adds	r3, r7, #5
 8002bf4:	1c02      	adds	r2, r0, #0
 8002bf6:	701a      	strb	r2, [r3, #0]
 8002bf8:	1cbb      	adds	r3, r7, #2
 8002bfa:	1c0a      	adds	r2, r1, #0
 8002bfc:	801a      	strh	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_SIZE(filter, wrapx, wrapy, width, height));
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	051a      	lsls	r2, r3, #20
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	035b      	lsls	r3, r3, #13
 8002c08:	401a      	ands	r2, r3
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	04d9      	lsls	r1, r3, #19
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	031b      	lsls	r3, r3, #12
 8002c14:	400b      	ands	r3, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	1d7b      	adds	r3, r7, #5
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	0499      	lsls	r1, r3, #18
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	02db      	lsls	r3, r3, #11
 8002c22:	400b      	ands	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	1cbb      	adds	r3, r7, #2
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	025b      	lsls	r3, r3, #9
 8002c2c:	490a      	ldr	r1, [pc, #40]	; (8002c58 <EVE_BITMAP_SIZE+0x80>)
 8002c2e:	400b      	ands	r3, r1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	2318      	movs	r3, #24
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	0ddb      	lsrs	r3, r3, #23
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	0512      	lsls	r2, r2, #20
 8002c42:	4313      	orrs	r3, r2
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 facb 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002c4a:	2004      	movs	r0, #4
 8002c4c:	f000 fbe0 	bl	8003410 <HAL_IncCmdPointer>
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bdb0      	pop	{r4, r5, r7, pc}
 8002c58:	0003fe00 	.word	0x0003fe00

08002c5c <EVE_TAG>:
	HAL_Write32(EVE_ENC_CELL(cell));
	HAL_IncCmdPointer(4);
}

void EVE_TAG(uint8_t s)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	0002      	movs	r2, r0
 8002c64:	1dfb      	adds	r3, r7, #7
 8002c66:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_TAG(s));
 8002c68:	1dfb      	adds	r3, r7, #7
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	22c0      	movs	r2, #192	; 0xc0
 8002c6e:	0492      	lsls	r2, r2, #18
 8002c70:	4313      	orrs	r3, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fab4 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002c78:	2004      	movs	r0, #4
 8002c7a:	f000 fbc9 	bl	8003410 <HAL_IncCmdPointer>
}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b002      	add	sp, #8
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <EVE_BEGIN>:
	HAL_Write32(EVE_ENC_JUMP(dest));
	HAL_IncCmdPointer(4);
}

void EVE_BEGIN(uint8_t prim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BEGIN(prim));
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	220f      	movs	r2, #15
 8002c98:	4013      	ands	r3, r2
 8002c9a:	22f8      	movs	r2, #248	; 0xf8
 8002c9c:	0552      	lsls	r2, r2, #21
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fa9d 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f000 fbb2 	bl	8003410 <HAL_IncCmdPointer>
}
 8002cac:	46c0      	nop			; (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <EVE_END>:
	HAL_Write32(EVE_ENC_COLOR_MASK(r, g, b, a));
	HAL_IncCmdPointer(4);
}

void EVE_END(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_END());
 8002cb8:	2384      	movs	r3, #132	; 0x84
 8002cba:	059b      	lsls	r3, r3, #22
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fa8f 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002cc2:	2004      	movs	r0, #4
 8002cc4:	f000 fba4 	bl	8003410 <HAL_IncCmdPointer>
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <EVE_DISPLAY>:
	HAL_Write32(EVE_ENC_MACRO(m));
	HAL_IncCmdPointer(4);
}

void EVE_DISPLAY(void)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_DISPLAY());
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	f000 fa84 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002cd8:	2004      	movs	r0, #4
 8002cda:	f000 fb99 	bl	8003410 <HAL_IncCmdPointer>
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <EVE_CMD_GETPROPS>:
	HAL_Write32(result);
	HAL_IncCmdPointer(12);
}

void EVE_CMD_GETPROPS(uint32_t ptr, uint32_t w, uint32_t h)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	HAL_Write32(EVE_ENC_CMD_GETPROPS);
 8002cf0:	23db      	movs	r3, #219	; 0xdb
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 fa73 	bl	80031e0 <HAL_Write32>
	HAL_Write32(ptr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f000 fa6f 	bl	80031e0 <HAL_Write32>
	HAL_Write32(w);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 fa6b 	bl	80031e0 <HAL_Write32>
	HAL_Write32(h);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f000 fa67 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(16);
 8002d12:	2010      	movs	r0, #16
 8002d14:	f000 fb7c 	bl	8003410 <HAL_IncCmdPointer>
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b004      	add	sp, #16
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <EVE_CMD_SWAP>:
	HAL_Write32(c);
	HAL_IncCmdPointer(8);
}

void EVE_CMD_SWAP(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_CMD_SWAP);
 8002d24:	23ff      	movs	r3, #255	; 0xff
 8002d26:	425b      	negs	r3, r3
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fa59 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002d2e:	2004      	movs	r0, #4
 8002d30:	f000 fb6e 	bl	8003410 <HAL_IncCmdPointer>
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <EVE_CMD_CALIBRATE>:
	HAL_Write32(result);
	HAL_IncCmdPointer(56);
}

void EVE_CMD_CALIBRATE(uint32_t result)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
	HAL_Write32(EVE_ENC_CMD_CALIBRATE);
 8002d42:	23eb      	movs	r3, #235	; 0xeb
 8002d44:	425b      	negs	r3, r3
 8002d46:	0018      	movs	r0, r3
 8002d48:	f000 fa4a 	bl	80031e0 <HAL_Write32>
	HAL_Write32(result);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f000 fa46 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(8);
 8002d54:	2008      	movs	r0, #8
 8002d56:	f000 fb5b 	bl	8003410 <HAL_IncCmdPointer>
}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <EVE_CMD_SETFONT>:

void EVE_CMD_SETFONT(uint32_t font, uint32_t ptr)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	6039      	str	r1, [r7, #0]
	HAL_Write32(EVE_ENC_CMD_SETFONT);
 8002d6c:	23d5      	movs	r3, #213	; 0xd5
 8002d6e:	425b      	negs	r3, r3
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fa35 	bl	80031e0 <HAL_Write32>
	HAL_Write32(font);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fa31 	bl	80031e0 <HAL_Write32>
	HAL_Write32(ptr);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 fa2d 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(12);
 8002d86:	200c      	movs	r0, #12
 8002d88:	f000 fb42 	bl	8003410 <HAL_IncCmdPointer>
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <EVE_CMD_LOADIMAGE>:
	HAL_Write32(val);
	HAL_IncCmdPointer(16);
}

void EVE_CMD_LOADIMAGE(uint32_t ptr, uint32_t options)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
	HAL_Write32(EVE_ENC_CMD_LOADIMAGE);
 8002d9e:	23dc      	movs	r3, #220	; 0xdc
 8002da0:	425b      	negs	r3, r3
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 fa1c 	bl	80031e0 <HAL_Write32>
	HAL_Write32(ptr);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 fa18 	bl	80031e0 <HAL_Write32>
	HAL_Write32(options);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	0018      	movs	r0, r3
 8002db4:	f000 fa14 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(12);
 8002db8:	200c      	movs	r0, #12
 8002dba:	f000 fb29 	bl	8003410 <HAL_IncCmdPointer>
}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <EVE_CMD_DLSTART>:

void EVE_CMD_DLSTART(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	HAL_Write32(EVE_ENC_CMD_DLSTART);
 8002dcc:	4b04      	ldr	r3, [pc, #16]	; (8002de0 <EVE_CMD_DLSTART+0x18>)
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 fa06 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002dd4:	2004      	movs	r0, #4
 8002dd6:	f000 fb1b 	bl	8003410 <HAL_IncCmdPointer>
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	ffffff00 	.word	0xffffff00

08002de4 <COUNT_ARGS>:
}



uint8_t COUNT_ARGS(const char* string)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	uint8_t count = 0;
 8002dec:	230f      	movs	r3, #15
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
	const char *tmp = string;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	60bb      	str	r3, [r7, #8]

	while ((tmp = strstr(tmp, "%")))
 8002df8:	e011      	b.n	8002e1e <COUNT_ARGS+0x3a>
	{
		if (*(tmp + 1) == '%') {
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b25      	cmp	r3, #37	; 0x25
 8002e02:	d103      	bne.n	8002e0c <COUNT_ARGS+0x28>
			tmp += 2;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3302      	adds	r3, #2
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	e008      	b.n	8002e1e <COUNT_ARGS+0x3a>
		}
		else {
			count++;
 8002e0c:	210f      	movs	r1, #15
 8002e0e:	187b      	adds	r3, r7, r1
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	3201      	adds	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
			tmp++;
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60bb      	str	r3, [r7, #8]
	while ((tmp = strstr(tmp, "%")))
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2125      	movs	r1, #37	; 0x25
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fba0 	bl	8003568 <strchr>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e3      	bne.n	8002dfa <COUNT_ARGS+0x16>
		}
	}
	return count;
 8002e32:	230f      	movs	r3, #15
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
}
 8002e38:	0018      	movs	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b004      	add	sp, #16
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <EVE_CMD_TEXT>:


void EVE_CMD_TEXT(int16_t x, int16_t y, int16_t font, uint16_t options, const char* string, ...)
{
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	0005      	movs	r5, r0
 8002e48:	000c      	movs	r4, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	1dbb      	adds	r3, r7, #6
 8002e50:	1c2a      	adds	r2, r5, #0
 8002e52:	801a      	strh	r2, [r3, #0]
 8002e54:	1d3b      	adds	r3, r7, #4
 8002e56:	1c22      	adds	r2, r4, #0
 8002e58:	801a      	strh	r2, [r3, #0]
 8002e5a:	1cbb      	adds	r3, r7, #2
 8002e5c:	1c02      	adds	r2, r0, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
 8002e60:	003b      	movs	r3, r7
 8002e62:	1c0a      	adds	r2, r1, #0
 8002e64:	801a      	strh	r2, [r3, #0]
	va_list args;
	uint32_t CommandSize;
	uint32_t StringLength;
	uint8_t i, num=0;
 8002e66:	2316      	movs	r3, #22
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]

	va_start(args, string);
 8002e6e:	232c      	movs	r3, #44	; 0x2c
 8002e70:	18fb      	adds	r3, r7, r3
 8002e72:	60bb      	str	r3, [r7, #8]

	#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	//#if defined (BT81X_ENABLE) /* OPT_FORMAT not defined in FT8xx chip */
	num = (options & EVE_OPT_FORMAT) ? (COUNT_ARGS(string)) : (0); //Only check % characters if option OPT_FORMAT is set
 8002e74:	003b      	movs	r3, r7
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d006      	beq.n	8002e8e <EVE_CMD_TEXT+0x4e>
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	0018      	movs	r0, r3
 8002e84:	f7ff ffae 	bl	8002de4 <COUNT_ARGS>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	e000      	b.n	8002e90 <EVE_CMD_TEXT+0x50>
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2316      	movs	r3, #22
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	701a      	strb	r2, [r3, #0]
	#endif

	HAL_Write32(EVE_ENC_CMD_TEXT);
 8002e96:	23f4      	movs	r3, #244	; 0xf4
 8002e98:	425b      	negs	r3, r3
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f000 f9a0 	bl	80031e0 <HAL_Write32>
	HAL_Write32(((uint32_t)y << 16) | (x & 0xffff));
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	5e9b      	ldrsh	r3, [r3, r2]
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	1dbb      	adds	r3, r7, #6
 8002eaa:	2100      	movs	r1, #0
 8002eac:	5e5b      	ldrsh	r3, [r3, r1]
 8002eae:	041b      	lsls	r3, r3, #16
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f993 	bl	80031e0 <HAL_Write32>
	HAL_Write32(((uint32_t)options << 16) | (font & 0xffff));
 8002eba:	003b      	movs	r3, r7
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	041a      	lsls	r2, r3, #16
 8002ec0:	1cbb      	adds	r3, r7, #2
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	5e5b      	ldrsh	r3, [r3, r1]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	0c1b      	lsrs	r3, r3, #16
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f000 f987 	bl	80031e0 <HAL_Write32>
	CommandSize = 12;
 8002ed2:	230c      	movs	r3, #12
 8002ed4:	613b      	str	r3, [r7, #16]

	StringLength = EVE_LIB_SendString(string);
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff fcf9 	bl	80028d0 <EVE_LIB_SendString>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < num; i++)
 8002ee2:	2317      	movs	r3, #23
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
 8002eea:	e00c      	b.n	8002f06 <EVE_CMD_TEXT+0xc6>
	{
		HAL_Write32((uint32_t)va_arg(args, uint32_t));
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	1d1a      	adds	r2, r3, #4
 8002ef0:	60ba      	str	r2, [r7, #8]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f973 	bl	80031e0 <HAL_Write32>
	for (i = 0; i < num; i++)
 8002efa:	2117      	movs	r1, #23
 8002efc:	187b      	adds	r3, r7, r1
 8002efe:	781a      	ldrb	r2, [r3, #0]
 8002f00:	187b      	adds	r3, r7, r1
 8002f02:	3201      	adds	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	2317      	movs	r3, #23
 8002f08:	18fa      	adds	r2, r7, r3
 8002f0a:	2116      	movs	r1, #22
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d3ea      	bcc.n	8002eec <EVE_CMD_TEXT+0xac>
	}

	CommandSize = CommandSize + StringLength + (num*4);
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	187a      	adds	r2, r7, r1
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	0092      	lsls	r2, r2, #2
 8002f22:	189b      	adds	r3, r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
//	Gpu_CoCmd_EndFunc(phost, CMD_SIZE * (3+ num) + ((len + 1 + 3) & ~3));

	HAL_IncCmdPointer(CommandSize);
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f000 fa70 	bl	8003410 <HAL_IncCmdPointer>

	va_end(args);
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b006      	add	sp, #24
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}

08002f38 <EVE_BITMAP_LAYOUT_H>:
	HAL_Write32(EVE_ENC_VERTEX_FORMAT(frac));
	HAL_IncCmdPointer(4);
}

void EVE_BITMAP_LAYOUT_H(uint8_t linestride, uint8_t height)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	0002      	movs	r2, r0
 8002f40:	1dfb      	adds	r3, r7, #7
 8002f42:	701a      	strb	r2, [r3, #0]
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	1c0a      	adds	r2, r1, #0
 8002f48:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_LAYOUT_H(linestride, height));
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	220c      	movs	r2, #12
 8002f52:	401a      	ands	r2, r3
 8002f54:	1dbb      	adds	r3, r7, #6
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2103      	movs	r1, #3
 8002f5a:	400b      	ands	r3, r1
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	22a0      	movs	r2, #160	; 0xa0
 8002f60:	0592      	lsls	r2, r2, #22
 8002f62:	4313      	orrs	r3, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 f93b 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002f6a:	2004      	movs	r0, #4
 8002f6c:	f000 fa50 	bl	8003410 <HAL_IncCmdPointer>
}
 8002f70:	46c0      	nop			; (mov r8, r8)
 8002f72:	46bd      	mov	sp, r7
 8002f74:	b002      	add	sp, #8
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <EVE_BITMAP_SIZE_H>:

void EVE_BITMAP_SIZE_H(uint8_t width, uint8_t height)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	0002      	movs	r2, r0
 8002f80:	1dfb      	adds	r3, r7, #7
 8002f82:	701a      	strb	r2, [r3, #0]
 8002f84:	1dbb      	adds	r3, r7, #6
 8002f86:	1c0a      	adds	r2, r1, #0
 8002f88:	701a      	strb	r2, [r3, #0]
	HAL_Write32(EVE_ENC_BITMAP_SIZE_H(width, height));
 8002f8a:	1dfb      	adds	r3, r7, #7
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	220c      	movs	r2, #12
 8002f92:	401a      	ands	r2, r3
 8002f94:	1dbb      	adds	r3, r7, #6
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2103      	movs	r1, #3
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	22a4      	movs	r2, #164	; 0xa4
 8002fa0:	0592      	lsls	r2, r2, #22
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f000 f91b 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002faa:	2004      	movs	r0, #4
 8002fac:	f000 fa30 	bl	8003410 <HAL_IncCmdPointer>
}
 8002fb0:	46c0      	nop			; (mov r8, r8)
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	b002      	add	sp, #8
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <EVE_VERTEX_TRANSLATE_X>:
	HAL_Write32(EVE_ENC_PALETTE_SOURCE(addr));
	HAL_IncCmdPointer(4);
}

void EVE_VERTEX_TRANSLATE_X(uint32_t x)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
	HAL_Write32(EVE_ENC_VERTEX_TRANSLATE_X(x));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	03db      	lsls	r3, r3, #15
 8002fc4:	0bdb      	lsrs	r3, r3, #15
 8002fc6:	22ac      	movs	r2, #172	; 0xac
 8002fc8:	0592      	lsls	r2, r2, #22
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f000 f907 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002fd2:	2004      	movs	r0, #4
 8002fd4:	f000 fa1c 	bl	8003410 <HAL_IncCmdPointer>
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <EVE_VERTEX_TRANSLATE_Y>:

void EVE_VERTEX_TRANSLATE_Y(uint32_t y)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	HAL_Write32(EVE_ENC_VERTEX_TRANSLATE_Y(y));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	03db      	lsls	r3, r3, #15
 8002fec:	0bdb      	lsrs	r3, r3, #15
 8002fee:	22b0      	movs	r2, #176	; 0xb0
 8002ff0:	0592      	lsls	r2, r2, #22
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f000 f8f3 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(4);
 8002ffa:	2004      	movs	r0, #4
 8002ffc:	f000 fa08 	bl	8003410 <HAL_IncCmdPointer>
}
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <EVE_CMD_SETBITMAP>:
	HAL_Write32(eve_base);
	HAL_IncCmdPointer(8);
}

void EVE_CMD_SETBITMAP(uint32_t source, uint16_t fmt, uint16_t w, uint16_t h)
{
 8003008:	b5b0      	push	{r4, r5, r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	000c      	movs	r4, r1
 8003012:	0010      	movs	r0, r2
 8003014:	0019      	movs	r1, r3
 8003016:	250a      	movs	r5, #10
 8003018:	197b      	adds	r3, r7, r5
 800301a:	1c22      	adds	r2, r4, #0
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	2408      	movs	r4, #8
 8003020:	193b      	adds	r3, r7, r4
 8003022:	1c02      	adds	r2, r0, #0
 8003024:	801a      	strh	r2, [r3, #0]
 8003026:	1dbb      	adds	r3, r7, #6
 8003028:	1c0a      	adds	r2, r1, #0
 800302a:	801a      	strh	r2, [r3, #0]
	HAL_Write32(EVE_ENC_CMD_SETBITMAP);
 800302c:	23bd      	movs	r3, #189	; 0xbd
 800302e:	425b      	negs	r3, r3
 8003030:	0018      	movs	r0, r3
 8003032:	f000 f8d5 	bl	80031e0 <HAL_Write32>
	HAL_Write32(source);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0018      	movs	r0, r3
 800303a:	f000 f8d1 	bl	80031e0 <HAL_Write32>
	HAL_Write32(((uint32_t)w << 16) | (fmt & 0xffff));
 800303e:	193b      	adds	r3, r7, r4
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	041a      	lsls	r2, r3, #16
 8003044:	197b      	adds	r3, r7, r5
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	4313      	orrs	r3, r2
 800304a:	0018      	movs	r0, r3
 800304c:	f000 f8c8 	bl	80031e0 <HAL_Write32>
	HAL_Write32(h);
 8003050:	1dbb      	adds	r3, r7, #6
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 f8c3 	bl	80031e0 <HAL_Write32>
	HAL_IncCmdPointer(16);
 800305a:	2010      	movs	r0, #16
 800305c:	f000 f9d8 	bl	8003410 <HAL_IncCmdPointer>
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bdb0      	pop	{r4, r5, r7, pc}

08003068 <HAL_EVE_Init>:
// Used to navigate command ring buffer
static uint16_t writeCmdPointer = 0x0000;


void HAL_EVE_Init(void)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
	uint8_t val;

	MCU_Init();
 800306e:	f7fe ff4b 	bl	8001f08 <MCU_Init>

	// Set Chip Select OFF
	HAL_ChipSelect(0);
 8003072:	2000      	movs	r0, #0
 8003074:	f000 f858 	bl	8003128 <HAL_ChipSelect>

	// Reset the display
	MCU_Delay_20ms();
 8003078:	f7ff f93d 	bl	80022f6 <MCU_Delay_20ms>
	HAL_PowerDown(1);
 800307c:	2001      	movs	r0, #1
 800307e:	f000 f867 	bl	8003150 <HAL_PowerDown>
	MCU_Delay_20ms();
 8003082:	f7ff f938 	bl	80022f6 <MCU_Delay_20ms>
	HAL_PowerDown(0);
 8003086:	2000      	movs	r0, #0
 8003088:	f000 f862 	bl	8003150 <HAL_PowerDown>
	MCU_Delay_20ms();
 800308c:	f7ff f933 	bl	80022f6 <MCU_Delay_20ms>
#endif

#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	// can optionally set to 72MHz system clock here
	// In this case also adjust REG_FREQUENCY a few lines down from here in this file
	HAL_HostCmdWrite(0x44, 0x00); // 0x44 = HostCMD_CLKEXT
 8003090:	2100      	movs	r1, #0
 8003092:	2044      	movs	r0, #68	; 0x44
 8003094:	f000 f99c 	bl	80033d0 <HAL_HostCmdWrite>
	HAL_HostCmdWrite(0x61, 0x46);
 8003098:	2146      	movs	r1, #70	; 0x46
 800309a:	2061      	movs	r0, #97	; 0x61
 800309c:	f000 f998 	bl	80033d0 <HAL_HostCmdWrite>
#endif

#if defined (EVE2_ENABLE) || defined (EVE3_ENABLE)|| defined (EVE4_ENABLE)
	HAL_HostCmdWrite(0x68, 0x00); // Reset
 80030a0:	2100      	movs	r1, #0
 80030a2:	2068      	movs	r0, #104	; 0x68
 80030a4:	f000 f994 	bl	80033d0 <HAL_HostCmdWrite>
#endif

	// Set active
	HAL_HostCmdWrite(0, 0x00);
 80030a8:	2100      	movs	r1, #0
 80030aa:	2000      	movs	r0, #0
 80030ac:	f000 f990 	bl	80033d0 <HAL_HostCmdWrite>
	
//	MCU_Delay_500ms();		// Optional delay can be commented so long as we check the REG_ID and REG_CPURESET

	// Read REG_ID register (0x302000) until reads 0x7C
	while ((val = HAL_MemRead8(EVE_REG_ID)) != 0x7C)
 80030b0:	46c0      	nop			; (mov r8, r8)
 80030b2:	1dfc      	adds	r4, r7, #7
 80030b4:	4b17      	ldr	r3, [pc, #92]	; (8003114 <HAL_EVE_Init+0xac>)
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f970 	bl	800339c <HAL_MemRead8>
 80030bc:	0003      	movs	r3, r0
 80030be:	7023      	strb	r3, [r4, #0]
 80030c0:	1dfb      	adds	r3, r7, #7
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b7c      	cmp	r3, #124	; 0x7c
 80030c6:	d1f4      	bne.n	80030b2 <HAL_EVE_Init+0x4a>
	{
	}

	// Ensure CPUreset register reads 0 and so FT8xx is ready
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 80030c8:	46c0      	nop			; (mov r8, r8)
 80030ca:	4b13      	ldr	r3, [pc, #76]	; (8003118 <HAL_EVE_Init+0xb0>)
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 f965 	bl	800339c <HAL_MemRead8>
 80030d2:	1e03      	subs	r3, r0, #0
 80030d4:	d1f9      	bne.n	80030ca <HAL_EVE_Init+0x62>
	}




	HAL_MemWrite8(EVE_REG_CPURESET, 0x00);
 80030d6:	4b10      	ldr	r3, [pc, #64]	; (8003118 <HAL_EVE_Init+0xb0>)
 80030d8:	2100      	movs	r1, #0
 80030da:	0018      	movs	r0, r3
 80030dc:	f000 f913 	bl	8003306 <HAL_MemWrite8>
	HAL_MemWrite16(EVE_REG_TOUCH_CONFIG, 0x05D0); //Setting for Goodix touch controller
 80030e0:	23ba      	movs	r3, #186	; 0xba
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4a0d      	ldr	r2, [pc, #52]	; (800311c <HAL_EVE_Init+0xb4>)
 80030e6:	0019      	movs	r1, r3
 80030e8:	0010      	movs	r0, r2
 80030ea:	f000 f8f2 	bl	80032d2 <HAL_MemWrite16>
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 80030ee:	e005      	b.n	80030fc <HAL_EVE_Init+0x94>




#if defined (EVE3_ENABLE) || defined (EVE4_ENABLE)
	HAL_MemWrite32(EVE_REG_FREQUENCY, 72000000);
 80030f0:	4a0b      	ldr	r2, [pc, #44]	; (8003120 <HAL_EVE_Init+0xb8>)
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <HAL_EVE_Init+0xbc>)
 80030f4:	0011      	movs	r1, r2
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f8d4 	bl	80032a4 <HAL_MemWrite32>
	while (HAL_MemRead8(EVE_REG_CPURESET) != 0x00)
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <HAL_EVE_Init+0xb0>)
 80030fe:	0018      	movs	r0, r3
 8003100:	f000 f94c 	bl	800339c <HAL_MemRead8>
 8003104:	1e03      	subs	r3, r0, #0
 8003106:	d1f3      	bne.n	80030f0 <HAL_EVE_Init+0x88>
#endif

	// This function will not return unless an EVE device is present.
	MCU_Setup();
 8003108:	f7fe fff6 	bl	80020f8 <MCU_Setup>
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b003      	add	sp, #12
 8003112:	bd90      	pop	{r4, r7, pc}
 8003114:	00302000 	.word	0x00302000
 8003118:	00302020 	.word	0x00302020
 800311c:	00302168 	.word	0x00302168
 8003120:	044aa200 	.word	0x044aa200
 8003124:	0030200c 	.word	0x0030200c

08003128 <HAL_ChipSelect>:

// --------------------- Chip Select line ----------------------------------
void HAL_ChipSelect(int8_t enable)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	0002      	movs	r2, r0
 8003130:	1dfb      	adds	r3, r7, #7
 8003132:	701a      	strb	r2, [r3, #0]
	if (enable)
 8003134:	1dfb      	adds	r3, r7, #7
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b25b      	sxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d002      	beq.n	8003144 <HAL_ChipSelect+0x1c>
		MCU_CSlow();
 800313e:	f7fe ffe1 	bl	8002104 <MCU_CSlow>
	else
		MCU_CShigh();
}
 8003142:	e001      	b.n	8003148 <HAL_ChipSelect+0x20>
		MCU_CShigh();
 8003144:	f7fe ffec 	bl	8002120 <MCU_CShigh>
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b002      	add	sp, #8
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PowerDown>:

// -------------------------- Power Down line --------------------------------------
void HAL_PowerDown(int8_t enable)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	0002      	movs	r2, r0
 8003158:	1dfb      	adds	r3, r7, #7
 800315a:	701a      	strb	r2, [r3, #0]
	if (enable)
 800315c:	1dfb      	adds	r3, r7, #7
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	b25b      	sxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_PowerDown+0x1c>
		MCU_PDlow();
 8003166:	f7fe ffe9 	bl	800213c <MCU_PDlow>
	else
		MCU_PDhigh();
}
 800316a:	e001      	b.n	8003170 <HAL_PowerDown+0x20>
		MCU_PDhigh();
 800316c:	f7fe fff4 	bl	8002158 <MCU_PDhigh>
}
 8003170:	46c0      	nop			; (mov r8, r8)
 8003172:	46bd      	mov	sp, r7
 8003174:	b002      	add	sp, #8
 8003176:	bd80      	pop	{r7, pc}

08003178 <HAL_SetWriteAddress>:

// ------------------ Send FT81x register address for writing ------------------
void HAL_SetWriteAddress(uint32_t address)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
	// Send three bytes of a register address which has to be subsequently
	// written. Ignore return values as this is an SPI write only.
	// Send high byte of address with 'write' bits set.
	MCU_SPIWrite24(MCU_htobe32((address << 8) | (1UL << 31)));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	0612      	lsls	r2, r2, #24
 8003188:	4313      	orrs	r3, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff f94a 	bl	8002424 <MCU_htobe32>
 8003190:	0003      	movs	r3, r0
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff f8f9 	bl	800238a <MCU_SPIWrite24>
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_SetReadAddress>:

// ------------------ Send FT81x register address for reading ------------------
void HAL_SetReadAddress(uint32_t address)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
	// Send three bytes of a register address which has to be subsequently read.
	// Ignore return values as this is an SPI write only.
	// Send high byte of address with 'read' bits set.
	MCU_SPIWrite32(MCU_htobe32((address << 8) | (0UL << 31)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	021b      	lsls	r3, r3, #8
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7ff f939 	bl	8002424 <MCU_htobe32>
 80031b2:	0003      	movs	r3, r0
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff f903 	bl	80023c0 <MCU_SPIWrite32>
}
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	46bd      	mov	sp, r7
 80031be:	b002      	add	sp, #8
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_Write>:

// ------------------------ Send a block of data --------------------------
void HAL_Write(const uint8_t *buffer, uint32_t length)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
	// Send multiple bytes of data after previously sending address. Ignore return
	// values as this is an SPI write only. Data must be the correct endianess
	// for the SPI bus.
	MCU_SPIWrite(buffer, length);
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7ff f900 	bl	80023d8 <MCU_SPIWrite>
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}

080031e0 <HAL_Write32>:

// ------------------------ Send a 32-bit data value --------------------------
void HAL_Write32(uint32_t val32)
{    
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	// Send four bytes of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite32(MCU_htole32(val32));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f7ff f939 	bl	8002462 <MCU_htole32>
 80031f0:	0003      	movs	r3, r0
 80031f2:	0018      	movs	r0, r3
 80031f4:	f7ff f8e4 	bl	80023c0 <MCU_SPIWrite32>
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	b002      	add	sp, #8
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_Write16>:

// ------------------------ Send a 16-bit data value --------------------------
void HAL_Write16(uint16_t val16)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
 8003206:	0002      	movs	r2, r0
 8003208:	1dbb      	adds	r3, r7, #6
 800320a:	801a      	strh	r2, [r3, #0]
	// Send two bytes of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite16(MCU_htole16(val16));
 800320c:	1dbb      	adds	r3, r7, #6
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff f910 	bl	8002436 <MCU_htole16>
 8003216:	0003      	movs	r3, r0
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff f8a7 	bl	800236c <MCU_SPIWrite16>
}
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b002      	add	sp, #8
 8003224:	bd80      	pop	{r7, pc}

08003226 <HAL_Write8>:

// ------------------------ Send an 8-bit data value ---------------------------
void HAL_Write8(uint8_t val8)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	0002      	movs	r2, r0
 800322e:	1dfb      	adds	r3, r7, #7
 8003230:	701a      	strb	r2, [r3, #0]
	// Send one byte of data after previously sending address. Ignore return
	// values as this is an SPI write only.
	MCU_SPIWrite8(val8);
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff f877 	bl	800232a <MCU_SPIWrite8>
}
 800323c:	46c0      	nop			; (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	b002      	add	sp, #8
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_Read32>:

// ------------------------ Read a 32-bit data value --------------------------
uint32_t HAL_Read32(void)
{    
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	// Read 4 bytes from a register has been previously addressed. Send dummy
	// 00 bytes as only the incoming value is important.
	uint32_t val32;

	// Read low byte of data first.
	val32 = MCU_SPIRead32();
 800324a:	f7ff f8aa 	bl	80023a2 <MCU_SPIRead32>
 800324e:	0003      	movs	r3, r0
 8003250:	607b      	str	r3, [r7, #4]

	// Return combined 32-bit value
	return MCU_le32toh(val32);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff f948 	bl	80024ea <MCU_le32toh>
 800325a:	0003      	movs	r3, r0
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b002      	add	sp, #8
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_Read16>:

// ------------------------ Read a 16-bit data value ---------------------------
uint16_t HAL_Read16(void)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
	// Read 2 bytes from a register has been previously addressed. Send dummy
	// 00 bytes as only the incoming value is important.
	uint16_t val16;

	// Read low byte of data first.
	val16 = MCU_SPIRead16();
 800326a:	1dbc      	adds	r4, r7, #6
 800326c:	f7ff f86c 	bl	8002348 <MCU_SPIRead16>
 8003270:	0003      	movs	r3, r0
 8003272:	8023      	strh	r3, [r4, #0]

	// Return combined 16-bit value
	return MCU_le16toh(val16);
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff f920 	bl	80024be <MCU_le16toh>
 800327e:	0003      	movs	r3, r0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b003      	add	sp, #12
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <HAL_Read8>:

// ------------------------ Read an 8-bit data value ---------------------------
uint8_t HAL_Read8(void)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
	// Read 1 byte from a register has been previously addressed. Send dummy
	// 00 byte as only the incoming value is important.
	uint8_t val8;

	val8 = MCU_SPIRead8();
 800328e:	1dfc      	adds	r4, r7, #7
 8003290:	f7ff f839 	bl	8002306 <MCU_SPIRead8>
 8003294:	0003      	movs	r3, r0
 8003296:	7023      	strb	r3, [r4, #0]

	// Return 8-bit value read
	return val8;
 8003298:	1dfb      	adds	r3, r7, #7
 800329a:	781b      	ldrb	r3, [r3, #0]
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b003      	add	sp, #12
 80032a2:	bd90      	pop	{r4, r7, pc}

080032a4 <HAL_MemWrite32>:
// including chip select, address, and data transfer.
// This would often be used for register writes and reads. 

// -------------- Write a 32-bit value to specified address --------------------
void HAL_MemWrite32(uint32_t address, uint32_t val32)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 80032ae:	2001      	movs	r0, #1
 80032b0:	f7ff ff3a 	bl	8003128 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7ff ff5e 	bl	8003178 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write32(val32);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	0018      	movs	r0, r3
 80032c0:	f7ff ff8e 	bl	80031e0 <HAL_Write32>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 80032c4:	2000      	movs	r0, #0
 80032c6:	f7ff ff2f 	bl	8003128 <HAL_ChipSelect>
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_MemWrite16>:

// -------------- Write a 16-bit value to specified address --------------------
void HAL_MemWrite16(uint32_t address, uint16_t val16)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	000a      	movs	r2, r1
 80032dc:	1cbb      	adds	r3, r7, #2
 80032de:	801a      	strh	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7ff ff21 	bl	8003128 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff ff45 	bl	8003178 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write16(val16);
 80032ee:	1cbb      	adds	r3, r7, #2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff ff84 	bl	8003200 <HAL_Write16>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 80032f8:	2000      	movs	r0, #0
 80032fa:	f7ff ff15 	bl	8003128 <HAL_ChipSelect>
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_MemWrite8>:

// -------------- Write an 8-bit value to specified address --------------------
void HAL_MemWrite8(uint32_t address, uint8_t val8)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	000a      	movs	r2, r1
 8003310:	1cfb      	adds	r3, r7, #3
 8003312:	701a      	strb	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8003314:	2001      	movs	r0, #1
 8003316:	f7ff ff07 	bl	8003128 <HAL_ChipSelect>
	// Send address to be written
	HAL_SetWriteAddress(address);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	0018      	movs	r0, r3
 800331e:	f7ff ff2b 	bl	8003178 <HAL_SetWriteAddress>
	// Send the data value
	HAL_Write8(val8);
 8003322:	1cfb      	adds	r3, r7, #3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	0018      	movs	r0, r3
 8003328:	f7ff ff7d 	bl	8003226 <HAL_Write8>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 800332c:	2000      	movs	r0, #0
 800332e:	f7ff fefb 	bl	8003128 <HAL_ChipSelect>
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_MemRead32>:

// -------------- Read a 32-bit value from specified address --------------------
uint32_t HAL_MemRead32(uint32_t address)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
	uint32_t val32;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8003342:	2001      	movs	r0, #1
 8003344:	f7ff fef0 	bl	8003128 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f7ff ff28 	bl	80031a0 <HAL_SetReadAddress>
	// Read the data value
	val32 = HAL_Read32();
 8003350:	f7ff ff78 	bl	8003244 <HAL_Read32>
 8003354:	0003      	movs	r3, r0
 8003356:	60fb      	str	r3, [r7, #12]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8003358:	2000      	movs	r0, #0
 800335a:	f7ff fee5 	bl	8003128 <HAL_ChipSelect>

	// Return 32-bit value read
	return val32;
 800335e:	68fb      	ldr	r3, [r7, #12]
}
 8003360:	0018      	movs	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	b004      	add	sp, #16
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_MemRead16>:
// -------------- Read a 16-bit value from specified address --------------------
uint16_t HAL_MemRead16(uint32_t address)
{
 8003368:	b5b0      	push	{r4, r5, r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	uint16_t val16;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff fed9 	bl	8003128 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f7ff ff11 	bl	80031a0 <HAL_SetReadAddress>
	// Read the data value
	val16 = HAL_Read16();
 800337e:	250e      	movs	r5, #14
 8003380:	197c      	adds	r4, r7, r5
 8003382:	f7ff ff6f 	bl	8003264 <HAL_Read16>
 8003386:	0003      	movs	r3, r0
 8003388:	8023      	strh	r3, [r4, #0]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 800338a:	2000      	movs	r0, #0
 800338c:	f7ff fecc 	bl	8003128 <HAL_ChipSelect>

	// Return 16-bit value read
	return val16;
 8003390:	197b      	adds	r3, r7, r5
 8003392:	881b      	ldrh	r3, [r3, #0]
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bdb0      	pop	{r4, r5, r7, pc}

0800339c <HAL_MemRead8>:
// -------------- Read an 8-bit value from specified address --------------------
uint8_t HAL_MemRead8(uint32_t address)
{
 800339c:	b5b0      	push	{r4, r5, r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	uint8_t val8;

	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7ff febf 	bl	8003128 <HAL_ChipSelect>
	// Send address to be read
	HAL_SetReadAddress(address);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff fef7 	bl	80031a0 <HAL_SetReadAddress>
	// Read the data value
	val8 = HAL_Read8();
 80033b2:	250f      	movs	r5, #15
 80033b4:	197c      	adds	r4, r7, r5
 80033b6:	f7ff ff67 	bl	8003288 <HAL_Read8>
 80033ba:	0003      	movs	r3, r0
 80033bc:	7023      	strb	r3, [r4, #0]
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 80033be:	2000      	movs	r0, #0
 80033c0:	f7ff feb2 	bl	8003128 <HAL_ChipSelect>

	// Return 8-bit value read
	return val8;
 80033c4:	197b      	adds	r3, r7, r5
 80033c6:	781b      	ldrb	r3, [r3, #0]
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b004      	add	sp, #16
 80033ce:	bdb0      	pop	{r4, r5, r7, pc}

080033d0 <HAL_HostCmdWrite>:
// ############################# HOST COMMANDS #################################
// -------------------------- Write a host command -----------------------------
void HAL_HostCmdWrite(uint8_t cmd, uint8_t param)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	0002      	movs	r2, r0
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	701a      	strb	r2, [r3, #0]
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	1c0a      	adds	r2, r1, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	// CS low begins the SPI transfer
	HAL_ChipSelect(1);
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7ff fea0 	bl	8003128 <HAL_ChipSelect>
	// Send command
	MCU_SPIWrite8(cmd);
 80033e8:	1dfb      	adds	r3, r7, #7
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fe ff9c 	bl	800232a <MCU_SPIWrite8>
	// followed by parameter
	MCU_SPIWrite8(param);
 80033f2:	1dbb      	adds	r3, r7, #6
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fe ff97 	bl	800232a <MCU_SPIWrite8>
	// and a dummy 00 byte
	MCU_SPIWrite8(0x00);
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7fe ff94 	bl	800232a <MCU_SPIWrite8>
	// CS high terminates the SPI transfer
	HAL_ChipSelect(0);
 8003402:	2000      	movs	r0, #0
 8003404:	f7ff fe90 	bl	8003128 <HAL_ChipSelect>
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}

08003410 <HAL_IncCmdPointer>:
// ######################## SUPPORTING FUNCTIONS ###############################

// --------- Increment co-processor address offset counter --------------------
void HAL_IncCmdPointer(uint16_t commandSize)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	0002      	movs	r2, r0
 8003418:	1dbb      	adds	r3, r7, #6
 800341a:	801a      	strh	r2, [r3, #0]
	// Calculate new offset
	writeCmdPointer = (writeCmdPointer + commandSize) & (EVE_RAM_CMD_SIZE - 1);
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <HAL_IncCmdPointer+0x2c>)
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	1dbb      	adds	r3, r7, #6
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	18d3      	adds	r3, r2, r3
 8003426:	b29b      	uxth	r3, r3
 8003428:	051b      	lsls	r3, r3, #20
 800342a:	0d1b      	lsrs	r3, r3, #20
 800342c:	b29a      	uxth	r2, r3
 800342e:	4b03      	ldr	r3, [pc, #12]	; (800343c <HAL_IncCmdPointer+0x2c>)
 8003430:	801a      	strh	r2, [r3, #0]
}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	2000009c 	.word	0x2000009c

08003440 <HAL_GetCmdPointer>:

// --------- Increment co-processor address offset counter --------------------
uint16_t HAL_GetCmdPointer(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	// Return new offset
	return writeCmdPointer;
 8003444:	4b02      	ldr	r3, [pc, #8]	; (8003450 <HAL_GetCmdPointer+0x10>)
 8003446:	881b      	ldrh	r3, [r3, #0]
}
 8003448:	0018      	movs	r0, r3
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	2000009c 	.word	0x2000009c

08003454 <HAL_WriteCmdPointer>:

void HAL_WriteCmdPointer(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
	// and move write pointer to here
	HAL_MemWrite32(EVE_REG_CMD_WRITE, writeCmdPointer);
 8003458:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_WriteCmdPointer+0x1c>)
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	001a      	movs	r2, r3
 800345e:	4b05      	ldr	r3, [pc, #20]	; (8003474 <HAL_WriteCmdPointer+0x20>)
 8003460:	0011      	movs	r1, r2
 8003462:	0018      	movs	r0, r3
 8003464:	f7ff ff1e 	bl	80032a4 <HAL_MemWrite32>
}
 8003468:	46c0      	nop			; (mov r8, r8)
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	2000009c 	.word	0x2000009c
 8003474:	003020fc 	.word	0x003020fc

08003478 <HAL_WaitCmdFifoEmpty>:

// ------ Wait for co-processor read and write pointers to be equal ------------
uint8_t HAL_WaitCmdFifoEmpty(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0

	// Wait until the two registers match
	do
	{
		// Read the graphics processor read pointer
		readCmdPointer = HAL_MemRead32(EVE_REG_CMD_READ);
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <HAL_WaitCmdFifoEmpty+0x3c>)
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff ff5a 	bl	800333a <HAL_MemRead32>
 8003486:	0003      	movs	r3, r0
 8003488:	607b      	str	r3, [r7, #4]

	} while ((writeCmdPointer != readCmdPointer) && (readCmdPointer != 0xFFF));
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_WaitCmdFifoEmpty+0x40>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	001a      	movs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4293      	cmp	r3, r2
 8003494:	d003      	beq.n	800349e <HAL_WaitCmdFifoEmpty+0x26>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a08      	ldr	r2, [pc, #32]	; (80034bc <HAL_WaitCmdFifoEmpty+0x44>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d1ef      	bne.n	800347e <HAL_WaitCmdFifoEmpty+0x6>


	if(readCmdPointer == 0xFFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a06      	ldr	r2, [pc, #24]	; (80034bc <HAL_WaitCmdFifoEmpty+0x44>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_WaitCmdFifoEmpty+0x32>
	{
		// Return 0xFF if an error occurred
		return 0xFF;
 80034a6:	23ff      	movs	r3, #255	; 0xff
 80034a8:	e000      	b.n	80034ac <HAL_WaitCmdFifoEmpty+0x34>
	}
	else
	{
		// Return 0 if pointers became equal successfully
		return 0;
 80034aa:	2300      	movs	r3, #0
	}
}
 80034ac:	0018      	movs	r0, r3
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	003020f8 	.word	0x003020f8
 80034b8:	2000009c 	.word	0x2000009c
 80034bc:	00000fff 	.word	0x00000fff

080034c0 <HAL_CheckCmdFreeSpace>:
// ------------ Check how much free space is available in CMD FIFO -------------
uint16_t HAL_CheckCmdFreeSpace(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
	uint32_t readCmdPointer = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
	uint16_t Fullness, Freespace;

	// Check the graphics processor read pointer
	readCmdPointer = HAL_MemRead32(EVE_REG_CMD_READ);
 80034ca:	4b0e      	ldr	r3, [pc, #56]	; (8003504 <HAL_CheckCmdFreeSpace+0x44>)
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff ff34 	bl	800333a <HAL_MemRead32>
 80034d2:	0003      	movs	r3, r0
 80034d4:	607b      	str	r3, [r7, #4]

	// Fullness is difference between MCUs current write pointer value and the FT81x's REG_CMD_READ
	Fullness = ((writeCmdPointer - (uint16_t)readCmdPointer) & (EVE_RAM_CMD_SIZE - 1));
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_CheckCmdFreeSpace+0x48>)
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	1cbb      	adds	r3, r7, #2
 80034e4:	0512      	lsls	r2, r2, #20
 80034e6:	0d12      	lsrs	r2, r2, #20
 80034e8:	801a      	strh	r2, [r3, #0]
	// Free Space is 4K - 4 - Fullness (-4 avoids buffer wrapping round)
	Freespace = (EVE_RAM_CMD_SIZE - 4) - Fullness;
 80034ea:	003b      	movs	r3, r7
 80034ec:	1cba      	adds	r2, r7, #2
 80034ee:	8812      	ldrh	r2, [r2, #0]
 80034f0:	4906      	ldr	r1, [pc, #24]	; (800350c <HAL_CheckCmdFreeSpace+0x4c>)
 80034f2:	1a8a      	subs	r2, r1, r2
 80034f4:	801a      	strh	r2, [r3, #0]

	return Freespace;
 80034f6:	003b      	movs	r3, r7
 80034f8:	881b      	ldrh	r3, [r3, #0]
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	003020f8 	.word	0x003020f8
 8003508:	2000009c 	.word	0x2000009c
 800350c:	00000ffc 	.word	0x00000ffc

08003510 <__libc_init_array>:
 8003510:	b570      	push	{r4, r5, r6, lr}
 8003512:	2600      	movs	r6, #0
 8003514:	4d0c      	ldr	r5, [pc, #48]	; (8003548 <__libc_init_array+0x38>)
 8003516:	4c0d      	ldr	r4, [pc, #52]	; (800354c <__libc_init_array+0x3c>)
 8003518:	1b64      	subs	r4, r4, r5
 800351a:	10a4      	asrs	r4, r4, #2
 800351c:	42a6      	cmp	r6, r4
 800351e:	d109      	bne.n	8003534 <__libc_init_array+0x24>
 8003520:	2600      	movs	r6, #0
 8003522:	f000 f82f 	bl	8003584 <_init>
 8003526:	4d0a      	ldr	r5, [pc, #40]	; (8003550 <__libc_init_array+0x40>)
 8003528:	4c0a      	ldr	r4, [pc, #40]	; (8003554 <__libc_init_array+0x44>)
 800352a:	1b64      	subs	r4, r4, r5
 800352c:	10a4      	asrs	r4, r4, #2
 800352e:	42a6      	cmp	r6, r4
 8003530:	d105      	bne.n	800353e <__libc_init_array+0x2e>
 8003532:	bd70      	pop	{r4, r5, r6, pc}
 8003534:	00b3      	lsls	r3, r6, #2
 8003536:	58eb      	ldr	r3, [r5, r3]
 8003538:	4798      	blx	r3
 800353a:	3601      	adds	r6, #1
 800353c:	e7ee      	b.n	800351c <__libc_init_array+0xc>
 800353e:	00b3      	lsls	r3, r6, #2
 8003540:	58eb      	ldr	r3, [r5, r3]
 8003542:	4798      	blx	r3
 8003544:	3601      	adds	r6, #1
 8003546:	e7f2      	b.n	800352e <__libc_init_array+0x1e>
 8003548:	08004ff8 	.word	0x08004ff8
 800354c:	08004ff8 	.word	0x08004ff8
 8003550:	08004ff8 	.word	0x08004ff8
 8003554:	08004ffc 	.word	0x08004ffc

08003558 <memset>:
 8003558:	0003      	movs	r3, r0
 800355a:	1882      	adds	r2, r0, r2
 800355c:	4293      	cmp	r3, r2
 800355e:	d100      	bne.n	8003562 <memset+0xa>
 8003560:	4770      	bx	lr
 8003562:	7019      	strb	r1, [r3, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	e7f9      	b.n	800355c <memset+0x4>

08003568 <strchr>:
 8003568:	b2c9      	uxtb	r1, r1
 800356a:	7803      	ldrb	r3, [r0, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <strchr+0x12>
 8003570:	428b      	cmp	r3, r1
 8003572:	d100      	bne.n	8003576 <strchr+0xe>
 8003574:	4770      	bx	lr
 8003576:	3001      	adds	r0, #1
 8003578:	e7f7      	b.n	800356a <strchr+0x2>
 800357a:	424b      	negs	r3, r1
 800357c:	4159      	adcs	r1, r3
 800357e:	4249      	negs	r1, r1
 8003580:	4008      	ands	r0, r1
 8003582:	e7f7      	b.n	8003574 <strchr+0xc>

08003584 <_init>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr

08003590 <_fini>:
 8003590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003596:	bc08      	pop	{r3}
 8003598:	469e      	mov	lr, r3
 800359a:	4770      	bx	lr
